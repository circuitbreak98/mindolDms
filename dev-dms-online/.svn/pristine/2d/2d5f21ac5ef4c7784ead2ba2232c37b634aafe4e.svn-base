package dms.ep.epssxbase.biz;

import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.data.xml.DataSetXmlTransformer;
import nexcore.framework.core.exception.BizRuntimeException;
import nexcore.framework.core.util.StringUtils;
import fwk.common.CommonArea;
import fwk.utils.PagenateUtils;


/**
 * <ul>
 * <li>업무 그룹명 : dms/에코폰</li>
 * <li>단위업무명: [FU]단말기대금선할인정산관리</li>
 * <li>설  명 : <pre>단말기대금선할인정산관리 FU</pre></li>
 * <li>작성일 : 2015-10-23 09:52:49</li>
 * <li>작성자 : 이민재 (mindol1004)</li>
 * </ul>
 *
 * @author 이민재 (mindol1004)
 */
public class FEPEqpPreDcXclMgmt extends fwk.base.FunctionUnit {

	/**
	 * 이 클래스는 Singleton 객체로 수행됩니다. 
	 * 여기에 필드를 선언하여 사용하면 동시성 문제를 일으킬 수 있습니다.
	 */

	/**
	 * Default Constructor
	 */
	public FEPEqpPreDcXclMgmt(){
		super();
	}

    /**
	 * <pre>[FM]단말기대금선할인정산목록조회</pre>
	 *
	 * @author 김윤환 (kyh0904)
	 * @since 2015-10-23 09:52:49
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- field : DCINAD_STRD_YM [선할인 기준 년월]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 * <pre>
	 *	- record : RS_EQP_DCINAD_LIST
	 *		- field : DCINAD_XCL_NO [선할인 정산 번호]
	 *		- field : DCINAD_STRD_YM [선할인 기준 년월]
	 *		- field : REPV_AGN_ORG_CD [대표 대리점 조직 코드]
	 *		- field : DEALCO_NM [상호명]
	 *		- field : DEALCO_BLICENS_NO [사업자번호]
	 *		- field : DCINAD_AMT [선할인 금액]
	 *		- field : SURTAX_AMT [부가세금액]
	 *		- field : SPLY_PRC [공급가격]
	 *		- field : DCINAD_XCL_CNT [선할인 정산 건수]
	 *		- field : DCINAD_SLIP_DT [선할인 전표 일자]
	 *		- field : DCINAD_SLIP_NO [선할인 전표 번호]
	 *		- field : DCINAD_SLIP_ST [선할인 전표 상태]
	 *		- field : DCINAD_CNCL_SLIP_DT [선할인 취소 전표 일자]
	 *		- field : DCINAD_CNCL_SLIP_NO [선할인 취소 전표 번호]
	 *		- field : SLIP_ST_CD [전표상태코드]
	 *		- field : SLIP_DT [전표일자]
	 * </pre>
	 */
	public IDataSet fSEqpDcinadXcl(IDataSet requestData, IOnlineContext onlineCtx) {
	    IDataSet responseData = new DataSet();
        IDataSet dsCnt = new DataSet();
        IRecordSet rsPagingList = null;
        int intTotalCnt = 0;    
        
        try {
            // 1. DU lookup
            DEPEqpPreDcXclMgmt dEPEqpPreDcXclMgmt = (DEPEqpPreDcXclMgmt)lookupDataUnit(DEPEqpPreDcXclMgmt.class);
            // 2. TOTAL COUNT DM호출
            dsCnt = dEPEqpPreDcXclMgmt.dSEqpDcinadXclTotCnt(requestData, onlineCtx);
            intTotalCnt = Integer.parseInt(dsCnt.getField("TOTAL_CNT"));
            PagenateUtils.setPagenatedParamsToDataSet(requestData);
            
            // 3. LISTDM호출
            responseData = dEPEqpPreDcXclMgmt.dSEqpDcinadXclPaging(requestData, onlineCtx);
            rsPagingList = responseData.getRecordSet("RS_EQP_DCINAD_LIST");          
            PagenateUtils.setPagenatedParamToRecordSet(rsPagingList, requestData, intTotalCnt);
            
        } catch ( BizRuntimeException e ) {
            throw e;
        }
        
        return responseData;
    }

    /**
	 * <pre>[FM]단말기대금선할인정산상세엑셀목록조회</pre>
	 *
	 * @author 김윤환 (kyh0904)
	 * @since 2015-10-23 09:52:49
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- field : UKEY_AGN_CD [대표대리점코드]
	 *	- field : DCINAD_STRD_YM [정산기준년월]
	 *	- field : EXCEL_FIRST [첫번째순번]
	 *	- field : EXCEL_LAST [마지막번째순번]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 * <pre>
	 *	- record : RS_EQP_DCINAD_EXCEL_LIST
	 *		- field : ROWNO [순번]
	 *		- field : EXCEL_TOTAL_CNT [대표리점별총건수]
	 *		- field : CNSL_DT [상담 일자]
	 *		- field : CLCT_DT [회수 일자(반영일자)]
	 *		- field : CNSL_MGMT_NO [상담 관리 번호]
	 *		- field : SCRB_MTHD [가입방법]
	 *		- field : SCRB_NM [가입명]
	 *		- field : SKN_CL [SKN 구분]
	 *		- field : PRE_DC_CL [선할인 구분]
	 *		- field : FEE_DEDC_YN [공제처리여부]
	 *		- field : AMT_RMT_YN [계좌송금여부]
	 *		- field : DEDC_TYP_CD [공제유형코드]
	 *		- field : DPSTR [예금주]
	 *		- field : EQP_MDL_CD [단말기 모델 코드]
	 *		- field : EQP_MDL_NM [단말기 모델명]
	 *		- field : EQP_SER_NO [단말기 일련 번호]
	 *		- field : EQP_ST [단말기 상태]
	 *		- field : CNSL_AMT [상담 금액]
	 *		- field : JDG_EQP_ST [단말기 상태(재감정 등급)]
	 *		- field : JDG_PRCH_AMT [매입 금액(재감정 금액)]
	 *		- field : JDG_DTL [감정상세]
	 *		- field : ERR_JDG_YN [오감정 여부]
	 *		- field : ASSET_AMT [자산가액]
	 *		- field : SKN_SMPL_JDG_DAMT [대리점오류금액]
	 *		- field : AGN_DDCT_AMT [대리점 차감금액]
	 *		- field : AGN_EXPNS_CONF_AMT [대리점 비용 확정 금액]
	 *		- field : XCL_AMT [총정산액]
	 *		- field : SC_DT [현장감정일]
	 *		- field : FST_RGSTR_NM [최초 등록자명]
	 *		- field : FST_RGSTR [최초 등록자]
	 *		- field : SVC_MGMT_NO [서비스 관리 번호]
	 *		- field : SVC_CHG_DT [변경일자]
	 *		- field : SVC_CHG [서비스변경]
	 *		- field : SVC_CHG_DTL [서비스변경사유]
	 *		- field : HEADQ_NM [본부명]
	 *		- field : MKT_TEAM_NM [마케팅 팀 명]
	 *		- field : AGN_ORG_CD [대리점코드]
	 *		- field : AGN_ORG_NM [대리점명]
	 *		- field : UKEY_AGN_CD [대리점코드2]
	 *		- field : UKEY_AGN_NM [대리점명2]
	 *		- field : UKEY_AGN_BLICENS_NO [대리점명2_사업자번호]
	 * </pre>
	 */
	public IDataSet fSEqpDcinadXclDtlExcelLst(IDataSet requestData, IOnlineContext onlineCtx) {
	    IDataSet responseData = new DataSet();
        try {
            // 1. DU lookup
            DEPEqpPreDcXclMgmt dEPEqpPreDcXclMgmt = (DEPEqpPreDcXclMgmt)lookupDataUnit(DEPEqpPreDcXclMgmt.class);
            responseData = dEPEqpPreDcXclMgmt.dSEqpDcinadXclDtlExcelLst(requestData, onlineCtx);
            
        } catch ( BizRuntimeException e ) {
            throw e;
        }
        return responseData;
    }

    /**
	 * <pre>[FM]단말기대금선할인전표발행여부</pre>
	 *
	 * @author 김윤환 (kyh0904)
	 * @since 2015-10-23 09:52:49
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- field : DCINAD_STRD_YM [정산기준년월]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 * <pre>
	 *	- field : CHK_CNT [전표발행진행건수]
	 * </pre>
	 */
	public IDataSet fSEqpPreDcSlipYn(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();
    
        try {
            // 1. DU lookup
            DEPEqpPreDcXclMgmt dEPEqpPreDcXclMgmt = (DEPEqpPreDcXclMgmt)lookupDataUnit(DEPEqpPreDcXclMgmt.class);
            responseData = dEPEqpPreDcXclMgmt.dSEqpPreDcSlipYn(requestData, onlineCtx);            
            
        } catch ( BizRuntimeException e ) {
            throw e;
        } 
    
        return responseData;
    }

	/**
	 * <pre>[FM]전표발행대상사업자번호ERP체크리스트</pre>
	 *
	 * @author 김상오 (myneti99)
	 * @since 2015-10-23 09:52:49
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fSEqpBlicensNoCheckList(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();
    
        try {
            // 1. DU lookup
            DEPEqpPreDcXclMgmt dEPEqpPreDcXclMgmt = (DEPEqpPreDcXclMgmt)lookupDataUnit(DEPEqpPreDcXclMgmt.class);
            responseData = dEPEqpPreDcXclMgmt.dSEqpBlicensNoCheckList(requestData, onlineCtx);            
            
        } catch ( BizRuntimeException e ) {
            throw e;
        } 
    
        return responseData;
    }

	/**
	 * <pre>[FM]거래처코드ERP유무체크</pre>
	 *
	 * @author 김상오 (myneti99)
	 * @since 2015-12-02 14:32:10
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fDealcoERPCheck(IDataSet requestData, IOnlineContext onlineCtx) {
	    IDataSet responseData = new DataSet();
	    String jobExecutionId = ""; // 실행 JOB_ID	
	    try {

	    	HashMap params = new HashMap<String,String>(); // 배치 파라미터 값 정보.                        
	    	
//	    	params.put("YYYYMM", StringUtils.nvlObject(requestData.getField("DCINAD_STRD_YM"),""));   // 년월 (인센티브 기준)
//	    	params.put("YYYY", StringUtils.nvlObject(requestData.getField("DCINAD_STRD_YM"),"").substring(0, 4));   // 년 (인센티브 기준)
//	    	params.put("USER_NO", ca.getUserNo());                       
	    	// D: 전표취소.
	    	params.put("TASK_ID", "EPR002");
	    	params.put("TASK_NM", "거래처상태ERP동기화");                
	    	params.put("COMPONENTNAME_LOCAL_ONLY", "dms.inf.EPR002");            
	    	

	    	jobExecutionId = callBatchJob("EPR002", params, onlineCtx);

	    	waitBatchJobEnd(jobExecutionId, 10000);

	    	int result = getJobReturnCode(jobExecutionId);

	    	if(result == -1) throw new BizRuntimeException("DMS00009"); // 시스템 오류가 발생하였습니다.             

//	    	if (logger.isDebugEnabled()) {                
//	    		logger.debug("#### result #### =======>> "+result);
//	    		logger.debug("#### params.toString #### =======>> "+params.toString());                                
//	    	}
	    } catch ( BizRuntimeException e ) {
            throw e;
        } catch ( Exception e ) {
            throw new BizRuntimeException("DMS00009", e); // 시스템 오류가 발생하였습니다.
        }
 
	    return responseData;
	}
  
}

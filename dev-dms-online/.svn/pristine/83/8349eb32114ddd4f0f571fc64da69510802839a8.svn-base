package dms.ep.epscsbase.biz;

import java.util.Map;

import fwk.common.CommonArea;
import fwk.utils.PagenateUtils;
import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecord;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.data.IResultMessage;
import nexcore.framework.core.data.RecordSet;
import nexcore.framework.core.data.ResultMessage;
import nexcore.framework.core.exception.BizRuntimeException;
import nexcore.framework.core.util.DateUtils;


/**
 * <ul>
 * <li>업무 그룹명 : dms/에코폰</li>
 * <li>단위업무명: [FU]재감정품질검사대상조회목록</li>
 * <li>설  명 : <pre>재감정품질검사대상조회목록</pre></li>
 * <li>작성일 : 2015-08-28 15:49:14</li>
 * <li>작성자 : 양재석 (jsyang)</li>
 * </ul>
 *
 * @author 양재석 (jsyang)
 */
public class FEPRJdgQltyJdgMgmt extends fwk.base.FunctionUnit {

	/**
	 * 이 클래스는 Singleton 객체로 수행됩니다. 
	 * 여기에 필드를 선언하여 사용하면 동시성 문제를 일으킬 수 있습니다.
	 */

	/**
	 * Default Constructor
	 */
	public FEPRJdgQltyJdgMgmt(){
		super();
	}

    /**
	 * <pre>[FM]재감정품질검사대상조회</pre>
	 *
	 * @author 양재석 (jsyang)
	 * @since 2015-08-28 15:49:14
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- field : IN_FR_DT [조회검수시작일자]
	 *	- field : IN_TO_DT [조회검수종료일자]
	 *	- field : AFFIL_AGN [대리점코드]
	 *	- field : CNSL_DEALCO_CD [상담처코드]
	 *	- field : CNSL_MGMT_SER_NO [일련번호]
	 *	- field : EQP_MDL_CD [모델코드]
	 *	- field : DPSTR [예금주(고객명)]
	 *	- field : CNSL_MGMT_NO [접수관리번호]
	 *	- field : BOX_NO [BOX_NO]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 * <pre>
	 *	- record : QLTY_JDG_OBJ_LIST
	 *		- field : PRCH_MGMT_NO [매입 관리 번호]
	 *		- field : CNSL_MGMT_NO [상담 관리 번호(접수 관리 번호)]
	 *		- field : EQP_MDL_CD [모델코드]
	 *		- field : EQP_SER_NO [일련번호]
	 *		- field : TLY_DT [검수일자]
	 *		- field : CNSL_DT [상담일자]
	 *		- field : EQP_COLOR_CD [단말기색상코드]
	 *		- field : AFFIL_ORG_ID [소속 조직 ID]
	 *		- field : ORG_NM [조직명]
	 *		- field : AGN_ORG_CD [대리점 조직 코드]
	 *		- field : AFFIL_AGN_NM [대리점명]
	 *		- field : CNSL_DEALCO_NM [상담처명]
	 *		- field : CNSL_DEALCO_CD [상담처코드]
	 *		- field : EQP_MDL_NM [모델명]
	 *		- field : PRCH_AMT [매입금액]
	 *		- field : BANK_CD [은행코드]
	 *		- field : ACCO_NO [계좌번호]
	 *		- field : DPSTR [예금주(고객명)]
	 *		- field : TEL_NO [연락처]
	 *		- field : CUST_IDEA [고객의사]
	 *		- field : AFFIL_AGN [소속대리점]
	 *		- field : PROGR_ST [진행상태]
	 *		- field : EQP_ST [단말기 상태(등급)]
	 *		- field : SKN_EQP_ST [SKN단말기상태]
	 *		- field : SKN_JDG_CL [SKN감정구분]
	 *		- field : SKN_JDG_AMT [SKN감정금액]
	 *		- field : SKN_SMPL_JDG_DAMT [SKN샘플강정차액]
	 *		- field : SKN_PROC_YN [SKN처리유무]
	 *		- field : SKN_PROC_DT [SKN처리일자]
	 *		- field : CHECK_USER_NM [검수자]
	 *		- field : SKN_DTL_SUGG [SKN상세의견]
	 *		- field : AGN_DDCT_YN [대리점차감여부]
	 *		- field : BOX_NO [BOX_NO]
	 *		- field : CLCT_DT [회수일자]
	 *		- field : DIS_YN [구성품확인여부]
	 *		- field : UBO_AMT [유보금액]
	 *		- field : TOT_AMT [총금액]
	 *		- field : CHECKED [CHECKED]
	 *	- record : QLTY_JDG_OBJ_DTL_LIST
	 *		- field : PRCH_MGMT_NO [매입관리번호]
	 *		- field : EQP_MDL_CD [모델코드]
	 *		- field : PROD_CL [상품 구분]
	 *		- field : IN_QTY [입고 수량]
	 *		- field : IN_AMT [입고 금액]
	 * </pre>
	 */
	public IDataSet fInqRJdgQltyJdgObjList(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();
        IDataSet responseObjData = new DataSet();
        IDataSet responseDtlData = new DataSet();
        IDataSet dsCnt = new DataSet();
        IDataSet reqDs = (IDataSet) requestData.clone();//원거래의 DataSet의 훼손을 막기 위한 Clone
        IRecordSet rsPagingList = null;
        IRecordSet rsList = null;
        int intTotalCnt = 0;

        try {
            // 1. DU lookup
            DEPRJdgQltyJdgMgmt dEPRJdgQltyJdgMgmt = (DEPRJdgQltyJdgMgmt) lookupDataUnit(DEPRJdgQltyJdgMgmt.class);
            // 2. TOTAL COUNT DM호출
            dsCnt = dEPRJdgQltyJdgMgmt.dSInqRJdgQltyJdgObjListTotCnt(requestData, onlineCtx);
            intTotalCnt = Integer.parseInt(dsCnt.getField("TOTAL_CNT"));
            PagenateUtils.setPagenatedParamsToDataSet(reqDs);
            // 3. LISTDM호출
            responseObjData = dEPRJdgQltyJdgMgmt.dSInqRJdgQltyJdgObjListPaging(reqDs, onlineCtx);

            rsList = responseObjData.getRecordSet("QLTY_JDG_OBJ_LIST");
            if(intTotalCnt > 0){
                // 4. 상세LISTDM호출
                responseDtlData = dEPRJdgQltyJdgMgmt.dSInqRJdgQltyJdgObjDtlList(requestData, onlineCtx);
                if(responseDtlData != null && 
                    responseDtlData.getRecordSetCount() > 0 && responseDtlData.getRecordSet("QLTY_JDG_OBJ_DTL_LIST") != null){
                    IRecordSet rsTemp = responseDtlData.getRecordSet("QLTY_JDG_OBJ_DTL_LIST");
                    for(int i = rsTemp.getRecordCount()-1; i >= 0 ; i--){
                        for(int j = 0; j < rsList.getRecordCount(); j++){
                            if(rsList.get(j, "PRCH_MGMT_NO").equals(rsTemp.get(i, "PRCH_MGMT_NO"))){
                                break;
                            }else if(j == (rsList.getRecordCount() - 1)){
                                rsTemp.removeRecord(i);
                            }
                        }
                    }
                    if(rsTemp != null && rsTemp.getRecordCount() > 0){
                        responseData.putRecordSet("QLTY_JDG_OBJ_DTL_LIST", rsTemp);
                    }
                }
                responseData.putRecordSet("QLTY_JDG_OBJ_LIST", rsList);
                rsPagingList = responseData.getRecordSet("QLTY_JDG_OBJ_LIST");
                PagenateUtils.setPagenatedParamToRecordSet(rsPagingList, reqDs, intTotalCnt);
            }
            
        } catch ( BizRuntimeException e ) {
            throw e;
        }
    
        return responseData;
    }

    /**
	 * <pre>[FM]재감정품질검사확인조회</pre>
	 *
	 * @author 양재석 (jsyang)
	 * @since 2015-08-28 15:49:14
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- field : IN_FR_DT [조회검수시작일자]
	 *	- field : IN_TO_DT [조회검수종료일자]
	 *	- field : AFFIL_AGN [대리점코드]
	 *	- field : CNSL_DEALCO_CD [상담처코드]
	 *	- field : CNSL_MGMT_SER_NO [일련번호]
	 *	- field : EQP_MDL_CD [모델코드]
	 *	- field : DPSTR [예금주(고객명)]
	 *	- field : CNSL_MGMT_NO [접수관리번호]
	 *	- field : BOX_NO [BOX_NO]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 * <pre>
	 *	- record : QLTY_JDG_REG_LIST
	 *		- field : PRCH_MGMT_NO [매입 관리 번호]
	 *		- field : CNSL_MGMT_NO [상담 관리 번호(접수 관리 번호)]
	 *		- field : EQP_MDL_CD [모델코드]
	 *		- field : EQP_SER_NO [일련번호]
	 *		- field : TLY_DT [검수일자]
	 *		- field : CNSL_DT [상담일자]
	 *		- field : EQP_COLOR_CD [단말기색상코드]
	 *		- field : AFFIL_ORG_ID [소속 조직 ID]
	 *		- field : ORG_NM [조직명]
	 *		- field : AGN_ORG_CD [대리점 조직 코드]
	 *		- field : AFFIL_AGN_NM [대리점명]
	 *		- field : CNSL_DEALCO_NM [상담처명]
	 *		- field : CNSL_DEALCO_CD [상담처코드]
	 *		- field : EQP_MDL_NM [모델명]
	 *		- field : PRCH_AMT [매입금액]
	 *		- field : BANK_CD [은행코드]
	 *		- field : ACCO_NO [계좌번호]
	 *		- field : DPSTR [예금주(고객명)]
	 *		- field : TEL_NO [연락처]
	 *		- field : CUST_IDEA [고객의사]
	 *		- field : AFFIL_AGN [소속대리점]
	 *		- field : PROGR_ST [진행상태]
	 *		- field : EQP_ST [단말기 상태(등급)]
	 *		- field : SKN_EQP_ST [SKN단말기상태]
	 *		- field : SKN_JDG_CL [SKN감정구분]
	 *		- field : SKN_JDG_AMT [SKN감정금액]
	 *		- field : SKN_SMPL_JDG_DAMT [SKN샘플강정차액]
	 *		- field : SKN_PROC_YN [SKN처리유무]
	 *		- field : SKN_PROC_DT [SKN처리일자]
	 *		- field : CHECK_USER_NM [검수자]
	 *		- field : SKN_DTL_SUGG [SKN상세의견]
	 *		- field : AGN_DDCT_YN [대리점차감여부]
	 *		- field : BOX_NO [BOX_NO]
	 *		- field : CLCT_DT [회수일자]
	 *		- field : DIS_YN [구성품확인여부]
	 *		- field : UBO_AMT [유보금액]
	 *		- field : TOT_AMT [총금액]
	 *		- field : CHECKED [CHECKED]
	 *	- record : QLTY_JDG_REG_DTL_LIST
	 *		- field : PRCH_MGMT_NO [매입관리번호]
	 *		- field : EQP_MDL_CD [모델코드]
	 *		- field : PROD_CL [상품 구분]
	 *		- field : IN_QTY [입고 수량]
	 *		- field : IN_AMT [입고 금액]
	 * </pre>
	 */
	public IDataSet fInqRJdgQltyJdgRegList(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();
        IDataSet responseRegData = new DataSet();
        IDataSet responseDtlData = new DataSet();
        IDataSet dsCnt = new DataSet();
        IDataSet reqDs = (IDataSet) requestData.clone();//원거래의 DataSet의 훼손을 막기 위한 Clone
        IRecordSet rsPagingList = null;
        IRecordSet rsList = null;
        int intTotalCnt = 0;

        try {
            // 1. DU lookup
            DEPRJdgQltyJdgMgmt dEPRJdgQltyJdgMgmt = (DEPRJdgQltyJdgMgmt) lookupDataUnit(DEPRJdgQltyJdgMgmt.class);
            // 2. TOTAL COUNT DM호출
            dsCnt = dEPRJdgQltyJdgMgmt.dSInqRJdgQltyJdgRegListTotCnt(requestData, onlineCtx);
            intTotalCnt = Integer.parseInt(dsCnt.getField("TOTAL_CNT"));
            PagenateUtils.setPagenatedParamsToDataSet(reqDs);
            // 3. LISTDM호출
            responseRegData = dEPRJdgQltyJdgMgmt.dSInqRJdgQltyJdgRegListPaging(reqDs, onlineCtx);

            rsList = responseRegData.getRecordSet("QLTY_JDG_REG_LIST");
            if(intTotalCnt > 0){
                // 4. 상세LISTDM호출
                responseDtlData = dEPRJdgQltyJdgMgmt.dSInqRJdgQltyJdgRegDtlList(requestData, onlineCtx);
                if(responseDtlData != null && 
                    responseDtlData.getRecordSetCount() > 0 && responseDtlData.getRecordSet("QLTY_JDG_REG_DTL_LIST") != null){
                    IRecordSet rsTemp = responseDtlData.getRecordSet("QLTY_JDG_REG_DTL_LIST");
                    for(int i = rsTemp.getRecordCount()-1; i >= 0 ; i--){
                        for(int j = 0; j < rsList.getRecordCount(); j++){
                            if(rsList.get(j, "PRCH_MGMT_NO").equals(rsTemp.get(i, "PRCH_MGMT_NO"))){
                                break;
                            }else if(j == (rsList.getRecordCount() - 1)){
                                rsTemp.removeRecord(i);
                            }
                        }
                    }
                    if(rsTemp != null && rsTemp.getRecordCount() > 0){
                        responseData.putRecordSet("QLTY_JDG_REG_DTL_LIST", rsTemp);
                    }
                }
                responseData.putRecordSet("QLTY_JDG_REG_LIST", rsList);
                rsPagingList = responseData.getRecordSet("QLTY_JDG_REG_LIST");
                PagenateUtils.setPagenatedParamToRecordSet(rsPagingList, reqDs, intTotalCnt);
            }
        } catch ( BizRuntimeException e ) {
            throw e;
        }
    
        return responseData;
    }

    /**
	 * <pre>재감정품질검사대상검수확인수정</pre>
	 *
	 * @author 양재석 (jsyang)
	 * @since 2015-08-28 15:49:14
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- record : QLTY_JDG_OBJ_LIST
	 *		- field : PRCH_MGMT_NO [매입 관리 번호]
	 *		- field : CNSL_MGMT_NO [상담 관리 번호(접수 관리 번호)]
	 *		- field : EQP_MDL_CD [모델코드]
	 *		- field : EQP_SER_NO [일련번호]
	 *		- field : TLY_DT [검수일자]
	 *		- field : CNSL_DT [상담일자]
	 *		- field : EQP_COLOR_CD [단말기색상코드]
	 *		- field : AFFIL_ORG_ID [소속 조직 ID]
	 *		- field : ORG_NM [조직명]
	 *		- field : AGN_ORG_CD [대리점 조직 코드]
	 *		- field : AFFIL_AGN_NM [대리점명]
	 *		- field : CNSL_DEALCO_NM [상담처명]
	 *		- field : CNSL_DEALCO_CD [상담처코드]
	 *		- field : EQP_MDL_NM [모델명]
	 *		- field : PRCH_AMT [매입금액]
	 *		- field : BANK_CD [은행코드]
	 *		- field : ACCO_NO [계좌번호]
	 *		- field : DPSTR [예금주(고객명)]
	 *		- field : TEL_NO [연락처]
	 *		- field : CUST_IDEA [고객의사]
	 *		- field : AFFIL_AGN [소속대리점]
	 *		- field : PROGR_ST [진행상태]
	 *		- field : EQP_ST [단말기 상태(등급)]
	 *		- field : SKN_EQP_ST [SKN단말기상태]
	 *		- field : SKN_JDG_CL [SKN감정구분]
	 *		- field : SKN_JDG_AMT [SKN감정금액]
	 *		- field : SKN_SMPL_JDG_DAMT [SKN샘플강정차액]
	 *		- field : SKN_PROC_YN [SKN처리유무]
	 *		- field : SKN_PROC_DT [SKN처리일자]
	 *		- field : CHECK_USER_NM [검수자]
	 *		- field : SKN_DTL_SUGG [SKN상세의견]
	 *		- field : AGN_DDCT_YN [대리점차감여부]
	 *		- field : BOX_NO [BOX_NO]
	 *		- field : CLCT_DT [회수일자]
	 *		- field : DIS_YN [구성품확인여부]
	 *		- field : UBO_AMT [유보금액]
	 *		- field : TOT_AMT [총금액]
	 *		- field : CHECKED [CHECKED]
	 *	- record : QLTY_JDG_OBJ_DTL_LIST
	 *		- field : PRCH_MGMT_NO [매입관리번호]
	 *		- field : EQP_MDL_CD [모델코드]
	 *		- field : PROD_CL [상품 구분]
	 *		- field : IN_QTY [입고 수량]
	 *		- field : IN_AMT [입고 금액]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fURJdgQltyJdgRegUpd(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();

        IRecordSet rsList = requestData.getRecordSet("QLTY_JDG_OBJ_LIST");
        IRecordSet rsDtlList = null;
        IRecordSet rsMasterList = null;
        IRecordSet rsEqpSerNoList = null;
        IRecordSet rsConsultList = null;
        
        String sDate = DateUtils.getCurrentDate();
        
        try {
            if(requestData != null && requestData.getRecordSetCount() > 0){
                if(requestData.getRecordSet("QLTY_JDG_OBJ_LIST") != null){
                    rsDtlList = requestData.getRecordSet("QLTY_JDG_OBJ_DTL_LIST");
                    IRecord rMaster = null;
                    IRecord rEqp = null;
                    IRecord rCon = null;
                    for(int  i = 0; i < rsList.getRecordCount(); i++){
                        if("1".equals(rsList.get(i, "CHECKED"))){
                            rsMasterList = new RecordSet("QLTY_JDG_MASTER", new String[]{"IN_SCHD_DT","AFFIL_ORG_ID","CNSL_DEALCO_CD","IN_CL","IN_CONF_QTY","PRCH_MGMT_NO"});
                            rMaster = rsMasterList.newRecord();
                            rMaster.set("IN_SCHD_DT", sDate);
                            rMaster.set("AFFIL_ORG_ID", rsList.get(i, "AFFIL_ORG_ID").toString());
                            rMaster.set("CNSL_DEALCO_CD", rsList.get(i, "CNSL_DEALCO_CD").toString());
                            rMaster.set("IN_CL", "114");
                            rMaster.set("IN_CONF_QTY", "1");
                            rMaster.set("PRCH_MGMT_NO", rsList.get(i, "PRCH_MGMT_NO"));
                            
                            rsEqpSerNoList = new RecordSet("QLTY_JDG_EQP", new String[]{"EQP_SER_NO","EQP_COLOR_CD","EQP_MDL_CD","PROD_CL","IN_QTY","IN_AMT","EQP_ST","PRCH_MGMT_NO","NC_REC_STATUS"});
                            rsConsultList = new RecordSet("QLTY_JDG_CONSULT", new String[]{"EQP_SER_NO","EQP_COLOR_CD","EQP_MDL_CD","PROD_CL","IN_QTY","IN_AMT","EQP_ST","PRCH_MGMT_NO","NC_REC_STATUS"});
                            rEqp = rsEqpSerNoList.newRecord();
                            rEqp.set("EQP_SER_NO", rsList.get(i, "EQP_SER_NO").toString());
                            rEqp.set("EQP_COLOR_CD", rsList.get(i, "EQP_COLOR_CD").toString());
                            rEqp.set("EQP_MDL_CD", rsList.get(i, "EQP_MDL_CD").toString());
                            rEqp.set("PROD_CL", "1");
                            rEqp.set("IN_QTY", "1");
                            if("11050".equals(rsList.get(i, "CNSL_DEALCO_CD"))){
                                rEqp.set("IN_AMT", rsList.get(i, "SKN_JDG_AMT").toString());
                            }else{
                                rEqp.set("IN_AMT", rsList.get(i, "PRCH_AMT").toString());
                            }
                            rEqp.set("EQP_ST", rsList.get(i, "EQP_ST").toString());
                            rEqp.set("PRCH_MGMT_NO", rsList.get(i, "PRCH_MGMT_NO").toString());
                            rEqp.set("NC_REC_STATUS", "insert");
                            
                            rCon = rsConsultList.newRecord();
                            rCon = rEqp;
                            rsConsultList.setRecord(0, rCon);
                            
                            requestData.putRecordSet("QLTY_JDG_CONSULT", rsConsultList);
                            
                            for(int j = 0; j < rsDtlList.getRecordCount(); j++){
                                if(rsList.get(i, "PRCH_MGMT_NO").equals(rsDtlList.get(j, "PRCH_MGMT_NO").toString())){
                                    rsEqpSerNoList.addRecord(rsDtlList.getRecord(j));
                                }
                            }
                            
                            requestData.putRecordSet("QLTY_JDG_MASTER", rsMasterList);
                            requestData.putRecordSet("QLTY_JDG_EQP", rsEqpSerNoList);
                            
                            
                            String AAA = "";
                            //AAA = "111";
                            
                        }
                    }
                }
            }
        } catch ( BizRuntimeException e ) {
            throw e;
        }

        return responseData;
    }
  
}

package dms.pr.prspmbase.biz;

import java.util.Map;

import fwk.utils.PagenateUtils;
import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecord;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.data.IResultMessage;
import nexcore.framework.core.data.ResultMessage;
import nexcore.framework.core.exception.BizRuntimeException;
import nexcore.framework.core.util.StringUtils;


/**
 * <ul>
 * <li>업무 그룹명 : dms/임대R</li>
 * <li>단위업무명: [FU]단말기입고관리</li>
 * <li>설  명 : <pre>단말기입고관리FU</pre></li>
 * <li>작성일 : 2015-07-10 13:08:13</li>
 * <li>작성자 : 김상오 (myneti99)</li>
 * </ul>
 *
 * @author 김상오 (myneti99)
 */
public class FPREqpReqpInMgmt extends fwk.base.FunctionUnit {

	/**
	 * 이 클래스는 Singleton 객체로 수행됩니다. 
	 * 여기에 필드를 선언하여 사용하면 동시성 문제를 일으킬 수 있습니다.
	 */

	/**
	 * Default Constructor
	 */
	public FPREqpReqpInMgmt(){
		super();
	}

	/**
	 * <pre>단말기입고등록</pre>
	 *
	 * @author 김상오 (myneti99)
	 * @since 2015-07-10 13:08:13
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fRegEqpReqpIn(IDataSet requestData, IOnlineContext onlineCtx) {
	    IDataSet responseData = new DataSet();
	
	    // 처리 결과값을 responseData에 넣어서 리턴하십시요
	    try {
			// 1. DU lookup
	    	DPREqpReqpInMgmt dPREqpReqpInMgmt = (DPREqpReqpInMgmt) lookupDataUnit(DPREqpReqpInMgmt.class);
			// 2. Validation DM호출
			IDataSet valDS = dPREqpReqpInMgmt.dSInveEqpChk(requestData, onlineCtx);
			if ( Integer.parseInt(valDS.getField("ROW_CNT")) > 0 ) {
				throw new BizRuntimeException("DMS00003"); //중복입력 된 데이터가 존재합니다.
			}
			//단말기자산 일련번호조회
			valDS = dPREqpReqpInMgmt.dSInveNum(requestData, onlineCtx);
			requestData.putField("ASSET_NUM", valDS.getField("ASSET_NUM"));
			//단말기입고 일련번호조회
			valDS = dPREqpReqpInMgmt.dSEqpInNum(requestData, onlineCtx);
			requestData.putField("EQP_IN_NUM", valDS.getField("EQP_IN_NUM"));

			// 3. 업무 DM호출 단말기자산입력,단말기입고입력,구성품출고
			responseData = dPREqpReqpInMgmt.dIEqpInve(requestData, onlineCtx);
			responseData = dPREqpReqpInMgmt.dIEqpIn(requestData, onlineCtx);
			//responseData = dPREqpReqpInMgmt.dICmptOut(requestData, onlineCtx);
		} catch ( BizRuntimeException e ) {
			throw e;
		}
	
	    return responseData;
	}

	/**
	 * <pre>단말기입고상세조회</pre>
	 *
	 * @author 김상오 (myneti99)
	 * @since 2015-07-10 13:10:55
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fInqEqpReqpInDtlLst(IDataSet requestData, IOnlineContext onlineCtx) {
	    IDataSet responseData = new DataSet();
	    try {
            // 1. DU lookup
	        DPREqpReqpInMgmt dPREqpReqpInMgmt = (DPREqpReqpInMgmt) lookupDataUnit(DPREqpReqpInMgmt.class);
            // 3. 업무 DM호출
            responseData = dPREqpReqpInMgmt.dSEqpReqpIn(requestData, onlineCtx);
        } catch ( BizRuntimeException e ) {
            throw e;
        }
	    return responseData;
	}

    /**
	 * <pre>단말기 입고 조회</pre>
	 *
	 * @author 박홍서 (uni9401)
	 * @since 2015-07-15 16:54:55
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fInqEqpReqpInLst(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();
        IDataSet dsCnt = new DataSet();
        IRecordSet rsPagingList = null;
        int intTotalCnt = 0;

        try {
            // 1. DU lookup
            DPREqpReqpInMgmt dPREqpReqpInMgmt = (DPREqpReqpInMgmt) lookupDataUnit(DPREqpReqpInMgmt.class);
            // 2. TOTAL COUNT DM호출
            dsCnt = dPREqpReqpInMgmt.dSEqpReqpInLstGrpTotCnt(requestData, onlineCtx);
            intTotalCnt = Integer.parseInt(dsCnt.getField("TOTAL_CNT"));
            PagenateUtils.setPagenatedParamsToDataSet(requestData);

            // 3. LISTDM호출
            responseData = dPREqpReqpInMgmt.dSEqpReqpInLstGrpPaging(requestData, onlineCtx);

            rsPagingList = responseData.getRecordSet("RS_EQP_REQP_IN_LIST");
            PagenateUtils.setPagenatedParamToRecordSet(rsPagingList, requestData, intTotalCnt);
        } catch ( BizRuntimeException e ) {
            throw e;
        }
        return responseData;
    }
  
}

package dms.ep.epssxbase.biz;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;

import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.data.xml.DataSetXmlTransformer;
import nexcore.framework.core.exception.BizRuntimeException;
import fwk.common.CommonArea;
import fwk.utils.PagenateUtils;


/**
 * <ul>
 * <li>업무 그룹명 : dms/에코폰</li>
 * <li>단위업무명: [FU]재고이관정산관리</li>
 * <li>설  명 : <pre>재고이관정산관리 FU</pre></li>
 * <li>작성일 : 2015-11-19 18:23:33</li>
 * <li>작성자 : 이민재 (mindol1004)</li>
 * </ul>
 *
 * @author 이민재 (mindol1004)
 */
public class FEPInveTrnsfXclMgmt extends fwk.base.FunctionUnit {

	/**
	 * 이 클래스는 Singleton 객체로 수행됩니다. 
	 * 여기에 필드를 선언하여 사용하면 동시성 문제를 일으킬 수 있습니다.
	 */

	/**
	 * Default Constructor
	 */
	public FEPInveTrnsfXclMgmt(){
		super();
	}

    /**
	 * <pre>재고이관정산관리조회</pre>
	 *
	 * @author 이민재 (mindol1004)
	 * @since 2015-11-19 18:23:33
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- field : EQP_MDL_CD [모델코드]
	 *	- field : EQP_SER_NO [일련번호]
	 *	- field : CNSL_MGMT_NO [접수관리번호]
	 *	- field : CONF_STA_DT [시작일자]
	 *	- field : CONF_END_DT [종료일자]
	 *	- field : SLIP_ST [전표상태]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 * <pre>
	 *	- record : RS_INVE_XCL_LIST
	 *		- field : INVE_MOV_XCL_NO [재고이관정산번호]
	 *		- field : INVE_MOV_DT [이관일자]
	 *		- field : CNSL_MGMT_NO [접수관리번호]
	 *		- field : PRCH_MGMT_NO [매입관리번호]
	 *		- field : EQP_MDL_CD [모델코드]
	 *		- field : EQP_MDL_NM [모델명]
	 *		- field : EQP_SER_NO [일련번호]
	 *		- field : INVE_AMT [재고금액]
	 *		- field : SLIP_DT [전표처리일]
	 *		- field : SLIP_NO [전표번호]
	 *		- field : SLIP_ST [전표상태]
	 *		- field : YYYY [전표처리년도]
	 * </pre>
	 */
	public IDataSet fInqInveTrnsfXclList(IDataSet requestData, IOnlineContext onlineCtx) {
	    IDataSet responseData = new DataSet();
        IDataSet dsCnt = new DataSet();
        IDataSet reqDs = (IDataSet) requestData.clone();//원거래의 DataSet의 훼손을 막기 위한 Clone
        IRecordSet rsPagingList = null;
        int intTotalCnt = 0;

        try {
            // 1. DU lookup
            DEPInveTrnsfXclMgmt dEPInveTrnsfXclMgmt = (DEPInveTrnsfXclMgmt) lookupDataUnit(DEPInveTrnsfXclMgmt.class);
            // 2. TOTAL COUNT DM호출
            dsCnt = dEPInveTrnsfXclMgmt.dSInveTrnsfXclTotCnt(reqDs, onlineCtx);
            intTotalCnt = Integer.parseInt(dsCnt.getField("TOTAL_CNT"));
            PagenateUtils.setPagenatedParamsToDataSet(reqDs);
            // 3. LISTDM호출
            responseData = dEPInveTrnsfXclMgmt.dSInveTrnsfXclPaging(reqDs, onlineCtx);

            rsPagingList = responseData.getRecordSet("RS_INVE_XCL_LIST");
            PagenateUtils.setPagenatedParamToRecordSet(rsPagingList, reqDs, intTotalCnt);
            
        } catch ( BizRuntimeException e ) {
            throw e;
        }
    
        return responseData;
    }

    /**
	 * <pre>재고이관정산전표발행</pre>
	 *
	 * @author 이민재 (mindol1004)
	 * @since 2015-11-19 18:23:33
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- record : RS_SLIP_LIST
	 *		- field : INVE_MOV_XCL_NO [재고이동정산번호]
	 *		- field : INVE_MOV_DT [이관일자]
	 *		- field : CNSL_MGMT_NO [접수관리번호]
	 *		- field : PRCH_MGMT_NO [매입관리번호]
	 *		- field : EQP_MDL_CD [모델코드]
	 *		- field : EQP_MDL_NM [모델명]
	 *		- field : EQP_SER_NO [일련번호]
	 *		- field : INVE_AMT [정산금액]
	 *		- field : SLIP_DT [전표처리일]
	 *		- field : SLIP_NO [전표번호]
	 *		- field : SLIP_ST [전표상태]
	 *		- field : YYYY [전표처리년도]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fSaveInveTrnsfXclSlip(IDataSet requestData, IOnlineContext onlineCtx) {
	    IDataSet responseData = new DataSet();
        IDataSet reqDs = (IDataSet) requestData.clone();//원거래의 DataSet의 훼손을 막기 위한 Clone
        CommonArea ca = getCommonArea(onlineCtx);

        try {
            
            reqDs.putField("USERNO", ca.getUserNo());
            reqDs.putField("SLIP_TYPE", "EP_YI");

            ByteArrayOutputStream bout = new ByteArrayOutputStream(1024);
            DataSetXmlTransformer.dataSetToXml(reqDs, bout, "UTF-8");
            String dsXml = bout.toString("UTF-8");

            // call on-demand batch job
            Map<String ,String> params = new HashMap<String ,String>();
            params.put("TASK_ID", "EPR010");
            params.put("TASK_NM", "전표발행");
            params.put("USER_NO", ca.getUserNo());
            params.put("COMPONENTNAME_LOCAL_ONLY", "dms.inf.EPR010");               
            params.put("POST_SLIP_DATASET", dsXml);
            String jobExecutionId = callBatchJob("EPR010", params, onlineCtx);
            waitBatchJobEnd(jobExecutionId, 10000);
            int result = getJobReturnCode(jobExecutionId);

            if(result == -1) throw new BizRuntimeException("DMS00009"); // 시스템 오류가 발생하였습니다.
            
        } catch ( BizRuntimeException e ) {
            throw e;
        } catch ( Exception e ) {
            throw new BizRuntimeException("DMS00009", e); //시스템 오류
        }
    
        return responseData;
    }

    /**
	 * <pre>재고이관정산전표취소</pre>
	 *
	 * @author 이민재 (mindol1004)
	 * @since 2015-11-19 18:23:33
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- record : RS_SLIP_LIST
	 *		- field : INVE_MOV_XCL_NO [재고이동정산번호]
	 *		- field : INVE_MOV_DT [이관일자]
	 *		- field : CNSL_MGMT_NO [접수관리번호]
	 *		- field : PRCH_MGMT_NO [매입관리번호]
	 *		- field : EQP_MDL_CD [모델코드]
	 *		- field : EQP_MDL_NM [모델명]
	 *		- field : EQP_SER_NO [일련번호]
	 *		- field : INVE_AMT [정산금액]
	 *		- field : SLIP_DT [전표처리일]
	 *		- field : SLIP_NO [전표번호]
	 *		- field : SLIP_ST [전표상태]
	 *		- field : YYYY [전표처리년도]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fSaveInveTrnsfXclSlipDel(IDataSet requestData, IOnlineContext onlineCtx) {
	    IDataSet responseData = new DataSet();
        IDataSet reqDs = (IDataSet) requestData.clone();//원거래의 DataSet의 훼손을 막기 위한 Clone
        CommonArea ca = getCommonArea(onlineCtx);

        try {
            reqDs.putField("USERNO", ca.getUserNo());
            reqDs.putField("SLIP_TYPE", "EP_YI");

            ByteArrayOutputStream bout = new ByteArrayOutputStream(1024);
            DataSetXmlTransformer.dataSetToXml(reqDs, bout, "UTF-8");
            String dsXml = bout.toString("UTF-8");

            // call on-demand batch job
            Map<String ,String> params = new HashMap<String ,String>();
            params.put("TASK_ID", "EPR011");
            params.put("TASK_NM", "전표취소");
            params.put("USER_NO", ca.getUserNo());
            params.put("COMPONENTNAME_LOCAL_ONLY", "dms.inf.EPR011");               
            params.put("POST_SLIP_DATASET", dsXml);
            String jobExecutionId = callBatchJob("EPR011", params, onlineCtx);
            waitBatchJobEnd(jobExecutionId, 10000);
            int result = getJobReturnCode(jobExecutionId);

            if(result == -1) throw new BizRuntimeException("DMS00009"); // 시스템 오류가 발생하였습니다.
            
        } catch ( BizRuntimeException e ) {
            throw e;
        } catch ( Exception e ) {
            throw new BizRuntimeException("DMS00009", e); //시스템 오류
        }
    
        return responseData;
    }
  
}

package dms.ep.epssxbase.biz;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;

import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.data.xml.DataSetXmlTransformer;
import nexcore.framework.core.exception.BizRuntimeException;
import fwk.common.CommonArea;


/**
 * <ul>
 * <li>업무 그룹명 : dms/에코폰</li>
 * <li>단위업무명: [FU]단말기대금계좌송금정산관리</li>
 * <li>설  명 : <pre>단말기대금계좌송금정산관리 FU</pre></li>
 * <li>작성일 : 2015-10-23 09:54:09</li>
 * <li>작성자 : 이민재 (mindol1004)</li>
 * </ul>
 *
 * @author 이민재 (mindol1004)
 */
public class FEPEqpAmtRmtXclMgmt extends fwk.base.FunctionUnit {

	/**
	 * 이 클래스는 Singleton 객체로 수행됩니다. 
	 * 여기에 필드를 선언하여 사용하면 동시성 문제를 일으킬 수 있습니다.
	 */

	/**
	 * Default Constructor
	 */
	public FEPEqpAmtRmtXclMgmt(){
		super();
	}

    /**
	 * <pre>단말기대금계좌송금조회</pre>
	 *
	 * @author 이민재 (mindol1004)
	 * @since 2015-10-23 09:54:09
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- field : STRD_FR [정산기준시작일자]
	 *	- field : STRD_TO [정산기준종료일자]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 * <pre>
	 *	- record : RS_SLIP_LIST
	 *		- field : ACCORMT_XCL_NO [계좌송금 정산 번호]
	 *		- field : XCL_STRD_STA_DT [정산 기준 시작 일자]
	 *		- field : XCL_STRD_END_DT [정산 기준 종료 일자]
	 *		- field : INVE_TYP_CD [재고 유형 코드]
	 *		- field : XCL_DEALCO_CD [정산 거래처 코드]
	 *		- field : ACCORMT_AMT [계좌송금 금액]
	 *		- field : ACCORMT_XCL_CNT [계좌송금 정산 건수]
	 *		- field : SLIP_DT [전표 일자]
	 *		- field : SLIP_NO [전표 번호]
	 *		- field : SLIP_ST [전표 상태]
	 *		- field : YYYY [전표년도]
	 *		- field : ACCORMT_CNCL_SLIP_DT [계좌송금 취소 전표 일자]
	 *		- field : ACCORMT_CNCL_SLIP_NO [계좌송금 취소 전표 번호]
	 *		- field : DEALCO_BLICENS_NO [사업자번호]
	 * </pre>
	 */
	public IDataSet fInqEqpAmtRmtXclList(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();
        IDataSet reqDs = (IDataSet) requestData.clone();//원거래의 DataSet의 훼손을 막기 위한 Clone
        
        try {
            // 1. DU lookup
            DEPEqpAmtRmtXclMgmt dEPEqpAmtRmtXclMgmt = (DEPEqpAmtRmtXclMgmt) lookupDataUnit(DEPEqpAmtRmtXclMgmt.class);

            // 2. LISTDM호출
            responseData = dEPEqpAmtRmtXclMgmt.dSEqpAmtRmtXclList(reqDs, onlineCtx);
            
        } catch ( BizRuntimeException e ) {
            throw e; //시스템 오류가 발생하였습니다.
        }
    
        return responseData;
    }

    /**
	 * <pre>단말기대금계좌송금상세조회</pre>
	 *
	 * @author 이민재 (mindol1004)
	 * @since 2015-10-23 09:54:09
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- field : ACCO_RMT_XCL_NO [정산번호]
	 *	- field : EXCEL_FIRST [시작번호]
	 *	- field : EXCEL_LAST [종료번호]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 * <pre>
	 *	- record : RS_EQP_AMTRMT_DTL
	 *		- field : ROWNO [번호]
	 *		- field : EXCEL_TOTAL_CNT [총건수]
	 *		- field : ACCO_RMT_XCL_NO [요금 선납 정산 번호]
	 *		- field : ACCO_RMT_XCL_DTL_SEQ [요금 선납 정산 상세 순번]
	 *		- field : INVE_TYP_CD [재고 유형 코드]
	 *		- field : CNSL_MGMT_NO [상담 관리 번호]
	 *		- field : PRCH_MGMT_NO [매입 관리 번호]
	 *		- field : EQP_MDL_NM [모델명]
	 *		- field : EQP_MDL_CD [모델코드]
	 *		- field : EQP_SER_NO [일련번호]
	 *		- field : EQP_ST [단말기상태]
	 *		- field : CNSL_DT [상담 일자]
	 *		- field : CLCT_DT [회수 일자]
	 *		- field : RMT_DT [송금 일자]
	 *		- field : XCL_AMT [정산 금액]
	 *		- field : EQP_ST_DTAIL [단말기 상태 세부]
	 *		- field : CUST_GRP [고객그룹]
	 * </pre>
	 */
	public IDataSet fInqEqpAmtRmtXclDtl(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();
        IDataSet reqDs = (IDataSet) requestData.clone();//원거래의 DataSet의 훼손을 막기 위한 Clone
        
        try {
            // 1. DU lookup
            DEPEqpAmtRmtXclMgmt dEPEqpAmtRmtXclMgmt = (DEPEqpAmtRmtXclMgmt) lookupDataUnit(DEPEqpAmtRmtXclMgmt.class);

            // 2. LISTDM호출
            responseData = dEPEqpAmtRmtXclMgmt.dSEqpAmtRmtXclDtl(reqDs, onlineCtx);
            
        } catch ( BizRuntimeException e ) {
            throw e; //시스템 오류가 발생하였습니다.
        }
    
        return responseData;
    }

    /**
	 * <pre>단말기대금계좌송금재집계</pre>
	 *
	 * @author 이민재 (mindol1004)
	 * @since 2015-10-23 10:39:15
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fSaveEqpAmtRmtXcl(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();
        IDataSet reqDs = (IDataSet) requestData.clone();//원거래의 DataSet의 훼손을 막기 위한 Clone

        try {
            // 1. DU lookup
            DEPEqpAmtRmtXclMgmt dEPEqpAmtRmtXclMgmt = (DEPEqpAmtRmtXclMgmt) lookupDataUnit(DEPEqpAmtRmtXclMgmt.class);
            
            IDataSet dsCnt = dEPEqpAmtRmtXclMgmt.dSEqpAmtRmtXclChk(reqDs, onlineCtx);
            if( dsCnt.getIntField("CNT") > 0){
                throw new BizRuntimeException("DMS00149"); // 재집계가 불가합니다.
            }
            
            IRecordSet seqRs = dEPEqpAmtRmtXclMgmt.dSEqpAmtRmtXclSeq(reqDs, onlineCtx).getRecordSet("RS_EQP_ACCO_RMT_SEQ");
           // IDataSet seqDs = null;
            
            if (seqRs.getRecordCount() > 0) {
                throw new BizRuntimeException("DMS00117"); // 재집계가 불가합니다.
               /* for (int i = 0; i < seqRs.getRecordCount(); i++) {
                    seqDs = new DataSet();
                    seqDs.putFieldMap(seqRs.getRecordMap(i));
                    seqDs.putField("USERNO", requestData.getField("USERNO"));

                    dEPEqpAmtRmtXclMgmt.dUEqpAmtRmtXclDel(seqDs, onlineCtx);
                    dEPEqpAmtRmtXclMgmt.dUEqpAmtRmtXclDtlDel(seqDs, onlineCtx);
                }*/
            }

            // 2. DM호출
            dEPEqpAmtRmtXclMgmt.dIEqpAmtRmtXcl(reqDs, onlineCtx);
            dEPEqpAmtRmtXclMgmt.dIEqpAmtRmtXclDtl(reqDs, onlineCtx);
            
        } catch ( BizRuntimeException e ) {
            throw e;
        }
    
        return responseData;
    }

    /**
	 * <pre>단말기대금계좌송금전표발행</pre>
	 *
	 * @author 이민재 (mindol1004)
	 * @since 2015-10-23 09:54:09
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- record : RS_SLIP_LIST
	 *		- field : STRD_FR [정산기준시작일자]
	 *		- field : STRD_TO [정산기준종료일자]
	 *		- field : ACCORMT_XCL_NO [계좌송금 정산 번호]
	 *		- field : XCL_STRD_STA_DT [정산 기준 시작 일자]
	 *		- field : XCL_STRD_END_DT [정산 기준 종료 일자]
	 *		- field : INVE_TYP_CD [재고 유형 코드]
	 *		- field : XCL_DEALCO_CD [정산 거래처 코드]
	 *		- field : ACCORMT_AMT [계좌송금 금액]
	 *		- field : ACCORMT_XCL_CNT [계좌송금 정산 건수]
	 *		- field : SLIP_DT [전표 일자]
	 *		- field : SLIP_NO [전표 번호]
	 *		- field : SLIP_ST [전표 상태]
	 *		- field : YYYY [전표년도]
	 *		- field : ACCORMT_CNCL_SLIP_DT [계좌송금 취소 전표 일자]
	 *		- field : ACCORMT_CNCL_SLIP_NO [계좌송금 취소 전표 번호]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fSaveEqpAmtRmtXclSlip(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();
        IDataSet reqDs = (IDataSet) requestData.clone();//원거래의 DataSet의 훼손을 막기 위한 Clone
        CommonArea ca = getCommonArea(onlineCtx);

        try {
            
            reqDs.putField("USERNO", ca.getUserNo());
            reqDs.putField("SLIP_TYPE", "EP_XR");

            ByteArrayOutputStream bout = new ByteArrayOutputStream(1024);
            DataSetXmlTransformer.dataSetToXml(reqDs, bout, "UTF-8");
            String dsXml = bout.toString("UTF-8");

            // call on-demand batch job
            Map<String ,String> params = new HashMap<String ,String>();
            params.put("TASK_ID", "EPR010");
            params.put("TASK_NM", "전표발행");
            params.put("USER_NO", ca.getUserNo());
            params.put("COMPONENTNAME_LOCAL_ONLY", "dms.inf.EPR010");               
            params.put("POST_SLIP_DATASET", dsXml);
            String jobExecutionId = callBatchJob("EPR010", params, onlineCtx);
            waitBatchJobEnd(jobExecutionId, 10000);
            int result = getJobReturnCode(jobExecutionId);

            if(result == -1) throw new BizRuntimeException("DMS00009"); // 시스템 오류가 발생하였습니다.
            
        } catch ( BizRuntimeException e ) {
            throw e;
        } catch ( Exception e ) {
            throw new BizRuntimeException("DMS00009", e); //시스템 오류
        }
    
        return responseData;
    }

    /**
	 * <pre>단말기대금계좌송금전표취소</pre>
	 *
	 * @author 이민재 (mindol1004)
	 * @since 2015-10-23 10:39:45
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fSaveEqpAmtRmtXclSlipDel(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();
        IDataSet reqDs = (IDataSet) requestData.clone();//원거래의 DataSet의 훼손을 막기 위한 Clone
        CommonArea ca = getCommonArea(onlineCtx);

        try {
            reqDs.putField("USERNO", ca.getUserNo());
            reqDs.putField("SLIP_TYPE", "EP_EQP_PREDC");

            ByteArrayOutputStream bout = new ByteArrayOutputStream(1024);
            DataSetXmlTransformer.dataSetToXml(reqDs, bout, "UTF-8");
            String dsXml = bout.toString("UTF-8");

            // call on-demand batch job
            Map<String ,String> params = new HashMap<String ,String>();
            params.put("TASK_ID", "EPR011");
            params.put("TASK_NM", "전표취소");
            params.put("USER_NO", ca.getUserNo());
            params.put("COMPONENTNAME_LOCAL_ONLY", "dms.inf.EPR011");               
            params.put("POST_SLIP_DATASET", dsXml);
            String jobExecutionId = callBatchJob("EPR011", params, onlineCtx);
            waitBatchJobEnd(jobExecutionId, 10000);
            int result = getJobReturnCode(jobExecutionId);

            if(result == -1) throw new BizRuntimeException("DMS00009"); // 시스템 오류가 발생하였습니다.
            
        } catch ( BizRuntimeException e ) {
            throw e;
        } catch ( Exception e ) {
            throw new BizRuntimeException("DMS00009", e); //시스템 오류
        }
    
        return responseData;
    }

    /**
	 *
	 *
	 * @author 정동현 (jjddhh123)
	 * @since 2015-10-23 09:54:09
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- field : STRD_FR [정산기준시작일자]
	 *	- field : STRD_TO [정산기준종료일자]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fSaveEqpAmtRmtXclDel(IDataSet requestData, IOnlineContext onlineCtx) {
	    IDataSet responseData = new DataSet();
        IDataSet reqDs = (IDataSet) requestData.clone();//원거래의 DataSet의 훼손을 막기 위한 Clone

        try {
            // 1. DU lookup
            DEPEqpAmtRmtXclMgmt dEPEqpAmtRmtXclMgmt = (DEPEqpAmtRmtXclMgmt) lookupDataUnit(DEPEqpAmtRmtXclMgmt.class);
            
            IDataSet dsCnt = dEPEqpAmtRmtXclMgmt.dSEqpAmtRmtXclChk(reqDs, onlineCtx);
            if( dsCnt.getIntField("CNT") > 0){
                throw new BizRuntimeException("DMS00149"); // 재집계가 불가합니다.
            }
            reqDs.putField("XCL_DEL_CHK", true);
            IRecordSet seqRs = dEPEqpAmtRmtXclMgmt.dSEqpAmtRmtXclSeq(reqDs, onlineCtx).getRecordSet("RS_EQP_ACCO_RMT_SEQ");
            IDataSet seqDs = null;
            
            if (seqRs.getRecordCount() > 0) {
                for (int i = 0; i < seqRs.getRecordCount(); i++) {
                    seqDs = new DataSet();
                    seqDs.putFieldMap(seqRs.getRecordMap(i));
                    seqDs.putField("USERNO", requestData.getField("USERNO"));
           // 2. DM호출
                    dEPEqpAmtRmtXclMgmt.dUEqpAmtRmtXclDel(seqDs, onlineCtx);
                    dEPEqpAmtRmtXclMgmt.dUEqpAmtRmtXclDtlDel(seqDs, onlineCtx);
                }
            }
            
        } catch ( BizRuntimeException e ) {
            throw e;
        }
    
        return responseData;
    }
  
}

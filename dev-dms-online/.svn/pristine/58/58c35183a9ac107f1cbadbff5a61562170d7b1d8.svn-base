package dms.nr.nrsxmbase.biz;

import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Map;

import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.data.xml.DataSetXmlTransformer;
import nexcore.framework.core.exception.BizRuntimeException;

import org.apache.commons.logging.Log;

import com.ibm.icu.math.BigDecimal;

import fwk.common.CommonArea;
import fwk.utils.PagenateUtils;
//import fwk.utils.HpcUtils;
//import fwk.utils.PagenateUtils;



/**
 * <ul>
 * <li>업무 그룹명 : dms/신규R</li>
 * <li>단위업무명: [FU]위약금정산정보조회</li>
 * <li>설  명 : <pre>위약금정산정보조회FU</pre></li>
 * <li>작성일 : 2015-07-27 17:38:33</li>
 * <li>작성자 : 김혁범 (kezmain1)</li>
 * </ul>
 *
 * @author 김혁범 (kezmain1)
 */
public class FNRStlMnt extends fwk.base.FunctionUnit {

	/**
	 * 이 클래스는 Singleton 객체로 수행됩니다. 
	 * 여기에 필드를 선언하여 사용하면 동시성 문제를 일으킬 수 있습니다.
	 */

	/**
	 * Default Constructor
	 */
	public FNRStlMnt(){
		super();
	}

	/**
	 * <pre>위약금정산정보조회</pre>
	 *
	 * @author 김혁범 (kezmain1)
	 * @since 2015-07-27 17:38:33
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fCalChrStlMgmtLst(IDataSet requestData, IOnlineContext onlineCtx) {
		IDataSet responseData = new DataSet();
		  IDataSet reqDs = (IDataSet) requestData.clone();//원거래의 DataSet의 훼손을 막기 위한 Clone
		  IRecordSet usrListRs = null;
		  int intTotalCnt = 0;
		  
		  try {
				// 1. DU lookup
			  DNRStlMnt dNRStlMnt = (DNRStlMnt) lookupDataUnit(DNRStlMnt.class);
	  
				// 3. LISTDM호출 위약금정산 개인,법인체크리스트
                responseData = dNRStlMnt.dSCalChrStlPsnlCorpList(reqDs, onlineCtx);
                usrListRs = responseData.getRecordSet("RS_CAL_CHR_STL_PSNL_CORP_LIST");
                PagenateUtils.setPagenatedParamToRecordSet(usrListRs, reqDs, intTotalCnt);

			  //위약금정산정보 현재월 기준 조회
				IDataSet dsRtn = dNRStlMnt.dSCalChrStlSysLst(requestData, onlineCtx);
				responseData.putRecordSet(dsRtn.getRecordSet("RS_CAL_CHR_STL_SYS_LIST"));
				
				// 2. TOTAL COUNT DM호출
			    IDataSet dsCnt = dNRStlMnt.dSCalChrStlTotCnt(requestData, onlineCtx);
				responseData.putRecordSet(dsCnt.getRecordSet("RS_SUM_LIST"));
				
				// 2. TOTAL COUNT DM호출
				IDataSet dsCnt2 = dNRStlMnt.dSCalChrStlSysLstTotCnt(requestData, onlineCtx);
				responseData.putRecordSet(dsCnt2.getRecordSet("RS_SUM_DTL_LIST"));
				
			} catch ( BizRuntimeException e ) {
				throw e; //시스템 오류가 발생하였습니다.
			}
	
	
	    return responseData;
	}

	/**
	 * <pre>위약금정산정보재집계</pre>
	 *
	 * @author 문재웅 (jaiwoong)
	 * @since 2015-07-27 17:38:33
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- field : YDATE [년+월]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fCalChrStlMgmtReBatch(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();
        Log log = getLog(onlineCtx);
        CommonArea ca = getCommonArea(onlineCtx);
    
        try {           
                ByteArrayOutputStream bout = new ByteArrayOutputStream(1024);
                DataSetXmlTransformer.dataSetToXml(requestData, bout, "UTF-8");
                String dsXml = bout.toString("UTF-8");
            
                // call on-demand batch job
                HashMap params = new HashMap<String,String>();
                params.put("TASK_ID", "XCR009");
                params.put("TASK_NM", "위약금정산");
                params.put("LGIN_ID", onlineCtx.getUserInfo().getLoginId());
                params.put("USER_NO", ca.getUserNo());
                params.put("PROC_DT", requestData.getField("YDATE")+"01");
                params.put("COMPONENTNAME_LOCAL_ONLY", "dms.nr.XCR009");                
                params.put("ONDEMAND_DATASET", dsXml);
                
                log.debug("(((((((((((((((((((((((((((((((fCalChrStlMgmtReBatch() params :"+ params);
                
                String jobExecutionId = callBatchJob("XCR009", params, onlineCtx);
                waitBatchJobEnd(jobExecutionId, 10000);
                int result = getJobReturnCode(jobExecutionId);
                
                
                log.debug("(((((((((((((((((((((((((((((((fCalChrStlMgmtReBatch() result :"+ result);
            
                if(result == -1) throw new BizRuntimeException("DMS00009"); // 시스템 오류가 발생하였습니다.
                
        } catch ( BizRuntimeException e ) {
            throw e; //시스템 오류가 발생하였습니다.
        
        } catch (UnsupportedEncodingException ee) {
            throw new BizRuntimeException("DMS00009",ee); //시스템 오류가 발생하였습니다.
        }
    
        return responseData;    
    }

    /**
	 * <pre>위약금정산전표발행</pre>
	 *
	 * @author 문재웅 (jaiwoong)
	 * @since 2015-07-27 17:38:33
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- record : RS_SLIP_LIST
	 *		- field : DEALCO_BLICENS_NO [사업자번호]
	 *		- field : NEW_CNTRTR_NM [법인명]
	 *		- field : SLIP_TYPE [전표타입(위약금)]
	 *		- field : AMT [정산금액]
	 *		- field : GUBUN [구분]
	 *		- field : SELEC [필드6]
	 *		- field : SLIP_NO [전표번호]
	 *		- field : SLIP_ST_CD [전표상태]
	 *		- field : YYYYMM [년월]
	 *		- field : PEN_POLY_CL [위약금구분코드]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fSaveCalChrStlMgmtSlip(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();
        CommonArea ca = getCommonArea(onlineCtx);
        Log log = getLog(onlineCtx);
        
        // 1. DU lookup
        DNRStlMnt dNRStlMnt = (DNRStlMnt) lookupDataUnit(DNRStlMnt.class);
        IRecordSet rs = requestData.getRecordSet("RS_SLIP_LIST");
        
        IDataSet paramDs = new DataSet();
        Map paramMap = null;
        
        int intSum = 0;
        
        for(int i=0; i<rs.getRecordCount(); i++)
        {           
            paramMap = rs.getRecordMap(i);          
            paramDs.initField();
            if( "1".equals(paramMap.get("CHK") )) //체크인항목은 BOND테이블 합계업데이트
            {
                String ukeySum = (String)paramMap.get("AMT");
                paramMap.put("USERNO", ca.getUserNo());
                
                intSum += Integer.parseInt(ukeySum);
                
                paramMap.put("AMT", intSum);
                paramDs.putFieldMap(paramMap);
            } 
        }
        if(intSum > 0)
        {   
            //timeout
            //responseData = dNRStlMnt.dUpdateBondSum(paramDs, onlineCtx);
        }
              
        IDataSet paramData = new DataSet();
        
        try {
            
        	//DNRStlMnt dNRStlMnt = (DNRStlMnt) lookupDataUnit(DNRStlMnt.class);
        	
        		// 1. 입력 RS설정
        		requestData.putField("USERNO", ca.getUserNo());
        		requestData.putField("SLIP_TYPE", "NR_P");

                ByteArrayOutputStream bout = new ByteArrayOutputStream(1024);
                DataSetXmlTransformer.dataSetToXml(requestData, bout, "UTF-8");
                String dsXml = bout.toString("UTF-8");
                
                // call on-demand batch job
                HashMap params = new HashMap<String,String>();
                params.put("TASK_ID", "EPR010");
                params.put("TASK_NM", "전표발행");
                params.put("LGIN_ID", onlineCtx.getUserInfo().getLoginId());
                params.put("USER_NO", ca.getUserNo());
                params.put("COMPONENTNAME_LOCAL_ONLY", "dms.inf.EPR010");               
                params.put("POST_SLIP_DATASET", dsXml);
                
                log.debug("(((((((((((((((((((((((((((((((fSaveCalChrStlMgmtSlip() params :"+ params);
                
                String jobExecutionId = callBatchJob("EPR010", params, onlineCtx);
                waitBatchJobEnd(jobExecutionId, 10000);
                int result = getJobReturnCode(jobExecutionId);
                
                
                log.debug("(((((((((((((((((((((((((((((((fSaveCalChrStlMgmtSlip() result :"+ result);
            
                if(result == -1) throw new BizRuntimeException("DMS00009"); // 시스템 오류가 발
        	//}

        } catch ( BizRuntimeException e ) {
            throw e;
        } catch ( Exception e ) {
            throw new BizRuntimeException("DMS00009", e); //시스템 오류
        }
    
        return responseData;
    }

    /**
	 * <pre>위약금정산전표삭제</pre>
	 *
	 * @author 문재웅 (jaiwoong)
	 * @since 2015-07-27 17:38:33
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- record : RS_SLIP_LIST
	 *		- field : DEALCO_BLICENS_NO [사업자번호]
	 *		- field : NEW_CNTRTR_NM [고객명]
	 *		- field : SLIP_TYPE [전표타입(위약금)]
	 *		- field : AMT [정산금액]
	 *		- field : GUBUN [구분]
	 *		- field : SELEC [필드6]
	 *		- field : SLIP_NO [전표번호]
	 *		- field : SLIP_ST_CD [전표상태]
	 *		- field : YYYYMM [년월]
	 *		- field : YYYY [년]
	 *		- field : PEN_POLY_CL [위약금유형]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fSaveCalChrStlMgmtSlipDel(IDataSet requestData, IOnlineContext onlineCtx) {
        Log log = getLog(onlineCtx);
        IDataSet responseData = new DataSet();
        CommonArea ca = getCommonArea(onlineCtx);
        IRecordSet rs = requestData.getRecordSet("RS_SLIP_LIST");
        boolean isOnline = false;
        
        try{
        	//for(int i=0; i<rs.getRecordCount(); i++){
                ByteArrayOutputStream bout = new ByteArrayOutputStream(1024);
                DataSetXmlTransformer.dataSetToXml(requestData, bout, "UTF-8");
                String dsXml = bout.toString("UTF-8");

                // call on-demand batch job
                HashMap params = new HashMap<String,String>();
                params.put("TASK_ID", "EPR011");
                params.put("TASK_NM", "전표삭제");
                params.put("USER_NO", ca.getUserNo());
                params.put("COMPONENTNAME_LOCAL_ONLY", "dms.inf.EPR011");               
                params.put("POST_SLIP_DATASET", dsXml);
                log.info("(((((((((((((((((((((((((((((((fSaveCalChrStlMgmtSlipDel() params :"+ params);
                String jobExecutionId = callBatchJob("EPR011", params, onlineCtx);
                waitBatchJobEnd(jobExecutionId, 10000);
                int result = getJobReturnCode(jobExecutionId);
                
                
                log.info("(((((((((((((((((((((((((((((((fSaveCalChrStlMgmtSlipDel() result :"+ result);

                if(result == -1) throw new BizRuntimeException("DMS00009"); // 시스템 오류가 발생하였습니다
        	//}
        
        } catch(BizRuntimeException e){
            throw e;
        } catch ( Exception e ) {
            throw new BizRuntimeException("DMS00009", e); // 시스템 오류가 발생하였습니다.
        }
    
        return responseData;
	}

	/**
	 * <pre>위약금정산정보전체다운</pre>
	 *
	 * @author 김혁범 (kezmain1)
	 * @since 2015-07-27 17:38:33
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- field : YDATE [필드1]
	 *	- field : PEN_POLY_CL [필드1]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fCalChrStlAllExcel(IDataSet requestData, IOnlineContext onlineCtx) {
	    IDataSet responseData = new DataSet();
	    
        // 1. DU lookup
	    DNRStlMnt dNRStlMnt = (DNRStlMnt) lookupDataUnit(DNRStlMnt.class);

        // 2. LISTDM호출
        responseData = dNRStlMnt.dScalChrStlAllExcel(requestData, onlineCtx);

        return responseData;
	
	}

	/**
	 * <pre>위약금정산정보전표재조회</pre>
	 *
	 * @author 김혁범 (kezmain1)
	 * @since 2015-07-27 17:38:33
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- field : YDATE [필드1]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fCalChrStlMgmtSlipStSearch(IDataSet requestData, IOnlineContext onlineCtx) {
	    IDataSet responseData = new DataSet();
	    CommonArea ca = getCommonArea(onlineCtx);
	    
	    try {	    	
    		
		    ByteArrayOutputStream bout = new ByteArrayOutputStream(1024);
			DataSetXmlTransformer.dataSetToXml(requestData, bout, "UTF-8");
			String dsXml = bout.toString("UTF-8");
		
			// call on-demand batch job
			HashMap params = new HashMap<String,String>();
			params.put("TASK_ID", "EPR001");
		    params.put("TASK_NM", "전표상태재조회");
		    params.put("LGIN_ID", onlineCtx.getUserInfo().getLoginId());
		    params.put("USER_NO", ca.getUserNo());
		    params.put("PROC_DT", requestData.getField("YDATE")+"01");
		    params.put("SYNC_TYPE", "XD");
		    params.put("COMPONENTNAME_LOCAL_ONLY", "dms.nr.EPR001");				
			params.put("ONDEMAND_DATASET", dsXml);
			
			String jobExecutionId = callBatchJob("EPR001", params, onlineCtx);
		    waitBatchJobEnd(jobExecutionId, 10000);
		    int result = getJobReturnCode(jobExecutionId);
		    
		
		    if(result == -1) throw new BizRuntimeException("DMS00009"); // 시스템 오류가 발생하였습니다.
		    
	    } catch ( BizRuntimeException e ) {
	    	throw e; //시스템 오류가 발생하였습니다.
		
	    } catch (UnsupportedEncodingException ee) {
	    	throw new BizRuntimeException("DMS00009",ee); //시스템 오류가 발생하였습니다.
	    }
	
	    return responseData;
	}

	/**
	 * <pre>위약금정산체크항목삭제</pre>
	 *
	 * @author 김혁범 (kezmain1)
	 * @since 2015-07-27 17:38:33
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fDelCalChrStlMgmt(IDataSet requestData, IOnlineContext onlineCtx) {
	    IDataSet responseData = new DataSet();
	    // 1. DU lookup
	    DNRStlMnt dNRStlMnt = (DNRStlMnt) lookupDataUnit(DNRStlMnt.class);
	   
	    IRecordSet rs = requestData.getRecordSet("RS_DEL_LIST");
	    
	    IDataSet paramDs = new DataSet();
	    Map paramMap = null;
	    
	    int intSum = 0;
	    for(int i=0; i<rs.getRecordCount(); i++)
	    {			
			paramMap = rs.getRecordMap(i);			
			paramDs.initField();
			if( !"1".equals(paramMap.get("CHK") )) //체크해제인애들은 총합저장
			{
				String ukeySum = (String)paramMap.get("UKEY_PEN_AMT");
				
				intSum += Integer.parseInt(ukeySum);
				
				paramMap.put("UKEY_PEN_AMT", intSum);
				paramDs.putFieldMap(paramMap);
				
			} else if("1".equals(paramMap.get("CHK")) ) //체크한애들은 기타정산테이블 공제여부 'Y'
			{
			    
				paramDs.putFieldMap(paramMap);
				responseData = dNRStlMnt.dUpdateYCalChrStlMgmt(paramDs, onlineCtx); 
			}
	    }
	    
	    if(intSum > 0){
	       	
	    	responseData = dNRStlMnt.dUpdateCalChrStlMgmt(paramDs, onlineCtx);
	    }
	   
	    return responseData;
	}
  
}

package dms.pr.prbimbase.biz;

import java.util.Map;

import fwk.common.CommonArea;
import fwk.constants.DmsConstants;
import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecord;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.data.IResultMessage;
import nexcore.framework.core.data.ResultMessage;
import nexcore.framework.core.exception.BizRuntimeException;
import nexcore.framework.core.util.StringUtils;


/**
 * <ul>
 * <li>업무 그룹명 : dms/임대R</li>
 * <li>단위업무명: [PU]회수대상임대폰조회</li>
 * <li>설  명 : <pre>회수대상임대폰조회</pre></li>
 * <li>작성일 : 2015-07-14 20:45:43</li>
 * <li>작성자 : 이준우 (elmsliw)</li>
 * </ul>
 *
 * @author 이준우 (elmsliw)
 */
public class PPRReqpClctInRgst extends fwk.base.ProcessUnit {

	/**
	 * 이 클래스는 Singleton 객체로 수행됩니다. 
	 * 여기에 필드를 선언하여 사용하면 동시성 문제를 일으킬 수 있습니다.
	 */

	/**
	 * Default Constructor
	 */
	public PPRReqpClctInRgst(){
		super();
	}

	/**
	 * <pre>회수대상임대폰조회</pre>
	 *
	 * @author 이준우 (elmsliw)
	 * @since 2015-07-14 20:45:43
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- field : ST_DT [시작일]
	 *	- field : ED_DT [종료일]
	 *	- field : EQP_MDL_CD [모델]
	 *	- field : INVE_ST_CD [재고상태]
	 *	- field : EQP_SER_NUM [시리얼넘버]
	 *	- field : ST_DT_IN [입고일자(입고TB)]
	 *	- field : ED_DT_IN [입고일자(입고TB)]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 * <pre>
	 *	- record : RS_EQP_LIST
	 *		- field : EQP_IN_NO [입고넘버]
	 *		- field : IN_SCHD_DT [입고예정일자]
	 *		- field : ASSET_NO [자산번호]
	 *		- field : EQP_MDL_CD [단말기모델코드]
	 *		- field : EQP_COLOR_CD [단말기색상코드]
	 *		- field : EQP_SER_NUM [단말기일련번호]
	 *		- field : EQP_IMEI_NUM [단말기IMEI번호]
	 *		- field : INVE_ST_CD [회수구분코드]
	 *		- field : EQP_IN_CLCT_NO [단말기입고대상번호]
	 *		- field : IN_DT [입고일자(입고TB)]
	 *		- field : EQP_MDL_NM [단말기모델명]
	 *		- field : LAST_IN_OUT_NO [최종입출고번호]
	 * </pre>
	 */
	public IDataSet pInqReqpClctLst(IDataSet requestData, IOnlineContext onlineCtx) {
	    IDataSet responseData = new DataSet();
	
		try {
			// 1. FU lookup
			//FPRReqpClctInRgst fPRReqpClctInRgst = (FPRReqpClctInRgst) lookupFunctionUnit(FPRReqpClctInRgst.class);
			// 2. FM 호출
			responseData = callSharedBizComponentByDirect("pr.PRSIMBase", "fInqReqpClctLst", requestData, onlineCtx);
		} catch ( BizRuntimeException e ) {
			throw e;
		} catch ( Exception e ) {
			throw new BizRuntimeException("DMS00009", e); // 시스템 오류가 발생하였습니다.
		}		
	    return responseData;
	}

	/**
	 * <pre>임대폰회수입고상태저장</pre>
	 *
	 * @author 이준우 (elmsliw)
	 * @since 2015-07-14 20:45:43
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- record : RS_CLCT_LIST
	 *		- field : IN_DT [입고일자]
	 *		- field : EQP_IN_CLCT_NO [단말기입고대상번호]
	 *		- field : EQP_MDL_CD [단말기모델코드]
	 *		- field : EQP_SER_NUM [단말기일련번호]
	 *		- field : INVE_ST_CD [입고상세코드]
	 *		- field : EQP_IN_NO [단말기입고번호(입고)]
	 *		- field : ASSET_NO [자산번호]
	 *		- field : DEL_YN [삭제여부]
	 *		- field : LAST_IN_OUT_NO [최종입출고번호(자산)]
	 *		- field : LS_CHG_USER_ID [최종수정자ID]
	 *		- field : LS_CHG_DTM [최종수정일시]
	 *	- record : RS_EQP_IN_LIST
	 *		- field : EQP_IN_NO [단말기입고번호]
	 *		- field : ASSET_NO [자산번호]
	 *		- field : EQP_MDL_CD [단말기모델코드]
	 *		- field : EQP_SER_NUM [단말기일련번호]
	 *		- field : IN_DT [입고일자]
	 *		- field : IN_DTL_CD [입고상세코드]
	 *		- field : IN_PLC_CD [입고처코드]
	 *		- field : CHRG_DEPT_CD [담당부서코드]
	 *		- field : DEL_YN [삭제여부]
	 *		- field : LAST_IN_OUT_NO [최종입출고번호(자산)]
	 *		- field : FS_REG_USER_ID [최초등록사용자ID]
	 *		- field : FS_REG_DTM [최초등록일시]
	 *		- field : LS_CHG_USER_ID [최종변경사용자ID]
	 *		- field : LS_CHG_DTM [최종변경일시]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet pSaveReqpClctIn(IDataSet requestData, IOnlineContext onlineCtx) {
	    IDataSet responseData = new DataSet();
	   // IDataSet responseSeqData = new DataSet();
	    CommonArea ca = getCommonArea(onlineCtx);
	    

	    
		try {
			// 1. FU lookup
			//FPREqpReqpInMgmt fPREqpReqpInMgmt = (FPREqpReqpInMgmt) lookupFunctionUnit(FPREqpReqpInMgmt.class);
			
			// 2. 입력 RS설정
		    IRecordSet rs = requestData.getRecordSet("RS_EQP_IN_LIST");	//입고정보
		    IRecordSet rs1 = requestData.getRecordSet("RS_CLCT_LIST"); //회수정보, 자산
		    
			//requestData.putFieldMap(requestData.getRecordSet("RS_CLCT_LIST").getRecordMap(0));
			//requestData.putField("LS_CHG_DTM", ca.get);
			//requestData.putField("LS_CHG_USER_ID", ca.getUserNo());
			
			// 3. 레코드셋 상태에 따른 분기
			for (int i=0; i<rs.getRecordCount(); i++) {
				requestData.putFieldMap(rs.getRecordMap(i));
				requestData.putFieldMap(rs1.getRecordMap(i));
				
				// 3. 최종변경사용자ID
				requestData.putField("FS_REG_USER_ID", ca.getUserNo());
				requestData.putField("LS_CHG_USER_ID", ca.getUserNo());

				IRecord record = rs.getRecord(i); //입고
				IRecord record1 = rs1.getRecord(i);//회수정보, 자산
				
				//입고Ds
				//if ( "I".equals(ca.getTrnPtrnDvcd()) ) { // INSERT
				if ( StringUtils.equals(DmsConstants.STATUS_INSERTED, record.get(DmsConstants.RECORD_STATUS)) ){
					responseData = callSharedBizComponentByDirect("pr.PRSIMBase", "fRegReqpClctIn", requestData, onlineCtx);
				} else if ( StringUtils.equals(DmsConstants.STATUS_UPDATED, record.get(DmsConstants.RECORD_STATUS)) ){
					responseData = callSharedBizComponentByDirect("pr.PRSIMBase", "fUpdReqpClctIn", requestData, onlineCtx);
				} 
				
				//자산, 회수Ds
				//if ( "I".equals(ca.getTrnPtrnDvcd()) ) { // INSERT
				if ( StringUtils.equals(DmsConstants.STATUS_INSERTED, record1.get(DmsConstants.RECORD_STATUS)) ){
					callSharedBizComponentByDirect("pr.PRSIMBase", "fRegReqpClctIn", requestData, onlineCtx);
				//} else if ( "U".equals(ca.getTrnPtrnDvcd()) ) { // UPDATE
				} else if ( StringUtils.equals(DmsConstants.STATUS_UPDATED, record1.get(DmsConstants.RECORD_STATUS)) ){	
					callSharedBizComponentByDirect("pr.PRSIMBase", "fUpdReqpClctIn", requestData, onlineCtx);//<<<
				} 
			}			
		} catch ( BizRuntimeException e ) {
			throw e;
		} catch ( Exception e ) {
			throw new BizRuntimeException("DMS00009", e); // 시스템 오류가 발생하였습니다.
		}
		// 4. 결과값 리턴
		responseData.setOkResultMessage("DMS00000", null); //정상 처리되었습니다.
		
	    return responseData;
	}

}

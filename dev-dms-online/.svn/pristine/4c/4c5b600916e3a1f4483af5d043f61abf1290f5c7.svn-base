package dms.ep.epsbibase.biz;

import java.util.Map;

import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecord;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.data.RecordSet;
import nexcore.framework.core.data.IResultMessage;
import nexcore.framework.core.data.ResultMessage;
import nexcore.framework.core.exception.BizRuntimeException;


/**
 * <ul>
 * <li>업무 그룹명 : dms/에코폰</li>
 * <li>단위업무명: [FU]바코드매입정보관리</li>
 * <li>설  명 : <pre>[FU]바코드매입정보관리</pre></li>
 * <li>작성일 : 2015-08-26 19:11:33</li>
 * <li>작성자 : 양재석 (jsyang)</li>
 * </ul>
 *
 * @author 양재석 (jsyang)
 */
public class FEPBarCodePrchsInfoMgmt extends fwk.base.FunctionUnit {

	/**
	 * 이 클래스는 Singleton 객체로 수행됩니다. 
	 * 여기에 필드를 선언하여 사용하면 동시성 문제를 일으킬 수 있습니다.
	 */

	/**
	 * Default Constructor
	 */
	public FEPBarCodePrchsInfoMgmt(){
		super();
	}

    /**
	 * <pre>[FM]바코드매입정보조회</pre>
	 *
	 * @author 양재석 (jsyang)
	 * @since 2015-08-26 19:11:33
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- field : CNSL_MGMT_NO [상담관리번호]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 * <pre>
	 *	- record : BARCODE_LIST
	 *		- field : AGN_ORG_CD [대리점 조직 코드]
	 *		- field : AFFIL_AGN_NM [대리점명]
	 *		- field : CNSL_DEALCO_CD [상담처코드]
	 *		- field : CNSL_DEALCO_NM [상담처명]
	 *		- field : DEALCO_NM [거래처명]
	 *		- field : UKEY_SUB_CD [UKEY 서브 코드]
	 *		- field : DEALCO_ADDR [거래처주소]
	 *		- field : EQP_MDL_CD [모델코드]
	 *		- field : EQP_MDL_NM [모델명]
	 *		- field : EQP_COLOR_CD [단말기색상코드]
	 *		- field : CNSL_MGMT_SER_NO [일련번호]
	 *		- field : IMEI [IMEI]
	 *		- field : EQP_ST [단말기상태]
	 *		- field : EQP_ST_DTAIL [단말기상태세부]
	 *		- field : PRCH_AMT [매입금액]
	 *		- field : DPSTR [예금주]
	 *		- field : BANK_CD [은행코드]
	 *		- field : ACCO_NO [계좌번호]
	 *		- field : SVC_NO [서비스번호]
	 *		- field : SVC_MGMT_NO [서비스관리번호]
	 *		- field : CNSL_MGMT_NO [상담관리번호]
	 *		- field : CNSL_DT [상담일자]
	 *		- field : ONING_DT [개통일자]
	 *		- field : COMC [통긴방식]
	 *		- field : PROD_CHRTIC_1 [상품특성1]
	 *		- field : TEL_NO [전화번호]
	 *		- field : FEE_DEDC_YN [요금공제처리여부]
	 *		- field : PRCH_MGMT_NO [매입관리번호]
	 *	- record : BARCODE_DTL_LIST
	 *		- field : HLD_QTY [보유수량]
	 *		- field : PRCH_MGMT_NO [매입관리번호]
	 *	- record : BARCODE_RD_LIST
	 *		- field : CNSL_MGMT_SER_NO [일련번호]
	 *		- field : CNSL_DT [상담일자]
	 *		- field : SKN_EQP_ST [SKN단말기상태]
	 *		- field : SKN_CL [SKN구분]
	 *		- field : CNSL_MGMT_NO [상담관리번호]
	 *		- field : EQP_MDL_NM [모델명]
	 * </pre>
	 */
	public IDataSet fInqBarCodePrchsInfoList(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();
        IDataSet responseDataTemp = new DataSet();
        IRecordSet rsTemp;

        try {
            // 1. DU lookup
            DEPBarCodePrchsInfoMgmt dEPBarCodePrchsInfoMgmt = (DEPBarCodePrchsInfoMgmt) lookupDataUnit(DEPBarCodePrchsInfoMgmt.class);
            // 2. LISTDM호출
            responseDataTemp = dEPBarCodePrchsInfoMgmt.dSInqBarCodePrchsInfoList(requestData, onlineCtx);
            if(responseDataTemp != null && responseDataTemp.getRecordSetCount() > 0 
                && responseDataTemp.getRecordSet("BARCODE_LIST") != null
                && responseDataTemp.getRecordSet("BARCODE_LIST").getRecordCount() > 0
                && responseDataTemp.getRecordSet("BARCODE_LIST").get(0, "PRCH_MGMT_NO") != null){
                responseData.putRecordSet(responseDataTemp.getRecordSet("BARCODE_LIST"));

                requestData.putField("PRCH_MGMT_NO", responseDataTemp.getRecordSet("BARCODE_LIST").get(0, "PRCH_MGMT_NO"));
                // 3. DTLDM호출
                responseDataTemp = dEPBarCodePrchsInfoMgmt.dSInqBarCodePrchsDtlList(requestData, onlineCtx);
                if(responseDataTemp != null && responseDataTemp.getRecordSetCount() > 0 
                    && responseDataTemp.getRecordSet("BARCODE_DTL_LIST") != null
                    && responseDataTemp.getRecordSet("BARCODE_DTL_LIST").getRecordCount() > 0){
                    responseData.putRecordSet(responseDataTemp.getRecordSet("BARCODE_DTL_LIST"));
                }
                else{
                    rsTemp = new RecordSet("BARCODE_DTL_LIST");
                    responseData.putRecordSet("BARCODE_DTL_LIST",rsTemp);
                }
                // 4. RDDM호출
                responseDataTemp = dEPBarCodePrchsInfoMgmt.dSInqBarCodePrchsRDData(requestData, onlineCtx);
                if(responseDataTemp != null && responseDataTemp.getRecordSetCount() > 0 
                    && responseDataTemp.getRecordSet("BARCODE_RD_LIST") != null
                    && responseDataTemp.getRecordSet("BARCODE_RD_LIST").getRecordCount() > 0){
                    responseData.putRecordSet(responseDataTemp.getRecordSet("BARCODE_RD_LIST"));
                }
                else{
                    rsTemp = new RecordSet("BARCODE_RD_LIST");
                    responseData.putRecordSet("BARCODE_RD_LIST",rsTemp);
                }
            }
            else{
                rsTemp = new RecordSet("BARCODE_LIST");
                responseData.putRecordSet("BARCODE_LIST",rsTemp);
            }
            
        } catch ( BizRuntimeException e ) {
            throw e;
        }
    
        return responseData;
    }
  
}

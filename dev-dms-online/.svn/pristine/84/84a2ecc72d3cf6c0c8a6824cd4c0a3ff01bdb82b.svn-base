package dms.nr.nrsxmbase.biz;

import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;

import org.apache.commons.logging.Log;

import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.data.xml.DataSetXmlTransformer;
import nexcore.framework.core.exception.BizRuntimeException;
import fwk.common.CommonArea;
import fwk.utils.PagenateUtils;


/**
 * <ul>
 * <li>업무 그룹명 : dms/신규R</li>
 * <li>단위업무명: [FU]대리점판매수수료정산관리</li>
 * <li>설  명 : <pre>대리점판매수수료정산관리</pre></li>
 * <li>작성일 : 2015-08-05 10:38:52</li>
 * <li>작성자 : 정동현 (jjddhh123)</li>
 * </ul>
 *
 * @author 정동현 (jjddhh123)
 */
public class FNRAgnSellComMgmt extends fwk.base.FunctionUnit {

	/**
	 * 이 클래스는 Singleton 객체로 수행됩니다. 
	 * 여기에 필드를 선언하여 사용하면 동시성 문제를 일으킬 수 있습니다.
	 */

	/**
	 * Default Constructor
	 */
	public FNRAgnSellComMgmt(){
		super();
	}

	/**
	 * <pre>대리점판매수수료정산정보조회</pre>
	 *
	 * @author 정동현 (jjddhh123)
	 * @since 2015-08-05 10:38:52
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- field : XCL_YM [정산년월]
	 *	- field : AGN_ORG_CD [대리점코드]
	 *	- field : ORG_NM [대리점명]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 * <pre>
	 *	- record : RS_SLIP_LIST
	 *		- field : DEBT_DEALCO_CD [대리점코드]
	 *		- field : ORG_NM [대리점명]
	 *		- field : DEBT_ITM_AMT [수수료]
	 *		- field : DEBT_XCL_YM [판매정산년월]
	 *		- field : DEALCO_BLICENS_NO [사업자번호]
	 *		- field : SLIP_NO [전표번호]
	 *		- field : SLIP_ST_CD [전표상태]
	 * </pre>
	 */
	public IDataSet fInqAgnSellComLst(IDataSet requestData, IOnlineContext onlineCtx) {
		IDataSet responseData = new DataSet();
		IDataSet dsCnt = new DataSet();
		IDataSet reqDs = (IDataSet) requestData.clone();//원거래의 DataSet의 훼손을 막기 위한 Clone
		IRecordSet agnSellComLstRs = null;
		IRecordSet rsList = null;
		int intTotalCnt = 0;
		  
		try {
			// 1. DU lookup
			DNRAgnSellComMgmt dNRAgnSellComMgmt = (DNRAgnSellComMgmt) lookupDataUnit(DNRAgnSellComMgmt.class);
				
			// 2. TOTAL COUNT DM호출
			dsCnt = dNRAgnSellComMgmt.dSAgnSellComLstTotCnt(requestData, onlineCtx);
			intTotalCnt = Integer.parseInt(dsCnt.getField("TOTAL_CNT"));
			PagenateUtils.setPagenatedParamsToDataSet(requestData);
			
			// 3. LISTDM호출
			responseData = dNRAgnSellComMgmt.dSAgnSellComLstPaging(requestData, onlineCtx);
			agnSellComLstRs = responseData.getRecordSet("RS_SLIP_LIST");
			PagenateUtils.setPagenatedParamToRecordSet(agnSellComLstRs, requestData, intTotalCnt);
			
			// 3. LISTDM호출
			responseData = dNRAgnSellComMgmt.dSAgnSellComTotCnt(requestData, onlineCtx);
			rsList = responseData.getRecordSet("RS_SUM_LIST");
			PagenateUtils.setPagenatedParamToRecordSet(agnSellComLstRs, requestData, intTotalCnt);
			
			responseData.putRecordSet("RS_SLIP_LIST", agnSellComLstRs);
		    responseData.putRecordSet("RS_SUM_LIST", rsList); //대리점판매총금액
			
		} catch ( BizRuntimeException e ) {
			throw e; //시스템 오류가 발생하였습니다.
		}
	
	    return responseData;
	}

	/**
	 * <pre>대리점판매수수료정산상세 조회</pre>
	 *
	 * @author 정동현 (jjddhh123)
	 * @since 2015-08-05 10:38:52
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * <pre>
	 *	- field : XCL_YM [정산년월]
	 *	- field : AGN_CD [대리점코드]
	 * </pre>
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 * <pre>
	 *	- record : RS_AGN_SELL_COM_DTL
	 *		- field : SVC_MGMT_NO [서비스관리번호]
	 *		- field : DEALCO_NM [거래처명]
	 *		- field : XCL_AMT [수수료]
	 *		- field : XCL_DT [정산년월]
	 *		- field : NEW_CNTRT_DT [계약일]
	 * </pre>
	 */
	public IDataSet fInqAgnSellComDtl(IDataSet requestData, IOnlineContext onlineCtx) {
		IDataSet responseData = new DataSet();
		IDataSet dsCnt = new DataSet();
		IDataSet reqDs = (IDataSet) requestData.clone();//원거래의 DataSet의 훼손을 막기 위한 Clone
		IRecordSet agnSellComLstRs = null;
		int intTotalCnt = 0;
		  
		try {
			// 1. DU lookup
			DNRAgnSellComMgmt dNRAgnSellComMgmt = (DNRAgnSellComMgmt) lookupDataUnit(DNRAgnSellComMgmt.class);

			// 2. LISTDM호출
			responseData = dNRAgnSellComMgmt.dSAgnSellComDtl(reqDs, onlineCtx);
			agnSellComLstRs = responseData.getRecordSet("RS_AGN_SELL_COM_DTL");
			
		} catch ( BizRuntimeException e ) {
			throw e; //시스템 오류가 발생하였습니다.
		}
	
	    return responseData;
	}

    /**
	 *
	 *
	 * @author 안진갑 (bella21cjk)
	 * @since 2015-08-05 10:38:52
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fSaveAgnSellReBatch(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();
        Log log = getLog(onlineCtx);
        CommonArea ca = getCommonArea(onlineCtx);
    
        try {           
                // 1. DU lookup
                DNRAgnSellComMgmt dNRAgnSellComMgmt = (DNRAgnSellComMgmt) lookupDataUnit(DNRAgnSellComMgmt.class);
            
                // 2. LISTDM호출
                IDataSet dsRtn = dNRAgnSellComMgmt.dSCntForValid(requestData, onlineCtx);
            
                if(dsRtn.getIntField("CNT") > 0 && dsRtn.getIntField("CNT_DIFF") == 0){
                    /* TODO : 에러코드입력 필요함({유효기간}에  주복 데이터가 있습니다). 현재는 중복데이타가 있습니다로 사용.*/
                    throw new BizRuntimeException("DMS00117"); //재집계가 불가합니다.
                }
            
            
                log.debug("(((((((((((((((((((((((((((((((fInqSaleReBatch() fInqSaleReBatch requestData:"+ requestData);
        
                ByteArrayOutputStream bout = new ByteArrayOutputStream(1024);
                DataSetXmlTransformer.dataSetToXml(requestData, bout, "UTF-8");
                String dsXml = bout.toString("UTF-8");
            
                // call on-demand batch job
                HashMap params = new HashMap<String,String>();
                params.put("TASK_ID", "XCR005");
                params.put("TASK_NM", "대리점판매수수료등록");
                params.put("LGIN_ID", onlineCtx.getUserInfo().getLoginId());
                params.put("USER_NO", ca.getUserNo());
                params.put("PROC_DT", requestData.getField("XCL_YM")+"01");
                params.put("COMPONENTNAME_LOCAL_ONLY", "dms.nr.XCR005");                
                params.put("ONDEMAND_DATASET", dsXml);
                
                log.debug("(((((((((((((((((((((((((((((((fInqSaleReBatch() params :"+ params);
                
                String jobExecutionId = callBatchJob("XCR005", params, onlineCtx);
                waitBatchJobEnd(jobExecutionId, 10000);
                int result = getJobReturnCode(jobExecutionId);
                
                
                log.debug("(((((((((((((((((((((((((((((((fInqSaleReBatch() result :"+ result);
            
                if(result == -1) throw new BizRuntimeException("DMS00009"); // 시스템 오류가 발생하였습니다.
                
        } catch ( BizRuntimeException e ) {
            throw e; //시스템 오류가 발생하였습니다.
        
        } catch (UnsupportedEncodingException ee) {
            throw new BizRuntimeException("DMS00009",ee); //시스템 오류가 발생하였습니다.
        }
    
        return responseData;
    }

    /**
	 *
	 *
	 * @author 안진갑 (bella21cjk)
	 * @since 2015-08-05 10:38:52
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fSaveAgnSellSlip(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();
    
        // 처리 결과값을 responseData에 넣어서 리턴하십시요 
        CommonArea ca = getCommonArea(onlineCtx);
        Log log = getLog(onlineCtx);
        boolean isOnline = false;

        try {
            // 1. 입력 RS설정
            requestData.putField("USERNO", ca.getUserNo());
            requestData.putField("SLIP_TYPE", "SALES_COMMISSION");
            
            if(isOnline)
            {
                /*
                // 2. 레코드셋 상태에 따른 분기
                if ( "I".equals(ca.getTrnPtrnDvcd()) ) { // 전표생성
                    responseData = callSharedBizComponentByDirect("nr.NRSXMBase", "fRegSlip", requestData, onlineCtx);
                } else if ( "U".equals(ca.getTrnPtrnDvcd()) ) { // 전표취소
                    
                }
                
                responseData.putField("USERNO", ca.getUserNo());
                callSharedBizComponentByDirect("nr.NRSXMBase", "fRegAgnEqpStlSlip", responseData, onlineCtx);
                    
                // 3. 결과값 리턴
                responseData.setOkResultMessage("DMS00000", null);  //정상 처리되었습니다.
                */
            }
            else
            {
                log.debug("((((((((((((((((((((((((((((((((fSaveSaleAsmptSlip() fSaveSaleAsmptSlip requestData:"+ requestData);
                 
                
                ByteArrayOutputStream bout = new ByteArrayOutputStream(1024);
                DataSetXmlTransformer.dataSetToXml(requestData, bout, "UTF-8");
                String dsXml = bout.toString("UTF-8");
            //
                // call on-demand batch job
                HashMap params = new HashMap<String,String>();
                params.put("TASK_ID", "EPR010");
                params.put("TASK_NM", "전표발행");
                params.put("LGIN_ID", onlineCtx.getUserInfo().getLoginId());
                params.put("USER_NO", ca.getUserNo());
                params.put("COMPONENTNAME_LOCAL_ONLY", "dms.inf.EPR010");               
                params.put("POST_SLIP_DATASET", dsXml);
                
                log.debug("(((((((((((((((((((((((((((((((fSaveSaleAsmptSlip() params :"+ params);
                
                String jobExecutionId = callBatchJob("EPR010", params, onlineCtx);
                waitBatchJobEnd(jobExecutionId, 10000);
                int result = getJobReturnCode(jobExecutionId);
                
                
                log.debug("(((((((((((((((((((((((((((((((fSaveSaleAsmptSlip() result :"+ result);
            
                if(result == -1) throw new BizRuntimeException("DMS00009"); // 시스템 오류가 발

            }
        } catch ( BizRuntimeException e ) {
            throw e;
        } catch ( Exception e ) {
            throw new BizRuntimeException("DMS00009", e); //시스템 오류
        }
        
        return responseData;
    }

    /**
	 *
	 *
	 * @author 안진갑 (bella21cjk)
	 * @since 2015-09-23 17:04:38
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fSaveAgnSellSlipDel(IDataSet requestData, IOnlineContext onlineCtx) {
	     Log log = getLog(onlineCtx);
        IDataSet responseData = new DataSet();
        CommonArea ca = getCommonArea(onlineCtx);
        boolean isOnline = false;
        
        try{
            
            if(isOnline)
            {
                /*
                // 1. FM 호출 --전표번호를 삭제하고,삭제전표번호를 받는다
                //requestData = callSharedBizComponentByDirect("nr.NRSXMBase", "fRemoveSlip", requestData, onlineCtx);
                FNRErpIF fNRErpIf = (FNRErpIF) lookupFunctionUnit(FNRErpIF.class);
                responseData = fNRErpIf.fRemoveSlip(requestData, onlineCtx);
                responseData.putField("USER_NO", ca.getUserNo());
                
                // 2. DU lookup -- 전표취소처리
                 DNRAgnEqpStlMgmt dNRAgnEqpStlMgmt = (DNRAgnEqpStlMgmt) lookupDataUnit(DNRAgnEqpStlMgmt.class);
                 responseData = dNRAgnEqpStlMgmt.dUAgnEqpStlSlipDel(responseData, onlineCtx);
                */
            }
            else
            {
                ByteArrayOutputStream bout = new ByteArrayOutputStream(1024);
                DataSetXmlTransformer.dataSetToXml(requestData, bout, "UTF-8");
                String dsXml = bout.toString("UTF-8");

                // call on-demand batch job
                HashMap params = new HashMap<String,String>();
                params.put("TASK_ID", "EPR011");
                params.put("TASK_NM", "전표삭제");
                params.put("USER_NO", ca.getUserNo());
                params.put("COMPONENTNAME_LOCAL_ONLY", "dms.inf.EPR011");               
                params.put("POST_SLIP_DATASET", dsXml);
                log.info("(((((((((((((((((((((((((((((((fSaveAgnEqpStlSlipDel() params :"+ params);
                String jobExecutionId = callBatchJob("EPR011", params, onlineCtx);
                waitBatchJobEnd(jobExecutionId, 10000);
                int result = getJobReturnCode(jobExecutionId);
                
                
                log.info("(((((((((((((((((((((((((((((((fSaveAgnEqpStlSlipDel() result :"+ result);

                if(result == -1) throw new BizRuntimeException("DMS00009"); // 시스템 오류가 발생하였습니다
            }
	        
        } catch(BizRuntimeException e){
            throw e;
        } catch ( Exception e ) {
            throw new BizRuntimeException("DMS00009", e); // 시스템 오류가 발생하였습니다.
        }
	        
        return responseData;
    }

    /**
	 *
	 *
	 * @author 안진갑 (bella21cjk)
	 * @since 2015-08-05 10:38:52
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fInqAgnSellAllExcel(IDataSet requestData, IOnlineContext onlineCtx) {
        IDataSet responseData = new DataSet();
    
        // 처리 결과값을 responseData에 넣어서 리턴하십시요 
        // 1. DU lookup
        DNRAgnSellComMgmt dNRAgnSellComMgmt = (DNRAgnSellComMgmt) lookupDataUnit(DNRAgnSellComMgmt.class);

        // 2. LISTDM호출
        responseData = dNRAgnSellComMgmt.dSAgnSellAllExcel(requestData, onlineCtx);

        return responseData;
    }
  
}

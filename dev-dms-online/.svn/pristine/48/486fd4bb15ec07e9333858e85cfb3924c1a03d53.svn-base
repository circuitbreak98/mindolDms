package dms.nr.nrsisbase.biz;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;

import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.data.xml.DataSetXmlTransformer;
import nexcore.framework.core.exception.BizRuntimeException;

import org.apache.commons.logging.Log;

import fwk.common.CommonArea;
import fwk.utils.PagenateUtils;


/**
 * <ul>
 * <li>업무 그룹명 : dms/신규R</li>
 * <li>단위업무명: [FU]보증보험금 지급관리</li>
 * <li>설  명 : </li>
 * <li>작성일 : 2015-10-14 10:19:25</li>
 * <li>작성자 : 김혁범 (kezmain1)</li>
 * </ul>
 *
 * @author 김혁범 (kezmain1)
 */
public class FNRInsuMxclMgmt extends fwk.base.FunctionUnit {

	/**
	 * 이 클래스는 Singleton 객체로 수행됩니다. 
	 * 여기에 필드를 선언하여 사용하면 동시성 문제를 일으킬 수 있습니다.
	 */

	/**
	 * Default Constructor
	 */
	public FNRInsuMxclMgmt(){
		super();
	}

	/**
	 *
	 *
	 * @author 김혁범 (kezmain1)
	 * @since 2015-10-14 10:19:25
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fInqInsuMxclLst(IDataSet requestData, IOnlineContext onlineCtx) {
		IDataSet responseData = new DataSet();
	    IDataSet dsCnt = new DataSet();
	    IRecordSet usrListRs =  null;
	    IRecordSet usrListRs2 =  null;
	    IRecordSet rsList = null;
	    int intTotalCnt = 0;
	    
	    try {
		    // 1. DU lookup
	    	DNRInsuMxclMgmt dNRInsuMxclMgmt = (DNRInsuMxclMgmt) lookupDataUnit(DNRInsuMxclMgmt.class);
	    	
	    	
		    // 2. TOTAL COUNT DM호출            
			dsCnt = dNRInsuMxclMgmt.dSInsuMxclTotCnt(requestData, onlineCtx);
	        intTotalCnt = Integer.parseInt(dsCnt.getField("TOTAL_CNT"));
	        PagenateUtils.setPagenatedParamsToDataSet(requestData);
	       			
			// 3. LISTDM호출
			responseData = dNRInsuMxclMgmt.dSInsuMxclSlipLstPaging(requestData, onlineCtx);
			usrListRs = responseData.getRecordSet("RS_SLIP_LIST");
			PagenateUtils.setPagenatedParamToRecordSet(usrListRs, requestData, intTotalCnt);
			
			// 3. LISTDM호출
			responseData = dNRInsuMxclMgmt.dSInsuMxclLstPaging(requestData, onlineCtx);
			usrListRs2 = responseData.getRecordSet("RS_INSUM_XCL_LIST");
			PagenateUtils.setPagenatedParamToRecordSet(usrListRs2, requestData, intTotalCnt);
			
			// 2. TOTAL COUNT DM호출
		    IDataSet dsRtn = dNRInsuMxclMgmt.dSInsuMxclSumTotCnt(requestData, onlineCtx);
		    rsList = dsRtn.getRecordSet("RS_SUM_LIST");
		    PagenateUtils.setPagenatedParamToRecordSet(rsList, requestData, intTotalCnt);
		    
			responseData.putRecordSet("RS_SLIP_LIST", usrListRs);
			responseData.putRecordSet("RS_SUM_LIST", rsList);
		
	    } catch ( BizRuntimeException e ) {
	    	throw e; //시스템 오류가 발생하였습니다.
	    }
	
	    return responseData;
	}

	/**
	 *
	 *
	 * @author 김혁범 (kezmain1)
	 * @since 2015-10-20 10:12:17
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fSaveInqInsuMxclSlip(IDataSet requestData, IOnlineContext onlineCtx) {
		IDataSet responseData = new DataSet();
        CommonArea ca = getCommonArea(onlineCtx);
        Log log = getLog(onlineCtx);
        IRecordSet rs = requestData.getRecordSet("RS_SLIP_LIST");
        IDataSet paramData = new DataSet();
        boolean isOnline = false;

        try {
        	
        	DNRInsuMxclMgmt dNRInsuMxclMgmt = (DNRInsuMxclMgmt) lookupDataUnit(DNRInsuMxclMgmt.class);
        	
        	for(int i=0; i<rs.getRecordCount(); i++){
        		paramData.putFieldMap(rs.getRecordMap(i));
        		
        		paramData.putField("XCL_YM", rs.get(i, "XCL_YM"));
        		paramData.putField("SGI_INSURE_MGMT_NO", rs.get(i,"SGI_INSURE_MGMT_NO"));
        		
        		IRecordSet rsSeq = dNRInsuMxclMgmt.dSInsuMxclSumTotCnt(paramData, onlineCtx).getRecordSet("RS_SUM_LIST");
        		
        		requestData.putField("M_CNT", rsSeq.get(i, "M_CNT"));
    			requestData.putField("M_PRC", rsSeq.get(i, "M_AMT"));
    			
            	// 1. 입력 RS설정
        		requestData.putField("USERNO", ca.getUserNo());
            	requestData.putField("SLIP_TYPE", "NR_HP");

				ByteArrayOutputStream bout = new ByteArrayOutputStream(1024);
				DataSetXmlTransformer.dataSetToXml(requestData, bout, "UTF-8");
				String dsXml = bout.toString("UTF-8");

				// call on-demand batch job
				HashMap params = new HashMap<String,String>();
				params.put("TASK_ID", "EPR010");
			    params.put("TASK_NM", "전표발행");
			    params.put("USER_NO", ca.getUserNo());
			    params.put("COMPONENTNAME_LOCAL_ONLY", "dms.inf.EPR010");				
				params.put("POST_SLIP_DATASET", dsXml);
				String jobExecutionId = callBatchJob("EPR010", params, onlineCtx);
			    waitBatchJobEnd(jobExecutionId, 10000);
			    int result = getJobReturnCode(jobExecutionId);
			    
			    
				log.debug("(((((((((((((((((((((((((((((((fSaveInqInsuMxclSlip() result :"+ result);

			    if(result == -1) throw new BizRuntimeException("DMS00009"); // 시스템 오류가 발생하였습니다.    			
        	}
			
        } catch ( BizRuntimeException e ) {
            throw e;
        } catch ( Exception e ) {
            throw new BizRuntimeException("DMS00009", e); //시스템 오류
        }
    
    
        return responseData;
	}

	/**
	 *
	 *
	 * @author 김혁범 (kezmain1)
	 * @since 2015-10-20 10:39:30
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fSaveInqInsuMxclSlipDel(IDataSet requestData, IOnlineContext onlineCtx) {
	    Log log = getLog(onlineCtx);
	    IDataSet responseData = new DataSet();
	    CommonArea ca = getCommonArea(onlineCtx);
	    boolean isOnline = false;
	    
	    try{
	    	
				ByteArrayOutputStream bout = new ByteArrayOutputStream(1024);
				DataSetXmlTransformer.dataSetToXml(requestData, bout, "UTF-8");
				String dsXml = bout.toString("UTF-8");

				// call on-demand batch job
				HashMap params = new HashMap<String,String>();
				params.put("TASK_ID", "EPR011");
			    params.put("TASK_NM", "전표삭제");
			    params.put("USER_NO", ca.getUserNo());
			    params.put("COMPONENTNAME_LOCAL_ONLY", "dms.inf.EPR011");				
				params.put("POST_SLIP_DATASET", dsXml);
				log.info("(((((((((((((((((((((((((((((((fSaveInqInsuMxclSlipDel() params :"+ params);
				String jobExecutionId = callBatchJob("EPR011", params, onlineCtx);
			    waitBatchJobEnd(jobExecutionId, 10000);
			    int result = getJobReturnCode(jobExecutionId);
			    
				log.info("(((((((((((((((((((((((((((((((fSaveInqInsuMxclSlipDel() result :"+ result);

			    if(result == -1) throw new BizRuntimeException("DMS00009"); // 시스템 오류가 발생하였습니다
	    	
	    
	    } catch(BizRuntimeException e){
	    	throw e;
	    } catch ( Exception e ) {
			throw new BizRuntimeException("DMS00009", e); // 시스템 오류가 발생하였습니다.
		}
	
	    return responseData;
	}

	/**
	 *
	 *
	 * @author 김혁범 (kezmain1)
	 * @since 2015-10-20 11:10:45
	 *
	 * @param requestData 요청정보 DataSet 객체
	 * @param onlineCtx   요청 컨텍스트 정보
	 * @return 처리결과 DataSet 객체
	 */
	public IDataSet fInqInsuMxclAllExcel(IDataSet requestData, IOnlineContext onlineCtx) {
	    IDataSet responseData = new DataSet();
	    IDataSet temp = new DataSet();
	    
	    try {
	    	
            // 3. DU lookup
	    	DNRInsuMxclMgmt dNRInsuMxclMgmt = (DNRInsuMxclMgmt) lookupDataUnit(DNRInsuMxclMgmt.class);

            // 4. LISTDM호출
            responseData = dNRInsuMxclMgmt.dSInqInsuMxclAllExcel(requestData, onlineCtx);
	            
        } catch ( BizRuntimeException e ) {
            throw e; //시스템 오류가 발생하였습니다.
        }
	    
	    return responseData;
	}
  
}

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IResultMessage;
import nexcore.framework.core.util.DateUtils;
import nexcore.framework.core.util.PaddableDataOutputStream;
import nexcore.framework.core.util.StringUtils;
import fwk.common.internal.ImplFlatHeader;
import fwk.constants.DmsConstants;
import fwk.flat.FlatHeaderHelper;
import fwk.flat.FlatHeaderSpec;

/*
 * fixedlength를 테스트 하기 위한 클래스.
 * 
 * 1. http로 전송할 전문을 파일로 write한다. 2. wget 을 이용하여 해당 URL로 전송한다.
 */
public class SendFlatDocToNexcore {

    static Random r = new Random(); // multi instance 에 대해서 무작위 분산을 위해.

    static String txId;

    public static void main(String args[]) throws Exception {
        // localhost
//         String url = "http://localhost:7001/web/XYZ.fmd";
         String url = "http://10.0.8.251:8003/web/XYZ.fmd";//개발
//        String url = "http://10.0.8.252:8002/web/XYZ.fmd";//운영AP#1
//      String url = "http://10.0.8.253:8002/web/XYZ.fmd";//운영AP#2
//      String url = "http://10.0.8.136:8002/web/XYZ.fmd";//운영BE#1
//      String url = "http://10.0.8.137:8002/web/XYZ.fmd";//운영BI#2
//       String url = "http://10.0.8.252:8003/web/XYZ.fmd";//운영JT#1
//       String url = "http://10.0.8.253:8004/web/XYZ.fmd";//운영JT#2
//       String url = "http://10.0.8.252:8005/web/XYZ.fmd";//운영HOME#1
//       String url = "http://10.0.8.253:8005/web/XYZ.fmd";//운영HOME#2
//     String url = "http://10.0.8.136:8003/web/XYZ.fmd";//운영VOC#1
//       String url = "http://10.0.8.136:8004/web/XYZ.fmd";//운영IVR#1
//     String url = "http://10.0.8.137:8003/web/XYZ.fmd";//운영VOC#2
//     String url = "http://10.0.8.137:8004/web/XYZ.fmd";//운영IVR#2
//        String url = "http://10.0.9.105:8001/web/XYZ.fmd";//운영Batch

        for (int i = 0; i < 1; i++) {// 여러번의 거래를 송신할 경우
            byte[] requestUserData = makeUserData();// 거래별 사용자 데이터를 만든다.
            byte[] request = makeTotalData(requestUserData, false);
            FileOutputStream fo = new FileOutputStream("./src/test/request.dat");
            DataOutputStream ds = new DataOutputStream(fo);
            ds.write(request);
            ds.close();
            System.out.println("------------- REQ --------------------------------");
            System.out.write(request);
            System.out.println("\n---------------------------------------------");
            byte[] response = callServer(url, 300, request);
            validateResponse(response);

            System.out.println("\n\n------------- RES --------------------------------");
            System.out.println(new String(response, "ms949"));

            FileOutputStream fo2 = new FileOutputStream("./src/test/response.dat");
            DataOutputStream ds2 = new DataOutputStream(fo2);

            ds2.write(response);
            ds2.close();
        }
    }

    /**
     * 업무용 Flat Data취득
     * 
     * @return
     * @throws IOException
     *             byte[]
     */
    static byte[] makeUserData() throws IOException {
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        PaddableDataOutputStream out = new PaddableDataOutputStream(bout, "ms949");
//        pKorWordPadding(out) ;
//        pExtReqAccService(out);
        // pCallFepSample(out);
        pFndUserInfByDetail(out);
        // pInboundFep(out);
        // pOpPtResvPos(out);
//         pOpPtResvOldPos(out);
        // pSFTPPutFile(out);
        // pSFTPGetFile(out);
        out.flush();
        bout.close();
        return bout.toByteArray();
    }
    /**
     * 사용자 정보 상세조회거래
     * 
     * @param out
     * @throws IOException
     *             void
     */
    static void pKorWordPadding(PaddableDataOutputStream out) throws IOException {
        /* Sample push */
        txId = "PXYZTUsrMgmt_pKorWordPadding";
        out.writeStringWithRPadding("널 믿어던 내 마음", 30, (byte) 0x20); // 사용자명
    }
    
    /**
     * 사용자목록 취득거래
     * 
     * @param out
     * @throws IOException
     *             void
     */
    static void pFndUserList(PaddableDataOutputStream out) throws IOException {
        /* Sample push */
        txId = "PXYZTUsrMgmt_pFndUserList";
    }

    /**
     * 사용자 정보 상세조회거래
     * 
     * @param out
     * @throws IOException
     *             void
     */
    static void pFndUserInfByDetail(PaddableDataOutputStream out) throws IOException {
        /* Sample push */
        txId = "PXYZTUsrMgmt_pFndUserInfByDetail";
        out.writeStringWithRPadding("heracul", 20, (byte) 0x20); // 사용자ID
        out.writeStringWithRPadding("박세일", 100, (byte) 0x20); // 사용자명
    }

    /**
     * 대외적립요청거래
     * 
     * @param out
     * @throws IOException
     *             void
     */
    static void pExtReqAccService(PaddableDataOutputStream out) throws IOException {
        txId = "PXYZTCallService_pExtReqAccService";
        out.writeStringWithRPadding("2342", 15, (byte) 0x20); // 가맹점코드
        out.writeStringWithRPadding("8170352106250103", 16, (byte) 0x20); // 카드번호
        out.writeStringWithRPadding("010-8728-6743", 13, (byte) 0x20); // 핸드폰번호
        out.writeStringWithLPadding("29700", 10, (byte) 0x30); // 결제금액
    }

    /**
     * FEP로의 Outbound거래
     * 
     * @param out
     * @throws IOException
     *             void
     */
    static void pCallFepSample(PaddableDataOutputStream out) throws IOException {
        /* 계좌입금 */
        txId = "PXYZFepOutBound_pCallFepSample";
        out.writeStringWithRPadding("heracul", 20, (byte) 0x20); // 사용자ID
        out.writeStringWithRPadding("박세일", 100, (byte) 0x20); // 사용자명
    }

    /**
     * SFTP서버로의 업로드실시
     * 
     * @param out
     * @throws IOException
     *             void
     */
    static void pSFTPPutFile(PaddableDataOutputStream out) throws IOException {
        txId = "PXYZTSFTPMgmt_pSFTPPutFile";
        out.writeStringWithRPadding("/fep/bspn", 100, (byte) 0x20); // 파일Path
        out.writeStringWithRPadding("nohup.BO_M1.out", 100, (byte) 0x20); // 파일명
    }

    /**
     * SFTP서버로의 다운로드실시
     * 
     * @param out
     * @throws IOException
     *             void
     */
    static void pSFTPGetFile(PaddableDataOutputStream out) throws IOException {
        txId = "PXYZTSFTPMgmt_pSFTPGetFile";
        out.writeStringWithRPadding("/fep/bspn", 100, (byte) 0x20); // 파일Path
        out.writeStringWithRPadding("BSPN_FW_20141119_001_S3010P0.dat", 100, (byte) 0x20); // 파일Path
    }

    /**
     * FEP부터의 Inbound거래
     * 
     * @param out
     * @throws IOException
     *             void
     */
    static void pInboundFep(PaddableDataOutputStream out) throws IOException {// 대외적립요청거래
        txId = "PXYZTFepInbound_pInboundFep";
        out.writeStringWithRPadding("2342", 15, (byte) 0x20); // 가맹점코드
        out.writeStringWithRPadding("8170352106250103", 16, (byte) 0x20); // 카드번호
        out.writeStringWithRPadding("", 11, (byte) 0x20); // 핸드폰번호
        out.writeStringWithLPadding("42000", 10, (byte) 0x30); // 결제금액
    }

    static void pOpPtResvOldPos(PaddableDataOutputStream out) throws IOException {
        txId = "PBSPTPtResv_pOpPtResvOldPos";
        out.writeStringWithRPadding("1110", 4, (byte) 0x20);
        out.writeStringWithRPadding("OSPN", 4, (byte) 0x20);
        out.writeStringWithRPadding("20141201", 8, (byte) 0x20);
        out.writeStringWithRPadding("111111", 6, (byte) 0x20);
        out.writeStringWithRPadding("141201050", 9, (byte) 0x20);
        out.writeStringWithRPadding("ON", 2, (byte) 0x20);
        out.writeStringWithRPadding("00", 2, (byte) 0x20);
        out.writeStringWithLPadding("0530", 4, (byte) 0x30);
        out.writeStringWithRPadding("1110", 4, (byte) 0x20);
        out.writeStringWithRPadding("00", 2, (byte) 0x20);
        out.writeStringWithRPadding("", 10, (byte) 0x20);
        out.writeStringWithRPadding("091100823", 15, (byte) 0x20);
        out.writeStringWithRPadding("20141021", 8, (byte) 0x20);
        out.writeStringWithRPadding("173000", 6, (byte) 0x20);
        out.writeStringWithRPadding("01", 2, (byte) 0x20);
        out.writeStringWithRPadding("2", 1, (byte) 0x20);
        out.writeStringWithRPadding("8231123800608071", 37, (byte) 0x20);
        out.writeStringWithLPadding("0000001000", 10, (byte) 0x30);
        out.writeStringWithRPadding("00000000", 8, (byte) 0x20);
        out.writeStringWithRPadding("000000", 6, (byte) 0x20);
        out.writeStringWithRPadding("000000000000", 12, (byte) 0x20);
        out.writeStringWithRPadding("20", 2, (byte) 0x20);
        out.writeStringWithLPadding("0000000", 7, (byte) 0x30);
        out.writeStringWithRPadding("", 2, (byte) 0x20);
        out.writeStringWithLPadding("0000200", 7, (byte) 0x30);
        out.writeStringWithRPadding("", 2, (byte) 0x20);
        out.writeStringWithLPadding("0000300", 7, (byte) 0x30);
        out.writeStringWithLPadding("0000000000", 10, (byte) 0x30);
        out.writeStringWithRPadding("", 24, (byte) 0x20);
        out.writeStringWithRPadding("", 24, (byte) 0x20);
        out.writeStringWithRPadding("", 24, (byte) 0x20);
        out.writeStringWithRPadding("ST100001011000110110001501N9523601N9523901N9523701N9523801",
            300,
            (byte) 0x20);
    }

    static void pOpPtResvPos(PaddableDataOutputStream out) throws IOException {// 포인트적립_POS
        txId = "PBSPTPtResv_pOpPtResvPos";
        out.writeStringWithRPadding("1110", 4, (byte) 0x20);
        out.writeStringWithRPadding("9000", 4, (byte) 0x20);
        out.writeStringWithRPadding("20141020", 8, (byte) 0x20);
        out.writeStringWithRPadding("231541", 6, (byte) 0x20);
        out.writeStringWithRPadding("000000004", 9, (byte) 0x20);
        out.writeStringWithRPadding("ON", 2, (byte) 0x20);
        out.writeStringWithRPadding("", 2, (byte) 0x20);
        out.writeStringWithLPadding("310", 4, (byte) 0x30);
        out.writeStringWithRPadding("1110", 4, (byte) 0x20);
        out.writeStringWithRPadding("90", 2, (byte) 0x20);
        out.writeStringWithRPadding("PCR0002367", 10, (byte) 0x20);
        out.writeStringWithRPadding("091177568", 15, (byte) 0x20);
        out.writeStringWithRPadding("20141020", 8, (byte) 0x20);
        out.writeStringWithRPadding("231541", 6, (byte) 0x20);
        out.writeStringWithRPadding("01", 2, (byte) 0x20);
        out.writeStringWithRPadding("0", 1, (byte) 0x20);
        out.writeStringWithRPadding("8231123885293279==", 37, (byte) 0x20);
        out.writeStringWithLPadding("3500", 10, (byte) 0x30);
        out.writeStringWithRPadding("00000000", 8, (byte) 0x20);
        out.writeStringWithRPadding("000000", 6, (byte) 0x20);
        out.writeStringWithRPadding("000000000000", 12, (byte) 0x20);
        out.writeStringWithRPadding("", 2, (byte) 0x20);
        out.writeStringWithLPadding("0", 7, (byte) 0x30);
        out.writeStringWithRPadding("", 2, (byte) 0x20);
        out.writeStringWithLPadding("", 7, (byte) 0x30);
        out.writeStringWithRPadding("", 2, (byte) 0x20);
        out.writeStringWithLPadding("0", 7, (byte) 0x30);
        out.writeStringWithLPadding("0", 10, (byte) 0x30);
        out.writeStringWithRPadding("", 24, (byte) 0x20);
        out.writeStringWithRPadding("", 24, (byte) 0x20);
        out.writeStringWithRPadding("", 24, (byte) 0x20);
        out.writeStringWithRPadding("", 300, (byte) 0x20);
    }

    // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>이 아래부터는 수정할
    // 필요없음.>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    static byte[] makeTotalData(byte[] userData, boolean rollback) throws IOException {
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        PaddableDataOutputStream out = new PaddableDataOutputStream(bout, "ms949");

        String yyyyMMddHHmmssSSS = DateUtils.getCurrentDate("yyyyMMddHHmmssSSS");

        Map<String, String> headers = new HashMap<String, String>();

        // 길이부 - 전문길이
        String seq = String.valueOf(Math.abs(r.nextInt() % Math.pow(10, 3))).replaceAll("\\.", "0");
        // 글로벌ID: 시스템일시(17)+시스템환경코드(1)+시스템코드(3)+채널코드(4)+회사코드(3)+일련번호(2)
        headers.put(FlatHeaderSpec.GLOB_ID.name(), yyyyMMddHHmmssSSS + "L" + DmsConstants.SPC_COMPANY_CD
            + DmsConstants.FEP_CHN_CD + DmsConstants.HPC_SYSTEM_CD + seq);
        headers.put(FlatHeaderSpec.PRGS_SRNO.name(), "000");

        // 공통부 - 전송시스템정보내용
        headers.put(FlatHeaderSpec.IPAD.name(), "192.168.115.220"); // IP주소
        headers.put(FlatHeaderSpec.TRN_TRNM_NO.name(), "028020002"); // 거래단말번호

        headers.put(FlatHeaderSpec.ENV_DVCD.name(), "L"); // 환경정보구분코드
        headers.put(FlatHeaderSpec.FRST_TRNM_CHNL_CD.name(), DmsConstants.FEP_CHN_CD); // 최초전송채널코드

        headers.put(FlatHeaderSpec.TRNM_CHNL_CD.name(), DmsConstants.FEP_CHN_CD); // 전송채널코드
        headers.put(FlatHeaderSpec.TRNM_NODE_NO.name(), "01"); // 전송노드번호
        headers.put(FlatHeaderSpec.MCI_TRNM_NODE_NO.name(), "01"); // MCI 전송노드번호

        headers.put(FlatHeaderSpec.MESG_DMND_DTTM.name(), yyyyMMddHHmmssSSS); // 전문요청일시
        headers.put(FlatHeaderSpec.MESG_VRSN_DVCD.name(), "056"); // 전문버전구분코드
        headers.put(FlatHeaderSpec.TRN_CD.name(), txId); // 거래코드
        headers.put(FlatHeaderSpec.TRN_PTRN_DVCD.name(), "R"); // 거래코드

        // 공통부 - FLAG정보
        headers.put(FlatHeaderSpec.MESG_DVCD.name(), "Q"); // 전문구분코드 (Q:요청',
                                                           // R:응답')
        headers.put(FlatHeaderSpec.MESG_TYCD.name(), "1"); // 전문유형코드

        // 공통부 - 직원정보내용
        headers.put(FlatHeaderSpec.DEPT_CD.name(), "603"); // 부점코드
        headers.put(FlatHeaderSpec.COMP_CD.name(), "PICW");
        headers.put(FlatHeaderSpec.USER_NO.name(), "100000000001"); // 사용자번호

        // 공통부 - FILLER
        headers.put(FlatHeaderSpec.SPR_CHRS_CNTN.name(), rollback ? "R" : ""); // 예비문자열내용

        // 메시지부
        // - 메시지유형 (1:정상메시지(상태BAR), 2:오류메시지(POPUP), 3:책임자승인, 9:PUSH 메시지)
        headers.put(FlatHeaderSpec.MSG_CCNT.name(), "0"); // 메시지 건수

        ImplFlatHeader entity = FlatHeaderHelper.toHeader(headers, new ImplFlatHeader());
        System.out.println(entity);
        FlatHeaderHelper.toStream(entity, (IResultMessage) null, userData.length, out);

        // userdata write
        out.write(userData);
        out.writeStringWithLPadding("@@", 2, (byte) 0x20);

        out.flush();
        bout.close();
        return bout.toByteArray();
    }

    public static byte[] callServer(String url, int timeoutInSecond, byte[] inputData) throws Exception {
        HttpURLConnection conn = null;
        try {
            conn = (HttpURLConnection) new URL(url).openConnection();
            conn.setDoInput(true);
            conn.setDoOutput(true);
            conn.setUseCaches(false);

            conn.setRequestMethod("POST");
            conn.setRequestProperty("User-Agent", "ETC");
            conn.setRequestProperty("Content-Type", "application/octet-stream");
            conn.setRequestProperty("Connection", "close");
            conn.setRequestProperty("Content-Length", String.valueOf(inputData.length));

            conn.setConnectTimeout(timeoutInSecond * 1000);
            conn.setReadTimeout(timeoutInSecond * 1000);
            OutputStream out = conn.getOutputStream();
            out.write(inputData);
            out.flush();

            int result = conn.getResponseCode();
            if (result != 200) {
                throw new IOException("Fail to call NEXCORE. code=[" + result + "].\n" + conn.getResponseMessage());
            }

            ByteArrayOutputStream bout = new ByteArrayOutputStream(Math.max(conn.getContentLength(), 100)); // getContentLength()
                                                                                                            // 가
                                                                                                            // -1
                                                                                                            // 일
                                                                                                            // 수도
                                                                                                            // 있으므로
            byte[] buffer = new byte[64]; // 64 byte 버퍼를 두고 읽는다.
            InputStream resStream = conn.getInputStream();
            int readLen = -1;
            while ((readLen = resStream.read(buffer)) != -1) {
                bout.write(buffer, 0, readLen);
            }
            return bout.toByteArray();
        } finally {
            conn.disconnect();
        }
    }

    public static void validateResponse(byte[] bytes) throws Exception {
        int length = bytes.length;
        int ALL_TLMSG_LNG = Integer.parseInt(new String(bytes, 0, FlatHeaderSpec.WHL_MESG_LEN.length()));
        int STN_TLMSG_COMM_LNG = Integer.parseInt(new String(bytes,
            FlatHeaderSpec.WHL_MESG_LEN.length(),
            FlatHeaderSpec.STND_HDR_LEN.length()));
        System.out.println("length=" + length);
        System.out.println("ALL_TLMSG_LNG=" + ALL_TLMSG_LNG);
        System.out.println("STN_TLMSG_COMM_LNG=" + STN_TLMSG_COMM_LNG);
    }

}

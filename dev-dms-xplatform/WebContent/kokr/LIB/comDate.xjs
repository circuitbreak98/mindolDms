<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[/************************************************************************************************
 * 01. 업무구분 : 공통
 * 02. js :  comDate.xjs
 * 03. js 설명 :  Date관련 Script
 * 04. 관련 화면/서비스 : 
 * 05. 작성자 : 심상준 
 * 06. 작성일 : 2015.06.01
 * 07. 수정이력 :
 ************************************************************************************************
 *     수정일        이  름    사유
 ************************************************************************************************
 *     2015.06.01    심상준    최초 작성
*************************************************************************************************/

/************************************************************************************************
 * gfn_isDate                           : 날짜 정합성 체크
 * gfn_isTime                           : 시간 정합성 체크
 * gfn_isDateTime						: 일시 정합성 체크
 * gfn_isMonth                          : 년월 정합성 체크
 * gfn_isLeapYear                       : 윤년여부 확인
 * gfn_makeDate                         : yyyyMMdd 형태의 문자열 날짜 리턴 ( 예)gfn_makeDate("2010", "05", "01");
 * gfn_addDate                          : 입력된 날자에 nOffset 으로 지정된 만큼의 일을 증감한다.
 * gfn_addMonth                         : 입력된 날자에 nOffset 으로 지정된 만큼의 월을 증감한다.
 * gfn_getLastDay                       : 해당월의 마지막 날짜
 * gfn_getDay                           : 입력된 날자로부터 요일을 구함
 * gfn_getDayKor                        : 입력된 날자로부터 요일을 구함
 * gfn_today                            : 해당 PC의 오늘 날짜를 가져온다
 * gfn_todayTime                        : 해당 PC의 오늘 날짜+시간를 가져온다.
 * gfn_todayTimeFormat                  : 해당 PC의 오늘 날짜+시간를 가져온다.
 * gfn_todayFullTime                    : 해당 PC의 오늘 날짜+시간를 가져온다.(Millisecond 포함)
 * gfn_diffDate                         : 두 일자간의 차이 일수 계산
 * gfn_diffMonth                        : 두 월간의 차이 월수 계산
 * gfn_diffTime                         : 두 시간간의 차이 계산
 * gfn_diffTime2                        : 두 시간간의 차이 계산
 * gfn_getBeforeMonth                   : 한달전 날짜 구하는 함수
 * gfn_getAfterMonth                    : 한달후 날짜 구하는 함수.
 * gfn_str2Date                         : 문자를 날짜로 변환
 * gfn_date2Str                         : 날짜를 문자로 변환
 * gfn_getFirstDate                     : 현재월 1일 만들기.
 * gfn_getLastDate                      : 현재월 마지막일 만들기
 * gfn_getWeek                          : 년월일(yyyyMMdd)을 입력하면 해당 주차를 리턴한다.
 * gfn_getDayConvert                    : 일자 입력 후 Enter 시 해당 년월에 입력 일자를 불여서 값 Return
 * gfn_datetime                         : MiPlatform에서 사용하던 Datetime형식으로 변환
 * gfn_setWeekFirstDay                  : 주차의 시작일을 가져온다
 * gfn_setHalfTerm                      : 해당 Dataset에 해당 시작년도부터 종료년도까지 반기 데이터를 설정
 * gfn_setQuarter                       : 해당 Dataset에 해당 시작년도부터 종료년도까지 분기 데이터를 설정
 * gfn_calcDataTime                     : 날자 시간 계산
 * gfn_calcWeekOfYear                   : 주차 계산
 * gfn_setWeekDS                        : 년도별 주차와 주차 시작일, 주차 종료일을 Dataset으로 가져온다.
 * gfn_setWeekCodeDs                    : 년도별 주차와 주차 시작일, 주차 종료일을 Dataset으로 가져온다.
 * gfn_getHolidays                      : 양력 nYear에 해당하는 년도의 법정 공휴일(양력) List 모두 구하기
 * gfn_solar2Lunar                      : 양력을 음력으로 변환해주는 함수 (처리가능 기간  1841 - 2043년)
 * gfn_lunar2Solar                      : 음력을 양력으로 변환해주는 함수 (처리가능 기간  1841 - 2043년)
 * gfn_isLeapYear                       : 윤년여부 확인
 
 * _SolarBase                           : 각 월별 음력 기준 정보를 처리하는 함수(처리가능 기간  1841 - 2043년)
************************************************************************************************/

/************************************************************************************************
 * Function : 날짜 정합성 체크
 * @param   : sDate - 날짜형식의 문자열
 * Return   : true/false(정합 여부)
************************************************************************************************/
function gfn_isDate(sDate)
{
	if(gfn_isNull(sDate)) return false;

	sDate = new String(sDate);
	try {
		var objDate = new Date(gfn_getFormat(sDate, "@@@@-@@-@@"));

		if(gfn_isNull(objDate)) return false;
		if(objDate.toFormatString("%Y-%m-%d") != gfn_getFormat(sDate, "@@@@-@@-@@")) return false;
	}
	catch(e){
	    return false;
	}

    return true;
}

/************************************************************************************************
 * Function : 시간 정합성 체크
 * @param   : sDate - hhmmss 형식의 식간 문자열
 * Return   : true/false(정합 여부)
************************************************************************************************/
function gfn_isTime(sTime)
{
	if(gfn_isNull(sTime)) return false;
	if(!isNumeric(sTime)) return false;
	if(String(sTime).trim().length != 6) return false;

    var iHH = parseInt(sTime.toString().substr(0, 2));
    var iMM = parseInt(sTime.toString().substr(2, 2));
    var iSS = parseInt(sTime.toString().substr(4, 2));

	if(gfn_isNull(iHH) || gfn_isNull(iMM) || gfn_isNull(iSS)) return false;

    if(iHH > 23 || iHH < 0) return false;
    if(iMM > 59 || iMM < 0) return false;
    if(iSS > 59 || iSS < 0) return false;

    return true;
}

/************************************************************************************************
 * Function : 일시 정합성 체크
 * @param   : sDateTime - yyyyMMddhhmmss 형식의 식간 문자열
 * Return   : true/false(정합 여부)
************************************************************************************************/
function gfn_isDateTime(sDateTime)
{
    if(gfn_isNull(sDateTime)) return false;
    if(String(sDateTime).trim().length != 14) return false;
    
    var sDate = sDateTime.substr(0,8);
    var sTime = sDateTime.substr(8,6);
    
    if(!gfn_isDate(sDate)) return false;
    if(!gfn_isTime(sTime)) return false;
    
    return true;
}

/************************************************************************************************
 * Function : 년월 정합성 체크
 * @param   : sValue - yyyyMM형식의 문자열
 * Return   : true/false(정합 여부)
************************************************************************************************/
function gfn_isMonth(sValue)
{
	if(gfn_isNull(sValue)) return false;
    if(String(sValue).trim().length != 6) return false;
    if(!isNumeric(sValue)) return false;

    var iYear = toNumber(sValue.toString().substr(0, 4));
    var iMonth = toNumber(sValue.toString().substr(4, 2));

    if(gfn_isNull(iYear) || gfn_isNull(iMonth)) return false;

    if(iMonth > 12 || iMonth < 1) return false;

    return true;
}

/************************************************************************************************
 * Function : 윤년여부 확인
 * @param   : sDate - yyyyMMdd형태의 날짜
 * Return   : true/false(정합 여부)
************************************************************************************************/
function gfn_isLeapYear(sDate)
{
	if(gfn_isNull(sDate)) return false;
	if(String(sDate).trim().length != 8) return false;
	if(!isNumeric(sDate)) return false;

	var iY = parseInt(sDate.toString().substring(0, 4), 10);

	if((iY % 4) == 0){
		if((iY % 100) != 0 || (iY % 400) == 0)
			return true;
		else
			return false;
	}
	else
		return false;
}

/************************************************************************************************
 * Function : yyyyMMdd 형태의 문자열 날짜 리턴 ( 예)gfn_makeDate("2010", "05", "01");
 * @param   : nYear - 년도 
 * @param   : nMonth - 월
 * @param   : nDate - 일
 * Return   : true/false(정합 여부)
************************************************************************************************/
function gfn_makeDate(nYear, nMonth, nDate)
{
	if(gfn_isNull(nYear) || gfn_isNull(nMonth) || gfn_isNull(nDate)) return "";

	var objDate = new Date(nYear, nMonth-1, nDate);

	var sYear   = objDate.getFullYear().toString();
	var sMonth  = String(objDate.getMonth() + 1).padLeft(2, "0");
	var sDate   = String(objDate.getDate()).padLeft(2, "0");

	return sYear + sMonth + sDate;
}

/************************************************************************************************
 * Function : 입력된 날자에 nOffset 으로 지정된 만큼의 일을 증감한다.
 * @param   : sDate - yyyyMMdd 형식의 날짜 문자열
 * @param   : nOffset - 증감할 일수
 * Return   : yyyyMMdd 형태의 문자열
************************************************************************************************/
function gfn_addDate(sDate, iOffset)
{
	if(gfn_isNull(sDate) || gfn_isNull(iOffset)) return "";

	var nYear = parseInt(sDate.substr(0, 4));
	var nMonth = parseInt(sDate.substr(4, 2));
	var nDate = parseInt(sDate.substr(6, 2)) + iOffset;

	return gfn_makeDate(nYear, nMonth, nDate);
}

/************************************************************************************************
 * Function : 입력된 날자에 nOffset 으로 지정된 만큼의 월을 증감한다.
 * @param   : sDate - yyyyMMdd 형식의 날짜 문자열
 * @param   : nOffset - 증감할 월수
 * Return   : yyyyMMdd 형태의 문자열
************************************************************************************************/
function gfn_addMonth(sDate, iOffset)
{
	if(gfn_isNull(sDate) || gfn_isNull(iOffset)) return "";
	
	sDate = String(sDate);

	var iYear = parseInt(sDate.substr(0, 4));
	var iMonth = parseInt(sDate.substr(4, 2)) + iOffset;
	var iDate = parseInt(sDate.substr(6, 2));
	var sRet = gfn_makeDate(iYear, iMonth, 1).substr(0, 6);
	var iLastDate = parseInt(gfn_getLastDay(sRet));

	if(iDate > iLastDate)
		return sRet + iLastDate.toString();
	else
		return sRet + iDate.toString().padLeft(2, "0");
}

/************************************************************************************************
 * Function : 해당월의 마지막 날짜
 * @param   : sDate - yyyyMMdd 형식의 날짜 문자열
 * Return   : 마지막 일자
************************************************************************************************/
function gfn_getLastDay(sDate)
{
	if(gfn_isNull(sDate)) return "";

	var iMonth = parseInt(String(sDate).substr(4, 2), 10);
	switch(iMonth){
		case 1: case 3: case 5: case 7: case 8: case 10: case 12:
			return 31;
		case 2:
			if(gfn_isLeapYear(sDate)) return 29;
			else return 28;
		default:
			return 30;
	}
}

/************************************************************************************************
 * Function : 입력된 날자로부터 요일을 구함
 * @param   : sDate('yyyyMMdd' 형태로 표현된 날짜)
 * Return   : String(0-일요일 ~ 6-토요일)
************************************************************************************************/
function gfn_getDay(sDate)
{
    var objDate = new Date(gfn_getFormat(sDate, "@@@@-@@-@@"));
    return objDate.getDay();
}

/************************************************************************************************
 * Function : 입력된 날자로부터 요일을 구함
 * @param   : sDate('yyyyMMdd' 형태로 표현된 날짜)
 * Return   : String(일, 월, 화, 수, 목, 금, 토)
************************************************************************************************/
function gfn_getDayKor(sDate)
{
	var arrWeek = new Array["일", "월", "화", "수", "목", "금", "토"];		
	return arrWeek[gfn_getDay(sDate)];
}

/************************************************************************************************
 * Function : 해당 PC의 오늘 날짜를 가져온다
 * @param   : 
 * Return   : 오늘 날짜("yyyyMMdd" 형태)
************************************************************************************************/
function gfn_today()
{
	var sToday = "";
	var objDate = new Date();
	var sToday  = objDate.getFullYear() + "";
		sToday += gfn_padLeftB(objDate.getMonth() + 1, 2, "0");
		sToday += gfn_padLeftB(objDate.getDate(), 2, "0");

	return sToday;
}

/************************************************************************************************
 * Function : 해당 PC의 오늘 날짜+시간를 가져온다.
 * @param   : 
 * Return   : 오늘 날짜("yyyyMMddhhmmss" 형태)
************************************************************************************************/
function gfn_todayTime()
{
	var sToday = "";
	var objDate = new Date();
	var sToday  = objDate.getFullYear() + "";
		sToday += gfn_padLeftB((objDate.getMonth() + 1), 2, "0");
		sToday += gfn_padLeftB(objDate.getDate(), 2, "0");
		sToday += gfn_padLeftB(objDate.getHours(), 2, "0");
		sToday += gfn_padLeftB(objDate.getMinutes(), 2, "0");
		sToday += gfn_padLeftB(objDate.getSeconds(), 2, "0");

	return sToday;
}

/************************************************************************************************
 * Function : 해당 PC의 오늘 날짜+시간를 가져온다.
 * @param   : 
 * Return   : 오늘 날짜("yyyy-MM-dd hh:mm:ss" 형태)
************************************************************************************************/
function gfn_todayTimeFormat()
{
	var sToday = "";
	var objDate = new Date();
	var sToday  = objDate.getFullYear() + "";
		sToday += "-" + gfn_padLeftB((objDate.getMonth() + 1), 2, "0");
		sToday += "-" + gfn_padLeftB(objDate.getDate(), 2, "0");
		sToday += " " + gfn_padLeftB(objDate.getHours(), 2, "0");
		sToday += ":" + gfn_padLeftB(objDate.getMinutes(), 2, "0");
		sToday += ":" + gfn_padLeftB(objDate.getSeconds(), 2, "0");

	return sToday;
}

/************************************************************************************************
 * Function : 해당 PC의 오늘 날짜+시간를 가져온다.(Millisecond 포함)
 * @param   : 
 * Return   : 오늘 날짜("yyyyMMddhhmmss" 형태)
************************************************************************************************/
function gfn_todayFullTime()
{
	var sToday = "";
	var objDate = new Date();
	var sToday  = objDate.getFullYear() + "";
		sToday += gfn_padLeftB((objDate.getMonth() + 1), 2, "0");
		sToday += gfn_padLeftB(objDate.getDate(), 2, "0");
		sToday += gfn_padLeftB(objDate.getHours(), 2, "0");
		sToday += gfn_padLeftB(objDate.getMinutes(), 2, "0");
		sToday += gfn_padLeftB(objDate.getSeconds(), 2, "0");
		sToday += gfn_padLeftB(objDate.getMilliseconds(), 3, "0");

	return sToday;
}

/************************************************************************************************
 * Function : 두 일자간의 차이 일수 계산
 * @param   : sStartDate(yyyyMMdd형태의 From 일자) ( 예 : "20121122" )
 * @param   : sEndDate(yyyyMMdd형태의 To 일자) ( 예 : "20121202" )
 * Return   : 차이 일수
************************************************************************************************/
function gfn_diffDate(sStartDate, sEndDate)
{
	sStartDate = String(sStartDate);
	sEndDate   = String(sEndDate);

	var objEndDate = new Date(parseInt(sEndDate.substring(0, 4),  10), parseInt(sEndDate.substring(4, 6) - 1,  10), parseInt(sEndDate.substring(6, 8), 10));
	var objStartDate = new Date(parseInt(sStartDate.substring(0, 4),  10), parseInt(sStartDate.substring(4, 6) - 1,  10), parseInt(sStartDate.substring(6, 8), 10));

	return parseInt((objEndDate - objStartDate) / (1000 * 60 * 60 * 24));
}

/************************************************************************************************
 * Function : 두 월간의 차이 월수 계산
 * @param   : sStartDate(yyyyMMdd형태의 From 일자) ( 예 : "20121122" )
 * @param   : sEndDate(yyyyMMdd형태의 To 일자) ( 예 : "20121202" )
 * Return   : 차이 월수
************************************************************************************************/
function gfn_diffMonth(sStartDate, sEndDate)
{
	var nStartMon, nEndMon;

	nStartMon = parseInt(String(sStartDate).substring(0, 4)) * 12 + parseInt(String(sStartDate).substring(4, 6) - 1);
	nEndMon = parseInt(String(sEndDate).substring(0, 4)) * 12 + parseInt(String(sEndDate).substring(4, 6) - 1);

	return (nEndMon - nStartMon);
}

/************************************************************************************************
 * Function : 두 시간간의 차이 계산
 * @param   : strStartTime(HHmmss형태의 From 시간) (예 : "033025")
 * @param   : strEndTime(HHmmss형태의 To 시간) (예 : "034025")
 * @param   : sType(구하고자하는 타입(시, 분, 초)) (예 : "HH")
 * Return   : 차이 시간
************************************************************************************************/
function gfn_diffTime(sStartTime, sEndTime, sType)
{
	var nFromHH = parseInt(sStartTime.substring(0, 2));
	var nFromMm = parseInt(sStartTime.substring(2, 4));
	var nFromSs = parseInt(sStartTime.substring(4, 6));

	var nToHH = parseInt(sEndTime.substring(0, 2));
	var nToMm = parseInt(sEndTime.substring(2, 4));
	var nToSs = parseInt(sEndTime.substring(4, 6));

	var nFromTotalSs = (nFromHH * 3600) + (nFromMm * 60) + nFromSs;
	var nToTotalSs   = (nToHH * 3600) + (nToMm * 60) + nToSs;

	if(sType == "HH")
		return (Math.floor((nToTotalSs - nFromTotalSs) / 3600));
	else if(sType == "mm")
		return (Math.floor((nToTotalSs - nFromTotalSs) / 60));
	else if(sType == "ss")
		return (nToTotalSs - nFromTotalSs);
}

/************************************************************************************************
 * Function : 두 시간간의 차이 계산
 * @param   : strStartTime(HHmmss형태의 From 시간) (예 : "033025000")
 * @param   : strEndTime(HHmmss형태의 To 시간) (예 : "034025000")
 * @param   : sType(구하고자하는 타입(시, 분, 초)) (예 : "HH")
 * Return   : 차이 시간
************************************************************************************************/
function gfn_diffTime2(sStartTime, sEndTime, sType)
{
	var nFromHH = toNumber(sStartTime.substring(0, 2));
	var nFromMm = toNumber(sStartTime.substring(2, 4));
	var nFromSs = toNumber(sStartTime.substring(4, 6));
	var nFromMs = toNumber(sStartTime.substring(6, 9));

	var nToHH = toNumber(sEndTime.substring(0, 2));
	var nToMm = toNumber(sEndTime.substring(2, 4));
	var nToSs = toNumber(sEndTime.substring(4, 6));
	var nToMs = toNumber(sEndTime.substring(6, 9));
	var nFromTotal_ss = (nFromHH * 3600) + (nFromMm * 60) + nFromSs + (nFromMs*0.001);
	var nToTotal_ss = (nToHH * 3600) + (nToMm * 60) + nToSs + (nToMs*0.001);

	if(sType == "HH")
		return (Math.floor((nToTotal_ss - nFromTotal_ss) / 3600000));
	else if(sType == "mm")
		return (Math.floor((nToTotal_ss - nFromTotal_ss) / 60000));
	else if(sType == "ss")
		return Math.round((nToTotal_ss - nFromTotal_ss), 3);
}

/************************************************************************************************
 * Function : 한달전 날짜 구하는 함수
 * @param   : sDate - yyyyMMdd형태의 From 일자 (예 : "20121122")
 * Return   : 한달전 날짜(yyyyMMdd형태)
************************************************************************************************/
function gfn_getBeforeMonth(sDate)
{
	if(gfn_isNull(sDate)) sDate = gfn_today();

	return gfn_addMonth(sDate, -1);
}

/************************************************************************************************
 * Function : 한달후 날짜 구하는 함수.
 * @param   : sDate - yyyyMMdd형태의 From 일자 (예 : "20121122")
 * Return   : 한달후 날짜(yyyyMMdd형태)
************************************************************************************************/
function gfn_getAfterMonth(sDate) 
{
	if(gfn_isNull(sDate)) sDate = gfn_today();

	return gfn_addMonth(sDate, 1);
}

/************************************************************************************************
 * Function : 일년전 날짜 구하는 함수
 * @param   : sDate - yyyyMMdd형태의 From 일자 (예 : "20121122")
 * Return   : 일년전 날짜(yyyyMMdd형태)
************************************************************************************************/
function gfn_getBeforeYear(sDate)
{
	if(gfn_isNull(sDate)) sDate = gfn_today();

	return gfn_addMonth(sDate, -12);
}

/************************************************************************************************
 * Function : 일년후 날짜 구하는 함수.
 * @param   : sDate - yyyyMMdd형태의 From 일자 (예 : "20121122")
 * Return   : 일년후 날짜(yyyyMMdd형태)
************************************************************************************************/
function gfn_getAfterYear(sDate) 
{
	if(gfn_isNull(sDate)) sDate = gfn_today();

	return gfn_addMonth(sDate, 12);
}

/************************************************************************************************
 * Function : 문자를 날짜로 변환
 * @param   : sDate - yyyyMMdd형태의 From 일자 (예 : "20121122")
 * Return   : Date Object
************************************************************************************************/
function gfn_str2Date(sDate)
{
	if(gfn_isNull(sDate)) sDate = gfn_today();

	return new Date(parseInt(sDate.substr(0, 4)), parseInt(sDate.substr(4, 2))-1, parseInt(sDate.substr(6, 2)));
}

/************************************************************************************************
 * Function : 날짜를 문자로 변환
 * @param   : objDate - Date Object
 * Return   : yyyyMMdd형태의 문자열
************************************************************************************************/
function gfn_date2Str(objDate)
{
	if(objDate == null) return "";

	if(objDate.constructor != Date) return "";

	return objDate.getFullYear() + ((objDate.getMonth()+1) + "").padLeft(2, "0") + (objDate.getDate() + "").padLeft(2, "0");
}

/************************************************************************************************
 * Function : 현재월 1일 만들기.
 * @param   : sDate - yyyyMMdd형태의 From 일자 (예 : "20121122")
 * Return   : 해당월 1일( yyyyMMdd형태의 문자열)
************************************************************************************************/
function gfn_getFirstDate(sDate)
{
	if(gfn_isNull(sDate)) sDate = gfn_today();

	var objDate = gfn_str2Date(sDate);

    return  objDate.getFullYear() + ((objDate.getMonth()+1) + "").padLeft(2, "0") + "01";
}

/************************************************************************************************
 * Function : 현재월 마지막일 만들기
 * @param   : sDate - yyyyMMdd형태의 From 일자 (예 : "20121122")
 * Return   : 해당월 마지막일( yyyyMMdd형태의 문자열)
************************************************************************************************/
function gfn_getLastDate(sDate)
{
	if(gfn_isNull(sDate)) sDate = gfn_today();

	var nDate = gfn_str2Date(sDate.substr(0, 6)+"01").addMonth(1);

	return gfn_addDate(gfn_date2Str(new Date(nDate)), -1);
}

/************************************************************************************************
 * Function : 년월일(yyyyMMdd)을 입력하면 해당 주차를 리턴한다.
 * @param   : sDate - yyyyMMdd형태의 From 일자 (예 : "20121122")
 * Return   : 6자리 년도주차(yyyyWW)
************************************************************************************************/
function gfn_getWeek(sDate)
{
	if(sDate.length != 8 || !isNumeric(sDate)) return "";

	var nYear  = parseInt(sDate.substr(0, 4));
	var nMonth = parseInt(sDate.substr(4, 2));
	var nDay   = parseInt(sDate.substr(6, 8));

	var startAt = 1; ///////////// 일요일 표시 부분 / 0 : 일요일(일월화...) / 1 : 월요일(...금토일)

	if(startAt == 0) nDay = nDay + 1;

	var a = Math.floor((14-nMonth) / 12);
	var y = nYear + 4800 - a;
	var m = nMonth + (12 * a) - 3;
	var b = Math.floor(y/4) - Math.floor(y/100) + Math.floor(y/400);
	var J = nDay + Math.floor(((153 * m) + 2) / 5) + (365 * y) + b - 32045;
	var d4 = (((J + 31741 - (J % 7)) % 146097) % 36524) % 1461;
	var L = Math.floor(d4 / 1460);
	var d1 = ((d4 - L) % 365) + L;
//trace(a + " :: " + y + " :: " + m + " :: " + b + " :: " + J + " :: " + d4 + " :: " + L + " :: " + d1);
	var week = Math.floor(d1/7) + 1;
		week = week.toString();

	if(nMonth == 12 && nDay > 28 && week < 8)
		nYear = nYear + 1;

	return nYear + week.padLeft(2, "0");			
}

/************************************************************************************************
 * Function : 일자 입력 후 Enter 시 해당 년월에 입력 일자를 불여서 값 Return
              - 정상적인 일자가 아닌 경우 이전값으로 설정(예: 20110231)
 * @param   : sDate - yyyyMMdd형태의 From 일자 (예 : "20121122")
 * Return   : 해당 년월에 입력 일자(YYYYMMDD)
************************************************************************************************/
function gfn_getDayConvert(sDate)
{
	var sConV = String(sDate).replace("-", "").trim();
	var sToday = gfn_today();
	var sSetDate 	= "";

	// DD
	if(sConV.length >= 1  && sConV.length <= 2)
		sSetDate = gfn_left(sToday, 6) + gfn_padLeftB(sConV.toString(), 2, "0");
	// MMDD
	else if(sConV.length >= 3  && sConV.length <= 4)
		sSetDate = gfn_left(sToday, 4) + gfn_padLeftB(sConV.toString(), 4, "0");
	// YYMMDD
	else
		sSetDate = gfn_left(sToday, 2) + gfn_padLeftB(sConV.toString(), 6, "0");

	if(gfn_isDate(sSetDate))
		return sSetDate;
	else
		return "";
}

/************************************************************************************************
 * Function : MiPlatform에서 사용하던 Datetime형식으로 변환
              (Date Type을 String으로 변환)
 * @param   : nYear - 년도
 * @param   : nMonth - 월
 * @param   : nDate - 일
 * Return   : 조합한 날짜를 리턴 / String
************************************************************************************************/
function gfn_datetime(nYear, nMonth, nDate)
{
    if (nYear.toString().trim().length >= 5) {
        var sDate    = new String(nYear);
        var nYear    = sDate.substr(0,4);
        var nMonth   = sDate.substr(4,2);
        var nDate    = ((sDate.substr(6,2) == "") ? 1 : sDate.substr(6,2));
        var nHours   = ((sDate.substr(8,2) == "") ? 0 : sDate.substr(8,2));
        var nMinutes = ((sDate.substr(10,2) == "") ? 0 : sDate.substr(10,2));
        var nSeconds = ((sDate.substr(12,2) == "") ? 0 : sDate.substr(12,2));
        
        var objDate = new Date(parseInt(nYear), parseInt(nMonth)-1, parseInt(nDate), parseInt(nHours), parseInt(nMinutes), parseInt(nSeconds));
    } else {
        var objDate = new Date(parseInt(nYear), parseInt(nMonth)-1, parseInt(((nDate == null) ? 1 : nDate)));
    }

    var strYear  = objDate.getYear().toString();
    var strMonth = (objDate.getMonth() + 1).toString();
    var strDate  = objDate.getDate().toString();

    if (strMonth.length == 1)  strMonth  = "0" + strMonth;
    if (strDate.length == 1)   strDate   = "0" + strDate;

    return strYear + strMonth + strDate;
}

/************************************************************************************************
 * Function : 주차의 시작일을 가져온다
 * @param   : strWeek - 주차 (년도+주차) 예-201250 / 2012년도의50주차
 * Return   : 주차의 시작일 / String
************************************************************************************************/
function gfn_setWeekFirstDay(strWeek)
{
	var firstDay,lastDay;	//시작일과 마지막일
	var firstW;				//년도의 첫번째 주차 (계산시 사용)
	var day;				//시작일의 day
	var sYear = strWeek.substr(0,4);
	var sdWeek = toNumber(strWeek.substr(4,2));

	//var endVS2 = toNumber(sYear+"02");

	var endWeek;
	for(var a=31; a>1; a--){
		endWeek = gfn_getWeek(sYear+"12"+String(a).padLeft(2, "0"));
		if(toNumber(endWeek.substr(4, 2)) == 52)
			break;
	}

	//매년 1주차의 firstDay구하기
	for(var i=1; i<=31; i++){
		day = i.toString().padLeft(2,"0");
		firstW = gfn_getWeek(sYear+"01"+day);
		firstDay = sYear+"01"+day;

		if(toNumber(firstW.substr(4, 2)) == 1){
			if(i==1){
				sYear = sYear-1;
				for(var v=25; v<32; v++){
					firstW = gfn_getWeek(sYear+"12"+v);
					firstDay = sYear+"12"+v;

					if(toNumber(firstW.substr(4, 2)) == 1){
						firstDay = sYear+"12"+v;
						i = 31;	//시작일이 계산되었으면 종료하기 위함
						break;
					}
				}
			}
			else{
				break;
			}
		}
	}

	var returnDay = gfn_addDate(firstDay, (sdWeek-1)*7);	//시작일로 부터 주차의 날짜만큼 더해준다.
		
	return returnDay;
}

/************************************************************************************************
 * Function : 해당 Dataset에 해당 시작년도부터 종료년도까지 반기 데이터를 설정
 * @param   : objDs - Dataset Object
 * @param   : sCdColId - Code Column Id
 * @param   : sNmColId - Name Column Id
 * @param   : iFromYear - 시작년도
 * @param   : iToYear - 종료년도
 * @param   : iMonth - 시작월
 * Return   : void
************************************************************************************************/
function gfn_setHalfTerm(objDs:Dataset, sCdColId, sNmColId, iFromYear, iToYear, iMonth)
{
	if(objDs == null) return;
	if(gfn_isNull(iFromYear)) iFromYear = 2006;
	if(gfn_isNull(iFromYear)) iToYear = 2018;
	if(gfn_isNull(iMonth)) iMonth = 11;

	var sStartDate01 = iFromYear + String(iMonth).padLeft(2, "0") + "01";
	var sStartDate02 = gfn_addMonth(sStartDate01, 6);

	var sStartMMdd01 = sStartDate01.substr(4);
	var sStartMMdd02 = sStartDate02.substr(4);
	var sEndMMdd01 = gfn_addDate(sStartDate02, -1).substr(4);
	var sEndMMdd02 = gfn_addDate(sStartDate01, -1).substr(4);
	var iRow = -1;
	var sIdValue = "", sNmValue = "";
	var iYear = 0;

	objDs.clearData();
	for(var i=iFromYear,j=0; i<=iToYear; i++,j++){
		iRow = objDs.addRow();
		
		if(parseInt(sStartMMdd01.substr(0, 2)) > 7){
			iYear = (i + 1);
			sIdValue = iYear + "1";
			sNmValue = sIdValue + "(" + i + sStartMMdd01 + " - " + (i + 1) + sEndMMdd01 + ")";
		}
		else{
			iYear = i;
			sIdValue = iYear + "1";
			sNmValue = sIdValue + "(" + i + sStartMMdd01 + " - " + i + sEndMMdd01 + ")";
		}
		objDs.setColumn(iRow, sCdColId, sIdValue);
		objDs.setColumn(iRow, sNmColId, sNmValue);

		iRow = objDs.addRow();
		sIdValue = iYear + "2";
		sNmValue = sIdValue + "(" + iYear + sStartMMdd02 + " - " ;
		if(parseInt(sStartMMdd02.substr(0, 2)) > 7)
			sNmValue = sNmValue + (iYear + 1) + sEndMMdd02 + ")";
		else
			sNmValue = sNmValue + iYear + sEndMMdd02 + ")";
		objDs.setColumn(iRow, sCdColId, sIdValue);
		objDs.setColumn(iRow, sNmColId, sNmValue);
	}
}

/************************************************************************************************
 * Function : 해당 Dataset에 해당 시작년도부터 종료년도까지 분기 데이터를 설정
 * @param   : objDs - Dataset Object
 * @param   : sCdColId - Code Column Id
 * @param   : sNmColId - Name Column Id
 * @param   : iFromYear - 시작년도
 * @param   : iToYear - 종료년도
 * @param   : iMonth - 시작월
 * Return   : void
************************************************************************************************/
function gfn_setQuarter(objDs:Dataset, sCdColId, sNmColId, iFromYear, iToYear, iMonth, iQuarter)
{
	if(objDs == null) return;
	if(gfn_isNull(iFromYear)) iFromYear = 2006;
	if(gfn_isNull(iFromYear)) iToYear = 2018;
	if(gfn_isNull(iMonth)) iMonth = 11;

	var aStartDate = Array();
	aStartDate[0] = iFromYear + String(iMonth).padLeft(2, "0") + "01"; 
	aStartDate[1] = gfn_addMonth(aStartDate[0], 3);
	aStartDate[2] = gfn_addMonth(aStartDate[1], 3);
	aStartDate[3] = gfn_addMonth(aStartDate[2], 3);

	var aStartMMdd = Array();
	aStartMMdd[0] = aStartDate[0].substr(4);
	aStartMMdd[1] = aStartDate[1].substr(4);
	aStartMMdd[2] = aStartDate[2].substr(4);
	aStartMMdd[3] = aStartDate[3].substr(4);

	var aEndMMdd = Array();
	aEndMMdd[0] = gfn_addDate(aStartDate[1], -1).substr(4);
	aEndMMdd[1] = gfn_addDate(aStartDate[2], -1).substr(4);
	aEndMMdd[2] = gfn_addDate(aStartDate[3], -1).substr(4);
	aEndMMdd[3] = gfn_addDate(aStartDate[0], -1).substr(4);

	var iRow = -1;
	var sIdValue = "", sNmValue = "";
	var iYear = 0;

	objDs.clearData();
	for(var i=iFromYear; i<=iToYear; i++){
		iYear = 0;
		for(var j=0; j<4; j++){
			iRow = objDs.addRow();
			if(parseInt(aStartMMdd[j].substr(0, 2)) > 10){
				iYear = i + 1;
				sIdValue = iYear + String((iQuarter+j)==4 ? 4 : (iQuarter+j)%4);
				sNmValue = sIdValue + "(" + i + aStartMMdd[j] + " - " + iYear + aEndMMdd[j] + ")";
			}
			else{
				if(iYear == 0) iYear = i;
				sIdValue = iYear + String((iQuarter+j)==4 ? 4 : (iQuarter+j)%4);
				sNmValue = sIdValue + "(" + iYear + aStartMMdd[j] + " - " + iYear + aEndMMdd[j] + ")";
			}
			objDs.setColumn(iRow, sCdColId, sIdValue);
			objDs.setColumn(iRow, sNmColId, sNmValue);
		}
	}
}

/************************************************************************************************
 * Function : 날자 시간 계산
 * @param   : sFromDateTime - yyyyMMddhhmiss형식 문자열의 시작 시간
 * @param   : sToDateTime - yyyyMMddhhmiss형식 문자열의 끝 시간
 * @param   : sRtnTp - 결과 값 타입
              (DATETIME_DAY | DATETIME_HOUR | DATETIME_MINUTE | DATETIME_SECOND | DATETIME_MILISECOND)
 * Return   : 계산된 문자열
************************************************************************************************/
function gfn_calcDataTime(sFromDateTime, sToDateTime, sRtnTp)
{
	if(gfn_isNull(sFromDateTime) || gfn_isNull(sToDateTime)) return "";
	if(sFromDateTime.length < 14 || sToDateTime.length < 14) return "";

	var iMilliSec = 1000;
	var iMilliMin = iMilliSec * 60;
	var iMilliHr  = iMilliMin * 60;
	var iMilliDy  = iMilliHr * 24;

	sFromDateTime = String(sFromDateTime);
	sToDateTime = String(sToDateTime);
	var objFromDateTime = new Date(sFromDateTime.substr(0, 4), sFromDateTime.substr(4, 2), sFromDateTime.substr(6, 2),
                                sFromDateTime.substr(8, 2), sFromDateTime.substr(10,2), sFromDateTime.substr(12,2));
    var objToDateTime = new Date(sToDateTime.substr(0, 4), sToDateTime.substr(4, 2), sToDateTime.substr(6, 2),
                                 sToDateTime.substr(8, 2), sToDateTime.substr(10,2), sToDateTime.substr(12,2));
    var nDiffDate = objToDateTime - objFromDateTime;

    switch(sRtnTp){
		case DATETIME_MILISECOND:
			return nDiffDate;
		case DATETIME_SECOND:
			return parseInt((nDiffDate / iMilliSec));
		case DATETIME_MINUTE:
			return parseInt((nDiffDate / iMilliMin));
		case DATETIME_HOUR:
			return parseInt((nDiffDate / iMilliHr));
		default:
			return parseInt(nDiffDate / iMilliDy);
    }

    return sRetVal;
}

/************************************************************************************************
 * Function : 주차 계산
 * @param   : sFromWeekOfYear - yyyyWW형식 문자열의 시작 시간
 * @param   : sToWeekOfYear - yyyyWW형식 문자열의 끝 시간
 * Return   : 계산된 차이 주차
************************************************************************************************/
function gfn_calcWeekOfYear(sFromWeekOfYear, sToWeekOfYear)
{
    if(gfn_isNull(sFromWeekOfYear) || sFromWeekOfYear.length != 6) return;
    if(gfn_isNull(sToWeekOfYear) || sToWeekOfYear.length != 6) return;

    var iFromYear = parseInt(sFromWeekOfYear.substr(0, 4));
    var iFromWeek = parseInt(sFromWeekOfYear.substr(4, 6));
    var iToYear = parseInt(sToWeekOfYear.substr(0, 4));
    var iToWeek = parseInt(sToWeekOfYear.substr(4, 6));

    return (iToWeek + ((iToYear - iFromYear) * 52)) - iFromWeek;
}

/************************************************************************************************
 * Function : 년도별 주차와 주차 시작일, 주차 종료일을 Dataset으로 가져온다.
 * @param   : objDS - 주차를 담을 데이터셋
 * @param   : sWeekColId - 주차 Column 정보
 * @param   : sStartColId - 주차 시작일 Column 정보
 * @param   : sEndColId - 주차 종료일 Column 정보
 * @param   : strYear - 해당년도
 * Return   : 차이 일수
************************************************************************************************/
function gfn_setWeekDS(objDS, sWeekColId, sStartColId, sEndColId, sYear)
{
	if(objDS == null) return false;
	if(gfn_isNull(sWeekColId)) return false;
	if(gfn_isNull(sStartColId)) return false;
	if(gfn_isNull(sEndColId)) return false;
	if(gfn_isNull(sYear)) sYear = gfn_today().substr(0, 4);

	var sFirstDay = gfn_setWeekFirstDay(sYear + "01");;
	var sLastDay;

	objDS.clearData();

	for(var o=1; o<=52; o++){
		var nRow = objDS.addRow();
		sLastDay = gfn_addDate(sFirstDay, 6);

		objDS.setColumn(nRow, sWeekColId, sYear + String(o).padLeft(2,"0"));
		objDS.setColumn(nRow, sStartColId, sFirstDay);
		objDS.setColumn(nRow, sEndColId, sLastDay);

		sFirstDay = gfn_addDate(sLastDay, 1);
	}

	return true;
}

/************************************************************************************************
 * Function : 년도별 주차와 주차 시작일, 주차 종료일을 Dataset으로 가져온다.
 * @param   : objDS - 주차를 담을 데이터셋
 * @param   : sCodeColId - 주차 Column 정보
 * @param   : sDataColId - 주차 Column 정보
 * @param   : strYear - 해당년도
 * Return   : boolean
************************************************************************************************/
function gfn_setWeekCodeDs(objDS, sCodeColId, sDataColId, sYear)
{
	if(objDS == null) return false;
	if(gfn_isNull(sCodeColId)) return false;
	if(gfn_isNull(sDataColId)) return false;
	if(gfn_isNull(sYear)) sYear = gfn_today().substr(0, 4);

	var sFirstDay = gfn_setWeekFirstDay(sYear + "01");
	var sLastDay;

	objDS.clearData();
	for(var o=1; o<=52; o++){
		sLastDay = gfn_addDate(sFirstDay, 6);
		var nRow = objDS.addRow();

		objDS.setColumn(nRow, sCodeColId, sYear+ String(o).padLeft(2,"0"));
		objDS.setColumn(nRow, sDataColId, String(o).padLeft(2,"0")+"W-"+sYear+"("+sFirstDay.substr(4, 2)+"-"+sFirstDay.substr(6, 2) + "~" +sLastDay.substr(4, 2)+"-"+sLastDay.substr(6, 2)+ ")");

		sFirstDay = gfn_addDate(sLastDay, 1);
	}
	
	return true;
}
/************************************************************************************************
 * Function : 양력 nYear에 해당하는 년도의 법정 공휴일(양력) List 모두 구하기
 * @param   : nYear - nYear에 해당하는 년도 ( 예 : 2012 )
  * Return   : - 성공 = 공휴일 List Array ==> 각 Array[i]="yyyyMMdd공휴일명" 으로 return된다.
                ( 예 : Array[0] = "20120101신정" )
               - 실패 = 빈 Array
************************************************************************************************/
function gfn_getHolidays(nYear)
{
	var nYear;
	var aHoliday = new Array();

	if( gfn_isNull(nYear) )		return aHoliday;
	
	/////// 음력 체크
	// 구정
	aHoliday[0] = Lunar2Solar( "0" + (nYear-1) + "1230" ) + "설날";
	aHoliday[1] = gfn_addDate(aHoliday[0], 1) + "설날";
	aHoliday[2] = gfn_addDate(aHoliday[1], 1) + "설날";
	// 석가탄신일
	aHoliday[3] = Lunar2Solar( "0" + nYear + "0408" ) + "석가탄신일";
	// 추석
	aHoliday[4] = Lunar2Solar( "0" + nYear + "0814" ) + "추석";
	aHoliday[5] = gfn_addDate(aHoliday[4], 1) + "추석";
	aHoliday[6] = gfn_addDate(aHoliday[5], 1) + "추석";	

	/////// 양력 체크
	aHoliday[7] = nYear+"0101" + "신정";
	aHoliday[8] = nYear+"0301" + "삼일절";
	aHoliday[9] = nYear+"0505" + "어린이날";	
	aHoliday[10] = nYear+"0606" + "현충일";		
	aHoliday[11] = nYear+"0815" + "광복절";			
	aHoliday[12] = nYear+"1225" + "성탄절";			
	
	return aHoliday.sort();
}

/************************************************************************************************
 * Function : 양력을 음력으로 변환해주는 함수 (처리가능 기간  1841 - 2043년)
 * @param   : sDate - yyyyMMdd형태의 양력일자 ( 예 : "20121122" )
  * Return   :  - 성공 = Flag(1 Byte) + (yyyyMMdd형태의 음력일자)
			      ( Flag : 평달 = "0", 윤달 = "1" )
			    - 실패 = "" ( 1841 ~ 2043 범위 오류시 )
************************************************************************************************/
function gfn_solar2Lunar(sDate)
{
	var sMd = "31,0,31,30,31,30,31,31,30,31,30,31";
	var aMd = new Array();

	var aBaseInfo = new Array();
	var aDt = new Array();		// 매년의 음력일수를 저장할 배열 변수
	var td;					// 음력일을 계산하기 위해 양력일과의 차이를 저장할 변수
	var td1;					// 1840년까지의 날수
	var td2;					// 현재까지의 날수
	var mm;					// 임시변수
	var nLy, nLm, nLd;			// 계산된 음력 년, 월, 일을 저장할 변수
	var sLyoon;					// 현재월이 윤달임을 표시

	if( gfn_isNull(sDate) )		return "";
	
	sY = parseInt(sDate.substr(0,4), 10);
	sM = parseInt(sDate.substr(4,2), 10);
	sD = parseInt(sDate.substr(6,2), 10);
	if( sY < 1841 || sY > 2043 )	return "";

	aBaseInfo = _SolarBase();
	aMd = sMd.split(",");
	if( IsLeapYear(sDate) == true )					
		aMd[1] = 29;
	else
		aMd[1] = 28;	
	
	td1 = 672069; 				 // 672069 = 1840 * 365 + 1840/4 - 1840/100 + 1840/400 + 23  //1840년까지 날수
		
	// 1841년부터 작년까지의 날수
	td2 = (sY - 1) * 365 + parseInt((sY - 1)/4) - parseInt((sY - 1)/100) + parseInt((sY - 1)/400);
		
	// 전월까지의 날수를 더함
	for( i = 0 ; i <= sM - 2 ; i++ )
		td2 = td2 + parseInt(aMd[i]);

	// 현재일까지의 날수를 더함
	td2 = td2 + sD;

	// 양력현재일과 음력 1840년까지의 날수의 차이
	td = td2 - td1 + 1;
	
	// 1841년부터 음력날수를 계산
	for( i = 0 ; i <= sY - 1841 ; i++ )
	{
		aDt[i] = 0;
		for( j = 0 ; j <= 11 ; j++ )
		{
			switch( parseInt(aBaseInfo[i*12 + j]) )
			{
				case 1 : mm = 29;
						 break;
				case 2 : mm = 30;
						 break;				
				case 3 : mm = 58;	// 29 + 29
						 break;				
				case 4 : mm = 59;	// 29 + 30
						 break;				
				case 5 : mm = 59;	// 30 + 29
						 break;				
				case 6 : mm = 60;	// 30 + 30
						 break;				
			}
			aDt[i] = aDt[i] + mm;
		}
	}
		
	// 1840년 이후의 년도를 계산 - 현재까지의 일수에서 위에서 계산된 1841년부터의 매년 음력일수를 빼가면수 년도를 계산
	nLy = 0;
	do
	{
		td = td - aDt[nLy];
		nLy = nLy + 1;
	}
	while(td > aDt[nLy]);
	
	nLm = 0;
	sLyoon = "0";			// 현재월이 윤달임을 표시할 변수 - 기본값 평달
	do
	{
		if( parseInt(aBaseInfo[nLy*12 + nLm]) <= 2 )
		{
			mm = parseInt(aBaseInfo[nLy*12 + nLm]) + 28;
			if( td > mm )
			{
				td = td - mm;
				nLm = nLm + 1;
			}
			else
				break;
		}
		else
		{
			switch( parseInt(aBaseInfo[nLy*12 + nLm]) )
			{
				case 3 :
					m1 = 29;
					m2 = 29;
					break;
				case 4 : 
					m1 = 29;
					m2 = 30;
					break;					
				case 5 : 
					m1 = 30;
					m2 = 29;
					break;					
				case 6 : 
					m1 = 30;
					m2 = 30;
					break;					
			}

			if( td > m1 )
			{
				td = td - m1;
				if( td > m2 )
				{
					td = td - m2;
					nLm = nLm + 1;
				}
				else
				{
					sLyoon = "1";
				}
			}
			else
			{
				break;
			}
		}
	}
	while(1);
	
	nLy = nLy + 1841;
	nLm = nLm + 1;
	nLd = td;

	return sLyoon+nLy+gfn_right("0" + nLm, 2)+gfn_right("0" + nLd, 2);
}

/************************************************************************************************
 * Function : 음력을 양력으로 변환해주는 함수 (처리가능 기간  1841 - 2043년)
 * @param   : sDate - Flag(1 Byte)+yyyyMMdd형태의 음력일자 ( 예 : "020121122" )
				( Flag : 평달 = "0", 윤달 = "1" )
  * Return   :  - 성공 = yyyyMMdd형태의 양력일자
			    - 실패 = null 
			    - 1841 ~ 2043 범위 오류의 경우
			    - sDate가 9자리가 아닐경우
			    - sDate의 첫자리 Flag가 "0"도 아니고 "1"도 아닌 경우
************************************************************************************************/
function gfn_lunar2Solar(sDate)
{
	var sMd = "31,0,31,30,31,30,31,31,30,31,30,31";
	var aMd = new Array();	
	var aBaseInfo = new Array();	
	
	var nLy, nLm, nLd, sLflag;		// 전해온 음력 인자값을 저장할 년, 월, 일, 윤달여부 임시변수
	var nSy, nSm, nSd;				// 계산된 양력 년, 월, 일을 저장할 변수
	var y1, m1, i, j, y2, y3;	// 임시변수	
	var leap;

	if( gfn_isNull(sDate) )			return "";
	if( sDate.length != 9 )		return "";
	
	sLflag = sDate.substr(0,1);
	nLy = parseInt(sDate.substr(1,4), 10);
	nLm = parseInt(sDate.substr(5,2), 10);
	nLd = parseInt(sDate.substr(7,2), 10);
	if( nLy < 1841 || nLy > 2043 )			return "";
	if( sLflag != "0" && sLflag != "1" )	return "";
		
	aBaseInfo = _SolarBase();
	aMd = sMd.split(",");
	if( IsLeapYear(sDate.substr(1,8)) == true )					
		aMd[1] = 29;
	else
		aMd[1] = 28;	
		
	y1 = nLy - 1841;
	m1 = nLm - 1;
	leap = 0;
	if( parseInt(aBaseInfo[y1*12 + m1]) > 2 )
		leap = IsLeayYear(nLy+"0101");
	
	if( leap == 1 )
	{
		switch( parseInt(aBaseInfo[y1*12 + m1]) )
		{
			case 3 : mm = 29;
					 break;
			case 4 : mm = 30;
					 break;			
			case 5 : mm = 29;
					 break;			
			case 6 : mm = 30;
					 break;
		}
	}
	else
	{
		switch( parseInt(aBaseInfo[y1*12 + m1]) )
		{
			case 1 : mm = 29;
					 break;			
			case 2 : mm = 30;
					 break;			
			case 3 : mm = 29;
					 break;			
			case 4 : mm = 29;
					 break;			
			case 5 : mm = 30;
					 break;			
			case 6 : mm = 30;
					 break;			
		}
	}

	td = 0;
	for( i = 0 ; i <= y1 - 1 ; i++ )
	{
		for( j = 0 ; j <= 11 ; j++ )
		{
			switch( parseInt(aBaseInfo[i*12 + j]) )
			{
				case 1 : td = td + 29;
						 break;
				case 2 : td = td + 30;
						 break;				
				case 3 : td = td + 58;
						 break;				
				case 4 : td = td + 59;
						 break;				
				case 5 : td = td + 59;
						 break;				
				case 6 : td = td + 60;
						 break;				
			}
		}
	}

	for( j = 0 ; j <= m1 - 1 ; j++ )
	{
		switch( parseInt(aBaseInfo[y1*12 + j]) )
		{
			case 1 : td = td + 29;
					 break;			
			case 2 : td = td + 30;
					 break;						
			case 3 : td = td + 58;
					 break;						
			case 4 : td = td + 59;
					 break;						
			case 5 : td = td + 59;
					 break;						
			case 6 : td = td + 60;
					 break;						
		}
	}

	if( leap == 1 )
	{
		switch( parseInt(aBaseInfo[y1*12 + m1]) )
		{
			case 3 : mm = 29;
					 break;						
			case 4 : mm = 29;
					 break;						
			case 5 : mm = 30;
					 break;						
			case 6 : mm = 30;
					 break;						
		}
	}
	
	td = td + nLd + 22;
	
	if( sLflag == "1" )
	{
		switch( parseInt(aBaseInfo[y1*12 + m1]) )
		{
			case 3 : td = td + 29;
					 break;						
			case 4 : td = td + 30;
					 break;						
			case 5 : td = td + 29;
					 break;						
			case 6 : td = td + 30;
					 break;						
		}
	}
	
	y1 = 1840;
	do
	{
		y1 = y1 + 1;
		leap = IsLeapYear(y1+"0101");

		if( leap == 1 )
			y2 = 366;
		else
			y2 = 365;

		if( td <= y2 )
			break;
			
		td = td - y2;
	}
	while(1);

	nSy = y1;
	aMd[1] = y2 - 337;
	m1 = 0;
	do
	{
		m1 = m1 + 1;
		if( td <= parseInt(aMd[m1-1]) )
			break;
		td = td - parseInt(aMd[m1-1]);
	}
	while(1);
	
	nSm = m1;
	nSd = td;
	y3 = nSy;
	td = y3 * 365 + parseInt(y3/4) - parseInt(y3/100) + parseInt(y3/400);
	for( i = 0 ; i <= nSm - 1 ; i++ )
		td = td + parseInt(aMd[i]);

	td = td + nSd;

	return y3 + gfn_right("0" + nSm, 2)+gfn_right("0" + nSd, 2);
}

 /************************************************************************************************
 * Function :  윤년여부 확인
   @param : sDate : yyyyMMdd형태의 날짜 ( 예 : "20121122" )
   return 
    - sDate가 윤년인 경우 = true
    - sDate가 윤년이 아닌 경우 = false
    - sDate가 입력되지 않은 경우 = false
************************************************************************************************/
function gfn_isLeapYear(sDate)
{
    var ret;
    var nY;
    
    if( gfn_isNull(sDate) )		return false;
    
    nY = parseInt(sDate.substring(0,4), 10);

    if ((nY % 4) == 0) 
    {
        if ((nY % 100) != 0 || (nY % 400) == 0) 
            ret = true;
        else 
            ret = false;
    } 
    else 
        ret = false;
  
    return ret;
}

 /************************************************************************************************
 * Function :  각 월별 음력 기준 정보를 처리하는 함수(처리가능 기간  1841 - 2043년)
     단, 내부에서 사용하는 함수임    
   return 
    - 성공 = 음력 기준정보
    - 실패 = 
************************************************************************************************/
function _SolarBase()
{
	var kk;
	
	//1841
	kk = "1,2,4,1,1,2,1,2,1,2,2,1,";
	kk += "2,2,1,2,1,1,2,1,2,1,2,1,";
	kk += "2,2,2,1,2,1,4,1,2,1,2,1,";
	kk += "2,2,1,2,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,2,1,2,1,2,1,2,1,";
	kk += "2,1,2,1,5,2,1,2,2,1,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,2,3,2,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,1,2,1,1,2,2,1,2,";
	//1851
	kk += "2,2,1,2,1,1,2,1,2,1,5,2,";
	kk += "2,1,2,2,1,1,2,1,2,1,1,2,";
	kk += "2,1,2,2,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,1,2,5,2,1,2,1,2,";
	kk += "1,1,2,1,2,2,1,2,2,1,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,5,2,1,2,1,2,2,2,";
	kk += "1,2,1,1,2,1,1,2,2,1,2,2,";
	kk += "2,1,2,1,1,2,1,1,2,1,2,2,";
	kk += "2,1,6,1,1,2,1,1,2,1,2,2,";
	//1861
	kk += "1,2,2,1,2,1,2,1,2,1,1,2,";
	kk += "2,1,2,1,2,2,1,2,2,3,1,2,";
	kk += "1,2,2,1,2,1,2,2,1,2,1,2,";
	kk += "1,1,2,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,1,2,4,1,2,2,1,2,2,1,";
	kk += "2,1,1,2,1,1,2,2,1,2,2,2,";
	kk += "1,2,1,1,2,1,1,2,1,2,2,2,";
	kk += "1,2,2,3,2,1,1,2,1,2,2,1,";
	kk += "2,2,2,1,1,2,1,1,2,1,2,1,";
	kk += "2,2,2,1,2,1,2,1,1,5,2,1,";
	//1871
	kk += "2,2,1,2,2,1,2,1,2,1,1,2,";
	kk += "1,2,1,2,2,1,2,1,2,2,1,2,";
	kk += "1,1,2,1,2,4,2,1,2,2,1,2,";
	kk += "1,1,2,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,1,2,1,1,2,1,2,2,2,1,";
	kk += "2,2,1,1,5,1,2,1,2,2,1,2,";
	kk += "2,2,1,1,2,1,1,2,1,2,1,2,";
	kk += "2,2,1,2,1,2,1,1,2,1,2,1,";
	kk += "2,2,4,2,1,2,1,1,2,1,2,1,";
	kk += "2,1,2,2,1,2,2,1,2,1,1,2,";
	//1881
	kk += "1,2,1,2,1,2,5,2,2,1,2,1,";
	kk += "1,2,1,2,1,2,1,2,2,1,2,2,";
	kk += "1,1,2,1,1,2,1,2,2,2,1,2,";
	kk += "2,1,1,2,3,2,1,2,2,1,2,2,";
	kk += "2,1,1,2,1,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,2,1,1,2,1,2,1,2,";
	kk += "2,2,1,5,2,1,1,2,1,2,1,2,";
	kk += "2,1,2,2,1,2,1,1,2,1,2,1,";
	kk += "2,1,2,2,1,2,1,2,1,2,1,2,";
	kk += "1,5,2,1,2,2,1,2,1,2,1,2,";
	//1891
	kk += "1,2,1,2,1,2,1,2,2,1,2,2,";
	kk += "1,1,2,1,1,5,2,2,1,2,2,2,";
	kk += "1,1,2,1,1,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,1,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,5,1,2,1,2,1,2,1,";
	kk += "2,2,2,1,2,1,1,2,1,2,1,2,";
	kk += "1,2,2,1,2,1,2,1,2,1,2,1,";
	kk += "2,1,5,2,2,1,2,1,2,1,2,1,";
	kk += "2,1,2,1,2,1,2,2,1,2,1,2,";
	kk += "1,2,1,1,2,1,2,5,2,2,1,2,";
	//1901
	kk += "1,2,1,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,2,1,1,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,3,2,1,1,2,2,1,2,";
	kk += "2,2,1,2,1,1,2,1,1,2,2,1,";
	kk += "2,2,1,2,2,1,1,2,1,2,1,2,";
	kk += "1,2,2,4,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,1,2,2,1,2,1,2,1,";
	kk += "2,1,1,2,2,1,2,1,2,2,1,2,";
	kk += "1,5,1,2,1,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,2,1,2,2,2,1,";
	//1911
	kk += "2,1,2,1,1,5,1,2,2,1,2,2,";
	kk += "2,1,2,1,1,2,1,1,2,2,1,2,";
	kk += "2,2,1,2,1,1,2,1,1,2,1,2,";
	kk += "2,2,1,2,5,1,2,1,2,1,1,2,";
	kk += "2,1,2,2,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,1,2,2,1,2,1,2,1,";
	kk += "2,3,2,1,2,2,1,2,2,1,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,5,2,2,1,2,2,";
	kk += "1,2,1,1,2,1,1,2,2,1,2,2,";
	//1921
	kk += "2,1,2,1,1,2,1,1,2,1,2,2,";
	kk += "2,1,2,2,3,2,1,1,2,1,2,2,";
	kk += "1,2,2,1,2,1,2,1,2,1,1,2,";
	kk += "2,1,2,1,2,2,1,2,1,2,1,1,";
	kk += "2,1,2,5,2,1,2,2,1,2,1,2,";
	kk += "1,1,2,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,1,2,2,";
	kk += "1,5,1,2,1,1,2,2,1,2,2,2,";
	kk += "1,2,1,1,2,1,1,2,1,2,2,2,";
	kk += "1,2,2,1,1,5,1,2,1,2,2,1,";
	//1931
	kk += "2,2,2,1,1,2,1,1,2,1,2,1,";
	kk += "2,2,2,1,2,1,2,1,1,2,1,2,";
	kk += "1,2,2,1,6,1,2,1,2,1,1,2,";
	kk += "1,2,1,2,2,1,2,2,1,2,1,2,";
	kk += "1,1,2,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,4,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,1,2,1,1,2,1,2,2,2,1,";
	kk += "2,2,1,1,2,1,4,1,2,2,1,2,";
	kk += "2,2,1,1,2,1,1,2,1,2,1,2,";
	kk += "2,2,1,2,1,2,1,1,2,1,2,1,";
	//1941
	kk += "2,2,1,2,2,4,1,1,2,1,2,1,";
	kk += "2,1,2,2,1,2,2,1,2,1,1,2,";
	kk += "1,2,1,2,1,2,2,1,2,2,1,2,";
	kk += "1,1,2,4,1,2,1,2,2,1,2,2,";
	kk += "1,1,2,1,1,2,1,2,2,2,1,2,";
	kk += "2,1,1,2,1,1,2,1,2,2,1,2,";
	kk += "2,5,1,2,1,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,2,1,1,2,1,2,1,2,";
	kk += "2,2,1,2,1,2,3,2,1,2,1,2,";
	kk += "2,1,2,2,1,2,1,1,2,1,2,1,";
	//1951
	kk += "2,1,2,2,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,4,2,1,2,1,2,1,2,";
	kk += "1,2,1,1,2,2,1,2,2,1,2,2,";
	kk += "1,1,2,1,1,2,1,2,2,1,2,2,";
	kk += "2,1,4,1,1,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,1,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,2,1,1,5,2,1,2,2,";
	kk += "1,2,2,1,2,1,1,2,1,2,1,2,";
	kk += "1,2,2,1,2,1,2,1,2,1,2,1,";
	kk += "2,1,2,1,2,5,2,1,2,1,2,1,";
	//1961
	kk += "2,1,2,1,2,1,2,2,1,2,1,2,";
	kk += "1,2,1,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,2,3,2,1,2,1,2,2,2,1,";
	kk += "2,1,2,1,1,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,1,1,2,1,1,2,2,1,";
	kk += "2,2,5,2,1,1,2,1,1,2,2,1,";
	kk += "2,2,1,2,2,1,1,2,1,2,1,2,";
	kk += "1,2,2,1,2,1,5,2,1,2,1,2,";
	kk += "1,2,1,2,1,2,2,1,2,1,2,1,";
	kk += "2,1,1,2,2,1,2,1,2,2,1,2,";
	//1971
	kk += "1,2,1,1,5,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,2,1,1,2,1,1,2,2,2,1,";
	kk += "2,2,1,5,1,2,1,1,2,2,1,2,";
	kk += "2,2,1,2,1,1,2,1,1,2,1,2,";
	kk += "2,2,1,2,1,2,1,5,2,1,1,2,";
	kk += "2,1,2,2,1,2,1,2,1,2,1,1,";
	kk += "2,2,1,2,1,2,2,1,2,1,2,1,";
	kk += "2,1,1,2,1,6,1,2,2,1,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,1,2,2,";
	//1981
	kk += "1,2,1,1,2,1,1,2,2,1,2,2,";
	kk += "2,1,2,3,2,1,1,2,2,1,2,2,";
	kk += "2,1,2,1,1,2,1,1,2,1,2,2,";
	kk += "2,1,2,2,1,1,2,1,1,5,2,2,";
	kk += "1,2,2,1,2,1,2,1,1,2,1,2,";
	kk += "1,2,2,1,2,2,1,2,1,2,1,1,";
	kk += "2,1,2,2,1,5,2,2,1,2,1,2,";
	kk += "1,1,2,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,1,2,1,2,1,2,2,1,2,2,";
	kk += "1,2,1,1,5,1,2,1,2,2,2,2,";
	//1991
	kk += "1,2,1,1,2,1,1,2,1,2,2,2,";
	kk += "1,2,2,1,1,2,1,1,2,1,2,2,";
	kk += "1,2,5,2,1,2,1,1,2,1,2,1,";
	kk += "2,2,2,1,2,1,2,1,1,2,1,2,";
	kk += "1,2,2,1,2,2,1,5,2,1,1,2,";
	kk += "1,2,1,2,2,1,2,1,2,2,1,2,";
	kk += "1,1,2,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,1,2,3,2,2,1,2,2,2,1,";
	kk += "2,1,1,2,1,1,2,1,2,2,2,1,";
	kk += "2,2,1,1,2,1,1,2,1,2,2,1,";
	//2001
	kk += "2,2,2,3,2,1,1,2,1,2,1,2,";
	kk += "2,2,1,2,1,2,1,1,2,1,2,1,";
	kk += "2,2,1,2,2,1,2,1,1,2,1,2,";
	kk += "1,5,2,2,1,2,1,2,2,1,1,2,";
	kk += "1,2,1,2,1,2,2,1,2,2,1,2,";
	kk += "1,1,2,1,2,1,5,2,2,1,2,2,";
	kk += "1,1,2,1,1,2,1,2,2,2,1,2,";
	kk += "2,1,1,2,1,1,2,1,2,2,1,2,";
	kk += "2,2,1,1,5,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,2,1,1,2,1,2,1,2,";
	//2011
	kk += "2,1,2,2,1,2,1,1,2,1,2,1,";
	kk += "2,1,6,2,1,2,1,1,2,1,2,1,";
	kk += "2,1,2,2,1,2,1,2,1,2,1,2,";
	kk += "1,2,1,2,1,2,1,2,5,2,1,2,";
	kk += "1,2,1,1,2,1,2,2,2,1,2,2,";
	kk += "1,1,2,1,1,2,1,2,2,1,2,2,";
	kk += "2,1,1,2,3,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,1,1,2,1,2,1,2,2,";
	kk += "2,1,2,1,2,1,1,2,1,2,1,2,";
	kk += "2,1,2,5,2,1,1,2,1,2,1,2,";
	//2021
	kk += "1,2,2,1,2,1,2,1,2,1,2,1,";
	kk += "2,1,2,1,2,2,1,2,1,2,1,2,";
	kk += "1,5,2,1,2,1,2,2,1,2,1,2,";
	kk += "1,2,1,1,2,1,2,2,1,2,2,1,";
	kk += "2,1,2,1,1,5,2,1,2,2,2,1,";
	kk += "2,1,2,1,1,2,1,2,1,2,2,2,";
	kk += "1,2,1,2,1,1,2,1,1,2,2,2,";
	kk += "1,2,2,1,5,1,2,1,1,2,2,1,";
	kk += "2,2,1,2,2,1,1,2,1,1,2,2,";
	kk += "1,2,1,2,2,1,2,1,2,1,2,1,";
	//2031
	kk += "2,1,5,2,1,2,2,1,2,1,2,1,";
	kk += "2,1,1,2,1,2,2,1,2,2,1,2,";
	kk += "1,2,1,1,2,1,5,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,2,1,2,2,2,1,";
	kk += "2,1,2,1,1,2,1,1,2,2,1,2,";
	kk += "2,2,1,2,1,4,1,1,2,1,2,2,";
	kk += "2,2,1,2,1,1,2,1,1,2,1,2,";
	kk += "2,2,1,2,1,2,1,2,1,1,2,1,";
	kk += "2,2,1,2,5,2,1,2,1,2,1,1,";
	kk += "2,1,2,2,1,2,2,1,2,1,2,1,";
	//2041
	kk += "2,1,1,2,1,2,2,1,2,2,1,2,";
	kk += "1,5,1,2,1,2,1,2,2,2,1,2,";
	kk += "1,2,1,1,2,1,1,2,2,1,2,2";
	
	var arr = new Array();
	arr = kk.split(",");
	
	return arr;
}
]]></Script>

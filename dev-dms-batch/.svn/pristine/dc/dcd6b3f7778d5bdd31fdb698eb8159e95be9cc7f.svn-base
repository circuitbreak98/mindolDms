package dms.nr;

import java.util.HashMap;
import java.util.Map;

import nexcore.framework.bat.IBatchContext;

import org.apache.commons.logging.Log;

import nexcore.framework.bat.base.AbsBatchComponent;
import nexcore.framework.bat.base.AbsRecordHandler;
import nexcore.framework.bat.base.AutoCommitRecordHandler;
import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecord;
import nexcore.framework.core.exception.BizRuntimeException;
import nexcore.framework.core.util.DateUtils;
import nexcore.framework.core.util.StringUtils;

/**
 * <ul>
 * <li>업무 그룹명 : dms/신규R</li>
 * <li>서브 업무명 : DBR017</li>
 * <li>설  명 : </li>
 * <li>작성일 : 2015-08-20 11:21:37</li>
 * <li>작성자 : 안진갑 (bella21cjk)</li>
 * </ul>
 */
public class DBR017 extends AbsBatchComponent {
    private Log log;
    private int processCnt = 0;
    private String taskNo = "";
    private int totCnt = 0;
    private String procFileName = "";
    private AutoCommitRecordHandler rh = null;
    
    public DBR017() {
        super();
    }

    /**
     * 배치 전처리 메소드. 
     * 여기서 Exception 발생시 execute() 메소드는 실행되지 않고, afterExecute() 는 실행됨
     */
    /**
     * 배치 전처리 메소드. 
     * 여기서 Exception 발생시 execute() 메소드는 실행되지 않고, afterExecute() 는 실행됨
     */
    public void beforeExecute(IBatchContext context) {
        log = getLog(context);
        
        processCnt = 0;
        taskNo = "";
        totCnt = 0;
        procFileName = "";
        
        IOnlineContext    onlineCtx  = makeOnlineContext(context);
        IDataSet reqDS = new DataSet();
        IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "fInqTaskNoSeq", reqDS, onlineCtx);
        taskNo = resDS.getField("TASK_NO");
        
        reqDS.putField("TASK_DT", DateUtils.getCurrentDate());
        reqDS.putField("TASK_ID", context.getInParameter("TASK_ID"));
        reqDS.putField("TASK_NO", taskNo);
        reqDS.putField("TASK_NM", context.getInParameter("TASK_NM"));
        reqDS.putField("GRP_ID", "NR");
        reqDS.putField("INST_CD", "DMS");
        reqDS.putField("BAT_TASK_PROC_ST_CD", "B");
        reqDS.putField("PROC_CNT", "0");
        reqDS.putField("FS_REG_USER_ID", "BAT");
        reqDS.putField("LS_CHG_USER_ID", "BAT");
        
        IDataSet resDS2 = callOnlineBizComponent("sc.SCSBase", "fRegBatTaskOpHst", reqDS, onlineCtx);

        Log log = getLog(context);
        if(log.isDebugEnabled()) {
            log.debug("공유컴포넌트 호출 결과:");
            log.debug(resDS);
        }   
    }

    /**
     * 배치 메인 메소드
     */
    public void execute(final IBatchContext context) {
        // 트랜잭션 시작
        txBegin();  
        dbStartSession();
        //dbBeginBatch();
        
        Map<String, String> paramMap = new HashMap<String, String>();
        paramMap.put("PROC_DT", context.getInParameter("PROC_DT"));    //처리일
        
        dbSelect("SIFInsuScrbChg", paramMap, makeRecordHandler(context), context); //DB 조회                
        
        // 트랜잭션 커밋      
        //dbEndBatch();
        dbEndSession();
        txCommit(); 
    }
    
    public AutoCommitRecordHandler makeRecordHandler(IBatchContext context) {
        rh = new AutoCommitRecordHandler(this, context,  dbNewSession(context, false)) {
            
            @SuppressWarnings("unchecked")
            @Override
            public void handleRecord(IRecord row) {
                context.setProgressCurrent(getCurrentRecordCount()); // 진행률 표시
                context.getLogger().debug("########### : " + row);
                IDataSet reqDs = new DataSet();
                reqDs.putFieldMap(row);
                
                //계약별 보증보험번호 유효성체크
                IRecord cntRd = dbSelectSingle("SChkInsureMgmtNo", reqDs.getFieldMap(), context);
                if( StringUtils.isNotEmpty(cntRd.get("UKEY_INSURE_MGMT_NO")) 
                    && !reqDs.getField("INSU_MGMT_NO").equals(cntRd.get("UKEY_INSURE_MGMT_NO")) ){
                    throw new BizRuntimeException("유효한 보증보험관리번호가 아닙니다. 보증보험관리번호 : " + reqDs.getField("INSU_MGMT_NO"));
                }
                //보증보험 가입건수, 해지건수 조회
                cntRd = dbSelectSingle("SInsuUkeyScrbCnt", reqDs.getFieldMap(), context);  
                
                if( "03".equals(reqDs.getField("OP_PROC_CL_CD")) || "02".equals(reqDs.getField("OP_PROC_CL_CD")) ){ //변경, 해지시 가입데이타가 없으면 예외처리                                      
                    if( cntRd.getInt("SCRB_CNT") == 0 ){
                        throw new BizRuntimeException("가입데이타가 없어 변경/해지가 불가능합니다. 보증보험관리번호 : " + reqDs.getField("INSU_MGMT_NO")); 
                    }
                }
                
                if( "01".equals(reqDs.getField("OP_PROC_CL_CD")) ){
                    if( cntRd.getInt("SCRB_CNT") > 0 ){
                        throw new BizRuntimeException("가입데이타가 있어 가입이 불가능 합니다. 보증보험관리번호 : " + reqDs.getField("INSU_MGMT_NO")); 
                    }
                }

                if( "03".equals(reqDs.getField("OP_PROC_CL_CD")) ){
                    if( cntRd.getInt("TERM_CNT") > 0 ){
                        throw new BizRuntimeException("해지데이타가 있어 해지가 불가능 합니다. 보증보험관리번호 : " + reqDs.getField("INSU_MGMT_NO")); 
                    }
                }
                
                IRecord insuScrbAmtRd = dbSelectSingle("SInsuScrbAmt", reqDs.getFieldMap(), context);
                reqDs.putField("INSU_SCRB_AMT", StringUtils.nvl(insuScrbAmtRd.get("PRCH_AMT"), "0"));
                reqDs.putField("CBACK_INSURE_FEE", "0");
                
                if( "03".equals(reqDs.getField("OP_PROC_CL_CD")) ){ //해지 환급보험료 계산                   
                    IRecord cBackInuserFeeRd = dbSelectSingle("SCbackInsureFee", reqDs.getFieldMap(), context);
                    
                    reqDs.putField("CBACK_INSURE_FEE", cBackInuserFeeRd.get("CBACK_INSURE_FEE"));                     
                }
                dbInsert("IInsuUkey", reqDs.getFieldMap(), context);
                
                dbUpdate("UIFInsuScrbChg", row, context);   //인터페이스테이블 처리상태 변경
                
                processCnt++;
            }            
        };
        
        rh.setAddBatchMode(false);
        rh.setCommitCount(1);
        rh.setStopWhenException(false);

        return rh;
    }
    
    /**
     * 배치 후처리 메소드. 
     * beforeExecute(), execute() 의 Exception 발생 여부와 관계없이 이 메소드는 실행됨
     */
    public void afterExecute(IBatchContext context) {
      
        IOnlineContext onlineCtx = makeOnlineContext(context);
        
        IDataSet reqDS = new DataSet();
        reqDS.putField("TASK_NO", taskNo);
        reqDS.putField("PROC_CNT", rh.getCalledCount()-rh.getExceptionCount());
        reqDS.putField("OP_FILE_NM", procFileName);
        reqDS.putField("LS_CHG_USER_ID", "BAT");

        if (rh.getExceptionCount() == 0) {
            // execute() 정상인 경우
            reqDS.putField("BAT_TASK_PROC_ST_CD", "S");
        }else {
            // execute() 에서 에러 발생할 경우
            reqDS.putField("BAT_TASK_PROC_ST_CD", "F");
        }
        IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "fUpdBatTaskOpHst", reqDS, onlineCtx);

        log = getLog(context);
        if(log.isDebugEnabled()) {
            log.debug("단말기평가정보등록 BATCH 호출 결과:");
            log.debug(resDS);
        }
        
    }
}

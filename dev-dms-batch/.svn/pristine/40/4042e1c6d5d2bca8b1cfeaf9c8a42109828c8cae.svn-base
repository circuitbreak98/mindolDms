package dms.nr;

import java.util.HashMap;
import java.util.Map;

import nexcore.framework.bat.IBatchContext;

import org.apache.commons.logging.Log;

import nexcore.framework.bat.base.AbsBatchComponent;
import nexcore.framework.bat.base.AbsRecordHandler;
import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecord;
import nexcore.framework.core.util.DateUtils;

/**
 * <ul>
 * <li>업무 그룹명 : dms/신규R</li>
 * <li>서브 업무명 : XCR012</li>
 * <li>설  명 : </li>
 * <li>작성일 : 2015-08-24 10:58:19</li>
 * <li>작성자 : 진병수 (greatjin)</li>
 * </ul>
 */
public class XCR012 extends AbsBatchComponent {
    private Log log;
    private int processCnt = 0;
    private String taskNo = "";
    private int totCnt = 0;
    private String procFileName = "";
    
    public XCR012() {
        super();
    }

    /**
     * 배치 전처리 메소드. 
     * 여기서 Exception 발생시 execute() 메소드는 실행되지 않고, afterExecute() 는 실행됨
     */
    public void beforeExecute(IBatchContext context) {
       	log = getLog(context);
		
    		processCnt = 0;
    		taskNo = "";
    		totCnt = 0;
    		procFileName = "";
    		
    		IOnlineContext    onlineCtx  = makeOnlineContext(context);
    		IDataSet reqDS = new DataSet();
    		IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "fInqTaskNoSeq", reqDS, onlineCtx);
    		taskNo = resDS.getField("TASK_NO");
    		
    		reqDS.putField("TASK_DT", DateUtils.getCurrentDate());
            reqDS.putField("TASK_ID", context.getInParameter("TASK_ID"));
            reqDS.putField("TASK_NO", taskNo);
            reqDS.putField("TASK_NM", context.getInParameter("TASK_NM"));
            reqDS.putField("GRP_ID", "NR");
            reqDS.putField("INST_CD", "DMS");
            reqDS.putField("BAT_TASK_OP_ST_CD", "B");
            reqDS.putField("OP_CNT", "0");
            reqDS.putField("FS_REG_USER_ID", "BAT");
            reqDS.putField("LS_CHG_USER_ID", "BAT");
            
//            IDataSet resDS2 = callOnlineBizComponent("sc.SCSBase", "fRegBatTaskOpHst", reqDS, onlineCtx);

            Log log = getLog(context);
            if(log.isDebugEnabled()) {
                log.debug("공유컴포넌트 호출 결과:");
                log.debug(resDS);
            }		
		
    }

    
    /**
     * 입력파라미터 준비
     * @param context
     * @return
     */
    private Map<String, String> prepareInputParam(IBatchContext context)
    {
    	log = context.getLogger();
    	Map<String, String> paramMap = new HashMap<String, String>();
     	log.debug("prepareInputParam() context :"+context);
     	paramMap.putAll(context.getInParameters());
    	paramMap.put("PROC_DT", context.getInParameter("PROC_DT")); //실행일
     	log.debug("prepareInputParam() paramMap :"+paramMap);
     	return paramMap;
    }
    
    /**
     * 당월청구는(1~말일)은 익월 8일날 (ukey 7일밤계산) 데이터 들어옴
     * 기변일때는 일련번호가 다를수있음
     * 부분청구가 있을수도 있음
     * 부가세는 100 + 10 따로계산
     * 해지 핫빌(서비스해지,  번호이동, 정산 명의변경)시 즉시 수납되어 수납데이터(준실시간)가 청구데이터(월배치) 보다 먼저 들어올수 있음 
     * 배치 메인 메소드
     * 
     * 수납은 30분단위 배치 -> 보험제외
     */
    public void execute(final IBatchContext context) {
    	log = context.getLogger();
        // 트랜잭션 시작
     	txBegin();  
     	dbStartSession();
     	dbBeginBatch();
     	
     	//입력파라미터 셋팅
     	Map<String, String> paramMap = this.prepareInputParam(context);
     	
     	log.debug("청구데이터를 보고 매출테이블에 넣는다.");
     	//렌탈매출
     	dbSelect("SClaimLst", paramMap, makeRecordHandler(context), context); //DB 조회
     	
     	//렌탈료에 청구데이터 업데이트 TB_EQP_CNTRT_DTL INV_DT, INV_AMT
     	
     	//위약금 Ukey 금액 업데이트 TB_RENTAL_PEN Ukey_pen_amt
     	
     	//손배금은 나중에 기타매출 처리에서 함.. skip
     	
 		// 트랜잭션 커밋
 		dbEndBatch();
 		dbEndSession();
 		txCommit(); 
     }
    

     
    /**
     * makeRecordHandler
     * @param context
     * @return
     */
     public AbsRecordHandler makeRecordHandler(IBatchContext context) {
     	AbsRecordHandler rh = new AbsRecordHandler(context) {
 			
 			@Override
 			public void handleRecord(IRecord row) {
 				context.setProgressCurrent(getCurrentRecordCount()); // 진행률 표시
 				context.getLogger().debug("########### : " + row);
 				
 				dbInsert("ISaleInfo", row, context);
 				processCnt++;
 			}
 		};
     	return rh;
     }
    /**
     * 배치 후처리 메소드. 
     * beforeExecute(), execute() 의 Exception 발생 여부와 관계없이 이 메소드는 실행됨
     */
    public void afterExecute(IBatchContext context) {
    	 if (super.exceptionInExecute == null) {
             // execute() 정상인 경우
             IOnlineContext    onlineCtx  = makeOnlineContext(context);
             IDataSet reqDS = new DataSet();
             reqDS.putField("TASK_NO", taskNo);
             reqDS.putField("BAT_TASK_OP_ST_CD", "S");
             reqDS.putField("OP_CNT", ""+processCnt);
             reqDS.putField("OP_FILE_NM", procFileName);
             reqDS.putField("LS_CHG_USER_ID", "BAT");

             IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "dUBatTaskOpHst", reqDS, onlineCtx);

             Log log = getLog(context);
             if(log.isDebugEnabled()) {
             	log.debug("공유컴포넌트 호출 결과:");
             	log.debug(resDS);
             }
             
         }else {
             // execute() 에서 에러 발생할 경우
             IOnlineContext    onlineCtx  = makeOnlineContext(context);
             IDataSet reqDS = new DataSet();
             reqDS.putField("TASK_NO", taskNo);
             reqDS.putField("BAT_TASK_OP_ST_CD", "F");
             reqDS.putField("OP_CNT", ""+processCnt);
             reqDS.putField("OP_FILE_NM", procFileName);
             reqDS.putField("LS_CHG_USER_ID", "BAT");

             IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "dUBatTaskOpHst", reqDS, onlineCtx);

             Log log = getLog(context);
             if(log.isDebugEnabled()) {
                 log.debug("공유컴포넌트 호출 결과:");
                 log.debug(resDS);
             }
             
         }
    }

}

package dms.inf;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import nexcore.framework.bat.IBatchContext;
import nexcore.framework.bat.base.AbsBatchComponent;
import nexcore.framework.bat.base.AbsRecordHandler;
import nexcore.framework.bat.util.SAMFileTool;
import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecord;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.exception.BizRuntimeException;
import nexcore.framework.core.util.DateUtils;
import nexcore.framework.core.util.StringUtils;
import nexcore.framework.core.util.BaseUtils;

import org.apache.commons.logging.Log;

/**
 * <ul>
 * <li>업무 그룹명 : dms/시스템공통</li>
 * <li>서브 업무명 : BSC002</li>
 * <li>설  명 : <pre>[IF]인터페이스 파일생성<테스트용></pre></li>
 * <li>작성일 : 2015-07-30 15:18:31</li>
 * <li>작성자 : 이영진 (newnofixing)</li>
 * </ul>
 */
public class IFT000 extends AbsBatchComponent {
    private int processCnt = 0;
    private String taskNo = "";
    private String procFileName = "";
    
    /**
     * 배치 생성자. 
     * 상위클래스 생성자 호출
     */
    public IFT000() {
        super();
    }

    /**
     * 배치 전처리 메소드. 
     * 여기서 Exception 발생시 execute() 메소드는 실행되지 않고, afterExecute() 는 실행됨
     */
    public void beforeExecute(IBatchContext context) {
        Log log = getLog(context);
        
        processCnt = 0;
        taskNo = "";
        procFileName = "";
        
        IOnlineContext    onlineCtx  = makeOnlineContext(context);
        IDataSet reqDS = new DataSet();
        IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "fInqTaskNoSeq", reqDS, onlineCtx);
        taskNo = resDS.getField("TASK_NO");
        
        reqDS.putField("TASK_DT", DateUtils.getCurrentDate());
        reqDS.putField("TASK_ID", context.getInParameter("TASK_ID"));
        reqDS.putField("TASK_NO", taskNo);
        reqDS.putField("TASK_NM", context.getInParameter("TASK_NM"));
        reqDS.putField("GRP_ID", "SC");
        reqDS.putField("INST_CD", "DMS");
        reqDS.putField("BAT_TASK_PROC_ST_CD", "B");
        reqDS.putField("PROC_CNT", "0");
        reqDS.putField("FS_REG_USER_ID", "BAT");
        reqDS.putField("LS_CHG_USER_ID", "BAT");
        
        callOnlineBizComponent("sc.SCSBase", "fRegBatTaskOpHst", reqDS, onlineCtx);

        if(log.isDebugEnabled()) {
            log.debug("공유컴포넌트 호출 결과:");
            log.debug(resDS);
        }
    }

    /**
     * 배치 메인 메소드
     */
    public void execute(final IBatchContext context) {
        
        try {
            
            Map<String, String> paramMap = new HashMap<String, String>();
            paramMap.put("PROC_DT", context.getInParameter("PROC_DT"));
            paramMap.put("TASK_ID", context.getInParameter("TASK_ID"));
            paramMap.put("FILE_LOC", context.getInParameter("FILE_LOC"));
            paramMap.put("FILE_SEQ", context.getInParameter("FILE_SEQ"));
            String fileDt = StringUtils.nvl(context.getInParameter("FILE_DT"));
            if ("".equals(fileDt)) fileDt = context.getInParameter("PROC_DT");
            paramMap.put("FILE_DT", context.getInParameter("FILE_DT"));
            
            //IFDBToFileUtils dbToFile = new IFDBToFileUtils();
            //OutputStream fout = dbToFile.HeaderParse(paramMap);
            OutputStream fout = HeaderParse(paramMap);
            
            StringBuffer bf = new StringBuffer();
            bf.append(context.getInParameter("TASK_ID"));
            bf.append(".SKCC.");
            bf.append(fileDt);
            bf.append(".dat");
            procFileName = bf.toString(); 
            //bf.append("_");
            //bf.append(context.getInParameter("FILE_SEQ"));
            String ifFileNmSeq = bf.toString();
            
            Map<String, String> queryParam = new HashMap<String, String>();
            queryParam.put("IF_PROC_DT", context.getInParameter("PROC_DT"));
            queryParam.put("IF_FILE_NM", ifFileNmSeq);
            queryParam.put("TABLE_NAME", context.getInParameter("TABLE_NAME"));
            
            
            SAMFileTool samTool = new SAMFileTool();
            samTool.setOutputStream(fout);
            // 파일 레이아웃 정의
            samTool.setEncoding(BaseUtils.getConfiguration("interface.file.encoding"));

            samTool.addColumnInfo("REC_CL_CD",  1, SAMFileTool.TYPE_STRING);
            IRecordSet columnLst = dbSelectMulti("SColumnInfo", queryParam);
            for (int i = 0; i < columnLst.getRecordCount(); i++) {
                IRecord rec = columnLst.getRecord(i);
                samTool.addColumnInfo(rec.get("COLUMN_NAME"),             
                    Integer.parseInt(rec.get("DATA_LENGTH")), 
                    "NUMBER".equals(rec.get("DATA_TYPE")) ? SAMFileTool.TYPE_BIGDECIMAL:SAMFileTool.TYPE_STRING);
            }
            samTool.initialize();
            
            IRecordSet column = dbSelectMulti("SColumnLst", queryParam);
            queryParam.put("CNAME", column.getRecord(0).get("CNAME"));
            
            dbSelect("SIfTableList", queryParam, makeRecordHandler(samTool), context);  //DB 조회
            
            
            paramMap.put("TOT_REC_CNT", processCnt+"");
            paramMap.put("FILE_NM_SEQ", ifFileNmSeq);
            tailParse(paramMap, fout);
            
            dbDelete("DIfTableLst", queryParam, context);
        
        } catch (Exception e) {
            throw new BizRuntimeException("DMS00009", e);
        }
    }
    
    /**
     * 배치 후처리 메소드. 
     * beforeExecute(), execute() 의 Exception 발생 여부와 관계없이 이 메소드는 실행됨
     */
    public void afterExecute(IBatchContext context) {
        IOnlineContext    onlineCtx  = makeOnlineContext(context);
        IDataSet reqDS = new DataSet();
        
        reqDS.putField("TASK_NO", taskNo);
        reqDS.putField("PROC_CNT", ""+processCnt);
        reqDS.putField("PROC_FILE_NM", procFileName);
        reqDS.putField("LS_CHG_USER_ID", "BAT");
        
        if (super.exceptionInExecute == null) {
            // execute() 정상인 경우
            reqDS.putField("BAT_TASK_PROC_ST_CD", "S");
        }else {
            // execute() 에서 에러 발생할 경우
            reqDS.putField("BAT_TASK_PROC_ST_CD", "F");
        }
        
        IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "dUBatTaskOpHst", reqDS, onlineCtx);

        Log log = getLog(context);
        if(log.isDebugEnabled()) {
            log.debug("공유컴포넌트 호출 결과:");
            log.debug(resDS);
        }
    }
    
    /**
     * 레코드 핸들러
     */
    public AbsRecordHandler makeRecordHandler(final SAMFileTool samTool) {
        
        AbsRecordHandler rh = new AbsRecordHandler(batchContext) {
            
            @Override
            public void handleRecord(IRecord arg0) {
                try {
                    samTool.writeRecordToOut(arg0); // file write...
                    processCnt++;
                    
                } catch (Exception e) {
                    throw new BizRuntimeException("DMS00009", e); //오류가 발생했습니다.
                }
            }
        };
        
        return rh;
    }
    
    /**
     * DB TO FILE Header parse
     */
    public OutputStream HeaderParse(Map<String, String> paramMap) throws Exception {
        
        OutputStream fout = null;
        String fileLoc = StringUtils.nvl(paramMap.get("FILE_LOC"));
        String taskId = StringUtils.nvl(paramMap.get("TASK_ID"));
        String procDt = StringUtils.nvl(paramMap.get("PROC_DT"));
        String fileSeq = StringUtils.nvl(paramMap.get("FILE_SEQ"));
        String fileDt = StringUtils.nvl(paramMap.get("FILE_DT"));
        if ("".equals(fileDt)) fileDt = procDt;
        StringBuffer bf1 = new StringBuffer();
        bf1.append(fileLoc);
        bf1.append(taskId);
        bf1.append(".SKCC.");
        bf1.append(fileDt);
        bf1.append(".dat");
        String ifFile = bf1.toString();
        
        StringBuffer bf2 = new StringBuffer();
        bf2.append(taskId);
        bf2.append(".SKCC.");
        bf2.append(fileDt);
        bf2.append("_");
        bf2.append(fileSeq);
        String ifFileNmSeq = bf2.toString();
        
        String path=paramMap.get("FILE_LOC");
        File dirFile=new File(path);
        if (!dirFile.exists()) {
            try{
                dirFile.mkdir();
            } 
            catch(SecurityException se){
                throw new BizRuntimeException("DMS00009", se); //오류가 발생했습니다.
            }
        }
        
        File file = new File(ifFile); // input file을 파라미터에서 가져온다.
        fout = new BufferedOutputStream(new FileOutputStream(file));
        
        SAMFileTool header = new SAMFileTool();
        header.setOutputStream(fout);
        // 파일 레이아웃 정의
        header.setEncoding(BaseUtils.getConfiguration("interface.file.encoding"));
        header.addColumnInfo("REC_CL_CD",     1, SAMFileTool.TYPE_STRING);
        header.addColumnInfo("FILE_NM",       30, SAMFileTool.TYPE_STRING);
        header.addColumnInfo("PROC_DT",       8, SAMFileTool.TYPE_STRING);
        header.initialize();
        
        Map<String, String> headerMap = new HashMap<String, String>();
        headerMap.put("REC_CL_CD", "H");
        headerMap.put("FILE_NM", ifFile);
        headerMap.put("PROC_DT", procDt);

        header.writeMapToOut(headerMap);
        
        return fout;
    }
    
    /**
     * DB TO TAIL parse
     */
    public void tailParse(Map<String, String> paramMap, OutputStream fout) throws BizRuntimeException {
        
        String processCnt = StringUtils.nvl(paramMap.get("TOT_REC_CNT"));
        String ifFileNmSeq = StringUtils.nvl(paramMap.get("FILE_NM_SEQ"));
        String fileLoc = StringUtils.nvl(paramMap.get("FILE_LOC"));
        String taskId = StringUtils.nvl(paramMap.get("TASK_ID"));
        String procDt = StringUtils.nvl(paramMap.get("PROC_DT"));
        String fileDt = StringUtils.nvl(paramMap.get("FILE_DT"));
        if ("".equals(fileDt)) fileDt = procDt;
        StringBuffer bf = new StringBuffer();
        bf.append(fileLoc);
        bf.append(taskId);
        bf.append(".SKCC.");
        bf.append(fileDt);
        bf.append(".dat");
        String ifFile = bf.toString();
        
        try {
            SAMFileTool tail = new SAMFileTool();
            tail.setOutputStream(fout);
            // 파일 레이아웃 정의
            tail.setEncoding(BaseUtils.getConfiguration("interface.file.encoding"));

            tail.addColumnInfo("REC_CL_CD",     1, SAMFileTool.TYPE_STRING);
            tail.addColumnInfo("FILE_NM",       30, SAMFileTool.TYPE_STRING);
            tail.addColumnInfo("TOT_REC_CNT",   10, SAMFileTool.TYPE_STRING);
            tail.initialize();
            
            Map<String, String> tailMap = new HashMap<String, String>();
            tailMap.put("REC_CL_CD", "T");
            tailMap.put("FILE_NM", ifFile);
            tailMap.put("TOT_REC_CNT", StringUtils.lpad(processCnt, 10, "0"));
            
            tail.writeMapToOut(tailMap);
            
        } catch (FileNotFoundException e) {
            throw new BizRuntimeException("DMS00009", e);
        } catch (Exception e) {
            throw new BizRuntimeException("DMS00009", e);
        } finally {
            try {
                if (fout != null) fout.close();
                if ("0".equals(processCnt)) {
                    File file = new File(ifFile);
                    file.delete();
                }
            } catch (Exception e) {
                throw new BizRuntimeException("DMS00009", e);
            }
        }
    }    
}

package dms.inf;

import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import nexcore.framework.bat.IBatchContext;
import nexcore.framework.bat.base.AbsBatchComponent;
import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecord;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.data.Record;
import nexcore.framework.core.data.RecordHeader;
import nexcore.framework.core.data.RecordSet;
import nexcore.framework.core.util.DateUtils;
import nexcore.framework.core.util.StringUtils;

import org.apache.commons.logging.Log;

import dms.utils.SAPUtils;
import fwk.constants.SlipConstants;
import fwk.erfif.sapjco.SapCaller;
import fwk.utils.HpcUtils;

/**
 * <ul>
 * <li>업무 그룹명 : dms/인터페이스</li>
 * <li>서브 업무명 : EPR011</li>
 * <li>설  명 : </li>
 * <li>작성일 : 2015-09-14 17:42:27</li>
 * <li>작성자 : 진병수 (greatjin)</li>
 * </ul>
 */
public class EPR011 extends AbsBatchComponent {
    private Log log;
    private int processCnt = 0;
    private String taskNo = "";
    private int totCnt = 0;
    private String procFileName = "";
    private String userNo       = "";
    
    public EPR011() {
        super();
    }

    /**
     * 배치 전처리 메소드. 
     * 여기서 Exception 발생시 execute() 메소드는 실행되지 않고, afterExecute() 는 실행됨
     */
    public void beforeExecute(IBatchContext context) {
    	log = getLog(context);
		
		processCnt = 0;
		taskNo = "";
		totCnt = 0;
		procFileName = "";
		
		IOnlineContext    batchCtx  = makeOnlineContext(context);
		IDataSet reqDS = new DataSet();
		IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "fInqTaskNoSeq", reqDS, batchCtx);
		taskNo = resDS.getField("TASK_NO");
		
		reqDS.putField("TASK_DT", DateUtils.getCurrentDate());
        reqDS.putField("TASK_ID", context.getInParameter("TASK_ID"));
        reqDS.putField("TASK_NO", taskNo);
        reqDS.putField("TASK_NM", context.getInParameter("TASK_NM"));
        reqDS.putField("GRP_ID", "NR");
        reqDS.putField("INST_CD", "DMS");
        reqDS.putField("BAT_TASK_OP_ST_CD", "B");
        reqDS.putField("OP_CNT", "0");
        reqDS.putField("FS_REG_USER_ID", "BAT");
        reqDS.putField("LS_CHG_USER_ID", "BAT");
        
//        IDataSet resDS2 = callOnlineBizComponent("sc.SCSBase", "fRegBatTaskOpHst", reqDS, batchCtx);

        Log log = getLog(context);
        if(log.isDebugEnabled()) {
            SAPUtils.debug("공유컴포넌트 호출 결과:");
            SAPUtils.debug(resDS);
        }		
		
    }
    
    /**
     * 배치 후처리 메소드. 
     * beforeExecute(), execute() 의 Exception 발생 여부와 관계없이 이 메소드는 실행됨
     */
    public void afterExecute(IBatchContext context) {
    	if (super.exceptionInExecute == null) {
            // execute() 정상인 경우
    		IOnlineContext    batchCtx  = makeOnlineContext(context);
            IDataSet reqDS = new DataSet();
            reqDS.putField("TASK_NO", taskNo);
            reqDS.putField("BAT_TASK_OP_ST_CD", "S");
            reqDS.putField("OP_CNT", ""+processCnt);
            reqDS.putField("OP_FILE_NM", procFileName);
            reqDS.putField("LS_CHG_USER_ID", "BAT");

            IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "dUBatTaskOpHst", reqDS, batchCtx);

            Log log = getLog(context);
            if(log.isDebugEnabled()) {
            	SAPUtils.debug("공유컴포넌트 호출 결과:");
            	SAPUtils.debug(resDS);
            }
            
        }else {
            // execute() 에서 에러 발생할 경우
        	IOnlineContext    batchCtx  = makeOnlineContext(context);
            IDataSet reqDS = new DataSet();
            reqDS.putField("TASK_NO", taskNo);
            reqDS.putField("BAT_TASK_OP_ST_CD", "F");
            reqDS.putField("OP_CNT", ""+processCnt);
            reqDS.putField("OP_FILE_NM", procFileName);
            reqDS.putField("LS_CHG_USER_ID", "BAT");

            IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "dUBatTaskOpHst", reqDS, batchCtx);

            Log log = getLog(context);
            if(log.isDebugEnabled()) {
                SAPUtils.debug("공유컴포넌트 호출 결과:");
                SAPUtils.debug(resDS);
            }
            
        }
    }
    
    
    /**
     * 입력파라미터 준비
     * @param context
     * @return
     */
    private Map<String, String> prepareInputParam(IBatchContext context)
    {
    	Map<String, String> paramMap = new HashMap<String, String>();
     	SAPUtils.debug("prepareInputParam() context :"+context);
     	paramMap.putAll(context.getInParameters());
      	paramMap.put("PROC_DT", context.getInParameter("PROC_DT")); //실행일
     	SAPUtils.debug("prepareInputParam() paramMap :"+paramMap);
     	return paramMap;
    }
    
    /**
     * 배치 메인 메소드
     */
    public void execute(final IBatchContext context) {
      	IOnlineContext onlineCtx =  getOnlineContextFromOndemand();
    	Map requestMap = prepareInputParam (context);
    	IDataSet requestData = SAPUtils.prepareXMLInputParam (context,"POST_SLIP_DATASET");
    	this.removeSlip(requestMap, requestData, context);
    	 
    }
    
    
    /**
     * 전표발행
     * @param requestData
     * @param batchCtx
     * @return
     */
    private IDataSet removeSlip(Map requestMap, IDataSet requestData, IBatchContext batchCtx)
    {
    	IDataSet responseData = new DataSet();
    	userNo = SAPUtils.nvl(requestMap, "USER_NO",""); 
    	responseData = fRemoveSlip(requestData, batchCtx);
    	
    	this.fUpdAssetSlip(requestData, batchCtx);
    	
		if(     requestData.containsField("SLIP_TYPE")
		     && StringUtils.nvl(requestData.getField("SLIP_TYPE"),"").equals("AGENCY_AMT_AP")) //대리점단말기 정산
		{
			SAPUtils.debug("removeSlip() requestMap:"+requestMap);
			//responseData = fRegAgentAmtAPSlip(requestData, batchCtx);
		}
    	
		return responseData;
    }
    
    /**
     * 자산테이블에 삭제 처리한다.
     * @param requestData
     * @param batchCtx
     * @return
     */
    private void fUpdAssetSlip(IDataSet requestData, IBatchContext batchCtx)
    {
    	IRecordSet rs = requestData.getRecordSet("RS_SLIP_DELETE");
    	int updateCnt=0;
    	Map paramMap;
    	for(int i=0; i<rs.getRecordCount(); i++)
    	{
    		paramMap = rs.getRecordMap(i);
    		paramMap.put("USER_NO", this.userNo);
    		SAPUtils.debug("fUpdAssetSlip() paramMap:"+paramMap);
    		dbUpdate("UAssetSlipInfo", paramMap);
    		updateCnt++;
    	}
    }
    
	/**
	*
	*
	* @author 진병수 (greatjin)
	* @since 2015-08-26 14:43:47
	*
	* @param requestData 요청정보 DataSet 객체
	* @param batchCtx   요청 컨텍스트 정보
	* @return 처리결과 DataSet 객체
	*/
	public IDataSet fRemoveSlip(IDataSet requestData, IBatchContext batchCtx) {
	    IDataSet responseData = new DataSet();
	    
	    IRecordSet rs = requestData.getRecordSet("RS_SLIP_DELETE");
	    
	    
    	String functionName = "Z_FI_RFC_DMS_DOCUMENT_DELETE";
    	
		HashMap params = new HashMap();
		SAPUtils.debug("fRemoveSlip ==================> (requestData):"+requestData);
		SAPUtils.debug("fRemoveSlip ==================> (requestData end):");
		
		IRecordSet itDmsHeader = new RecordSet("IT_DELETE_DATA");

		itDmsHeader.addHeader(new RecordHeader("BUKRS    ".trim()));
		itDmsHeader.addHeader(new RecordHeader("CCNUM    ".trim()));
		itDmsHeader.addHeader(new RecordHeader("GJAHR    ".trim()));
		itDmsHeader.addHeader(new RecordHeader("BELNR    ".trim()));
		itDmsHeader.addHeader(new RecordHeader("ZFISERIAL".trim()));
	    
		String yyyy  = "";
		String dmsSeq = "";

	    for(int i=0; i<rs.getRecordCount(); i++)
	    {
				IRecord recordContents = itDmsHeader.newRecord();
		        recordContents.put("BUKRS    ".trim(), SlipConstants.CO_CD_SKCC);
		        //recordContents.put("CCNUM    ".trim(), ca.getUserNo());
		        
		        if(SAPUtils.hasValue(rs, i, "YYYY"))
		        {
		        	yyyy = rs.get(i, "YYYY");
		        }
		        else
		        {
		        	yyyy = HpcUtils.getCurrentDate(Locale.KOREA, "yyyy");
		        }
		        
		        recordContents.put("GJAHR    ".trim(), yyyy); 
		        recordContents.put("BELNR    ".trim(), rs.get(i, "SLIP_NO"));
		        
		        if(SAPUtils.hasValue(rs,i, "FISCL_SYS_SEQ"))
		        {
		        	dmsSeq = rs.get(i, "FISCL_SYS_SEQ") ;
		        }
		        else
		        {
		        	dmsSeq = this.fInqSlipInfo(SAPUtils.convertRecord2DataSet(rs.getRecord(i)), batchCtx); 
		        }
		        recordContents.put("ZFISERIAL    ".trim(), dmsSeq);
		        
		        itDmsHeader.addRecord(recordContents);
	    }
	    // 처리 결과값을 responseData에 넣어서 리턴하십시요
	    
        
        IDataSet erpRequestData = new DataSet();
        erpRequestData.putRecordSet("IT_DELETE_DATA", itDmsHeader);
        
    	HashMap callInfo = new HashMap();
		callInfo.put("params", params);
		callInfo.put("IT_DELETE_DATA", "IT_DELETE_DATA");

		SAPUtils.debug("callDeleteSlip ==================> (callInfo):"+callInfo); 

		SapCaller caller = new SapCaller(functionName);
   	 	responseData = caller.sendData(erpRequestData, callInfo ,false);
   	 	
   	     SAPUtils.debug("callDeleteSlip ==================> (responseData):"+responseData); 
		
		//this.updateSlipStatus(responseData.getRecordSet("IT_ERP_RETURN"), batchCtx);
		
    	
    	IRecordSet erpRs = responseData.getRecordSet("IT_ERP_RETURN");
    	
    	if(!SAPUtils.hasHeaderName(rs, "SLIP_NO"))
    		rs.addHeader(new RecordHeader("SLIP_NO"));

    	if(!SAPUtils.hasHeaderName(rs, "MSGTYP"))
    		rs.addHeader(new RecordHeader("MSGTYP"));


     	//afterslipposting
    	IRecordSet returnRS = (IRecordSet) rs.clone();

    	IRecord tmpRec = new Record();
    	
    	
    	Map erpMap = null;
    	String slipNo = "";
    	
    	for(int i=0;i<returnRS.getRecordCount();i++)
    	{
    		tmpRec = returnRS.getRecord(i);
    		slipNo =  tmpRec.get("SLIP_NO").toString();
    		erpMap = this.findRecord2Map(erpRs, "BELNR", slipNo);
    		SAPUtils.debug("callDeleteSlip ==================> (erpMap):"+erpMap);
    		tmpRec.put("MSGTYP", erpMap.get("MSGTYP"));
    		
    		returnRS.setRecord(i, tmpRec);
    	}
    		
    	this.updateSlipStatus(returnRS, batchCtx);
    	
    	responseData.putRecordSet("RS_SLIP_DELETE", returnRS);
		
	    return responseData;
	}
	
	/**
	 * 키를 가지고 하나의 레코드만 가져온다.
	 * @param rs
	 * @param key
	 * @return
	 */
	private Map findRecord2Map(IRecordSet rs, String keyField, String key)
	{
    	Map returnMap = new HashMap();
    	if(rs==null || !SAPUtils.hasHeaderName(rs, keyField)) return returnMap;
		for(int i=0 ; i<rs.getRecordCount(); i++)
		{
			if(key.equals(rs.get(i,keyField)))
			{
				returnMap = rs.getRecordMap(i);
				break;
			}
		}
		return returnMap;
	}
	
	
	/**
	* sliptable기록
	* @param requestData
	* @param batchCtx
	* @return
	*/
	private IDataSet updateSlipStatus(IRecordSet rs, IBatchContext batchCtx)
	{
		IDataSet responseData = new DataSet();
		
		
		SAPUtils.info("fRegSlipData updateSlipStatus :"+ rs);
		Map param = new HashMap();
		IDataSet ds = new DataSet();
		// 	2. 업무 DM호출
		for( int i=0; i<rs.getRecordCount(); i++)
		{
			param =rs.getRecordMap(i);
			param.put("SLIP_ST_CD", "05");
			ds.putFieldMap(param);
			dbUpdate("USlipStatus", ds.getFieldMap());
		}
		return responseData;
	}
	
	/**
	 * dmsSerial을 가자온다.
	 * @param requestData
	 * @param batchCtx
	 * @return
	 */
	private String fInqSlipInfo(IDataSet requestData, IBatchContext batchCtx) 
	{
		String dmsSeq;
		IRecord rs = dbSelectSingle("SSlipInfo", requestData.getFieldMap());
		dmsSeq = rs.get("FISCL_SYS_SEQ");
		return dmsSeq;
	}

}

package dms.nr;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.OutputStream;

import nexcore.framework.bat.IBatchContext;
import nexcore.framework.bat.base.AbsBatchComponent;
import nexcore.framework.bat.base.AbsRecordHandler;
import nexcore.framework.bat.util.SAMFileTool;
import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecord;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.data.RecordSet;
import nexcore.framework.core.exception.BizRuntimeException;
import nexcore.framework.core.util.DateUtils;

import org.apache.commons.logging.Log;

/**
 * <ul>
 * <li>업무 그룹명 : dms/신규R</li>
 * <li>서브 업무명 : BNR002</li>
 * <li>설  명 : </li>
 * <li>작성일 : 2015-08-04 16:19:45</li>
 * <li>작성자 : 이민재 (mindol1004)</li>
 * </ul>
 */
public class BNR002 extends AbsBatchComponent {
	private int processCnt = 0;
    private String taskNo = "";
    private String procFileName = "";
    private Log log;
    
    public BNR002() {
        super();
    }

    /**
     * 배치 전처리 메소드. 
     * 여기서 Exception 발생시 execute() 메소드는 실행되지 않고, afterExecute() 는 실행됨
     */
    public void beforeExecute(IBatchContext context) {
		log = getLog(context);
		
		processCnt = 0;
        taskNo = "";
        procFileName = "";
        
        IOnlineContext onlineCtx = makeOnlineContext(context);
        
        IDataSet reqDS = new DataSet();
        IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "fInqTaskNoSeq", reqDS, onlineCtx);
        taskNo = resDS.getField("TASK_NO");
        
        reqDS.putField("TASK_DT", DateUtils.getCurrentDate());
        reqDS.putField("TASK_ID", context.getInParameter("TASK_ID"));
        reqDS.putField("TASK_NO", taskNo);
        reqDS.putField("TASK_NM", context.getInParameter("TASK_NM"));
        reqDS.putField("GRP_ID", "NR");
        reqDS.putField("INST_CD", "DMS");
        reqDS.putField("BAT_TASK_OP_ST_CD", "B");
        reqDS.putField("OP_CNT", "0");
        reqDS.putField("FS_REG_USER_ID", "BAT");
        reqDS.putField("LS_CHG_USER_ID", "BAT");
        
        callOnlineBizComponent("sc.SCSBase", "fRegBatTaskOpHst", reqDS, onlineCtx);

        log = getLog(context);
        if(log.isDebugEnabled()) {
            log.debug("공유컴포넌트 호출 결과:");
            log.debug(resDS);
        }
    }

    /**
     * 배치 메인 메소드
     */
    public void execute(final IBatchContext context) {
    	
    	// DATA 총 건수
    	IRecord rec = dbSelectSingle("SEqpPolyTotCnt", null, context);
    	int totalCount = rec.getInt(0);
    	
    	// HEADER RecordSet 생성
    	IRecordSet rsHeader = new RecordSet("HEADER",  new String[]{"REC_CL_CD", "FILE_NM", "PROC_DT"});
    	IRecord rHeader = rsHeader.newRecord();
    	rHeader.set("REC_CL_CD", "H");
    	rHeader.set("FILE_NM", context.getInParameter("FILE_NM"));
    	rHeader.set("PROC_DT", context.getInParameter("PROC_DT"));
    	
    	// TRAILER RecordSet 생성
    	IRecordSet rsTailer = new RecordSet("TRAILER",  new String[]{"REC_CL_CD", "FILE_NM", "TOT_REC_CNT"});
    	IRecord rTailer = rsTailer.newRecord();
    	rTailer.set("REC_CL_CD", "T");
    	rTailer.set("FILE_NM", context.getInParameter("FILE_NM"));
    	rTailer.set("TOT_REC_CNT", totalCount);
        
    	File file = new File(context.getInParameter("FILE")); // input file을 파라미터에서 가져온다.
    	procFileName = context.getInParameter("FILE_NM");
    	
        // HEADER 레이아웃 정의
        SAMFileTool samHeader = new SAMFileTool();
        samHeader.addColumnInfo("REC_CL_CD",     	1, 	SAMFileTool.TYPE_STRING);
        samHeader.addColumnInfo("FILE_NM",       	17, SAMFileTool.TYPE_STRING);
        samHeader.addColumnInfo("PROC_DT",       	8, 	SAMFileTool.TYPE_STRING);
        
        // BODY 레이아웃 정의
        SAMFileTool samBody = new SAMFileTool();
        samBody.addColumnInfo("REC_CL_CD", 			1, 	SAMFileTool.TYPE_STRING);
        samBody.addColumnInfo("RENTAL_POLY_NO", 	15, SAMFileTool.TYPE_STRING); //렌탈계획ID
        samBody.addColumnInfo("EQP_MDL_CD", 		5, 	SAMFileTool.TYPE_STRING); //단말기모델코드
        samBody.addColumnInfo("OUT_PRC", 			11, SAMFileTool.TYPE_STRING); //최초기준가
        samBody.addColumnInfo("RENTAL_PRN", 		11, SAMFileTool.TYPE_STRING); //총렌탈요금
        samBody.addColumnInfo("RENTAL_FEE", 		11, SAMFileTool.TYPE_STRING); //월렌탈료
        samBody.addColumnInfo("CNTRT_PRD", 			3, 	SAMFileTool.TYPE_STRING); //렌탈계약개월수
        samBody.addColumnInfo("RP_EFF_PRD_FR_DT", 	8, 	SAMFileTool.TYPE_STRING); //정책시작일자
        samBody.addColumnInfo("RP_EFF_PRD_TO_DT", 	8, 	SAMFileTool.TYPE_STRING); //정책종료일자
        
        // TRAILER 레이아웃 정의
        SAMFileTool samTailer = new SAMFileTool();
        samTailer.addColumnInfo("REC_CL_CD",     	1, 	SAMFileTool.TYPE_STRING);
        samTailer.addColumnInfo("FILE_NM",       	17, SAMFileTool.TYPE_STRING);
        samTailer.addColumnInfo("TOT_REC_CNT",   	10, SAMFileTool.TYPE_STRING);
        
        OutputStream fout = null;
        
        try {
            
        	if( totalCount > 0 ){
        		
        		fout = new BufferedOutputStream(new FileOutputStream(file));
                
                // HEADER SAMFileTool 초기화
                samHeader.setOutputStream(fout);
                samHeader.setEncoding("UTF-8");
                samHeader.initialize();
                samHeader.writeRecordSetToOut(rsHeader); // 헤더부 출력
                
                // BODY SAMFileTool 초기화
                samBody.setOutputStream(fout);
                samBody.setEncoding("UTF-8");
                samBody.initialize();
                dbSelect("SEqpPoly", null, makeRecordHandler(samBody), context);  //본문부 출력 - DB 조회 
                
                // TRAILER SAMFileTool 초기화
                samTailer.setOutputStream(fout);
                samTailer.setEncoding("UTF-8");
                samTailer.initialize();
                samTailer.writeRecordSetToOut(rsTailer); // 꼬리부 출력
        	}
            
        } catch (FileNotFoundException e) {
            throw new BizRuntimeException("M00009", e);
        } catch (Exception e) {
            throw new BizRuntimeException("M00001", e);
        } finally {
            try {
                if (fout != null) fout.close();
            } catch (Exception e) {
                throw new BizRuntimeException("M00001", e);
            }
        }
    }
    
    /**
     * 배치 후처리 메소드. 
     * beforeExecute(), execute() 의 Exception 발생 여부와 관계없이 이 메소드는 실행됨
     */
    public void afterExecute(IBatchContext context) {
    	
    	IOnlineContext onlineCtx = makeOnlineContext(context);
    	
        IDataSet reqDS = new DataSet();
        reqDS.putField("TASK_NO", taskNo);
        reqDS.putField("OP_CNT", ""+processCnt);
        reqDS.putField("OP_FILE_NM", procFileName);
        reqDS.putField("LS_CHG_USER_ID", "BAT");
        
        if (super.exceptionInExecute == null) {
            // execute() 정상인 경우
            reqDS.putField("BAT_TASK_OP_ST_CD", "S");
        }else {
            // execute() 에서 에러 발생할 경우
            reqDS.putField("BAT_TASK_OP_ST_CD", "F");
        }
        
        IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "dUBatTaskOpHst", reqDS, onlineCtx);

        Log log = getLog(context);
        if(log.isDebugEnabled()) {
            log.debug("공유컴포넌트 호출 결과:");
            log.debug(resDS);
        }
    }
    
    public AbsRecordHandler makeRecordHandler(final SAMFileTool samTool) {
        
        AbsRecordHandler rh = new AbsRecordHandler(batchContext) {
            
            @Override
            public void handleRecord(IRecord arg0) {
                try {
                    // 필요시 데이터 가공...
                    
                    batchContext.setProgressCurrent(getCurrentRecordCount()); // 진행률 표시 설정
                    samTool.writeRecordToOut(arg0); // file write...
                    processCnt++;
                    
                } catch (Exception e) {
                    throw new BizRuntimeException("M00001", e); //오류가 발생했습니다.
                }
            }
        };
        
        return rh;
    }

}

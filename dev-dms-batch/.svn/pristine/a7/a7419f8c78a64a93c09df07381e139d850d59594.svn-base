package dms.inf;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.util.HashMap;
import java.util.Map;

import nexcore.framework.bat.IBatchContext;
import nexcore.framework.bat.base.AbsBatchComponent;
import nexcore.framework.bat.util.SAMFileTool;
import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecord;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.exception.BizRuntimeException;
import nexcore.framework.core.util.DateUtils;

import org.apache.commons.logging.Log;

/**
 * <ul>
 * <li>업무 그룹명 : DMS-IF/인터페이스</li>
 * <li>서브 업무명 : BIF001</li>
 * <li>설  명 : <pre>[BC]단말기모델정보IF</pre></li>
 * <li>작성일 : 2015-07-29 10:17:57</li>
 * <li>작성자 : 이영진 (newnofixing)</li>
 * </ul>
 */
public class BIF001 extends AbsBatchComponent {
    private int processCnt = 0;
    private String taskNo = "";
    private int totCnt = 0;
    private String procFileName = "";
    
    /**
     * 배치 생성자. 
     * 상위클래스 생성자 호출
     */
    public BIF001() {
        super();
    }

    /**
     * 배치 전처리 메소드. 
     * 여기서 Exception 발생시 execute() 메소드는 실행되지 않고, afterExecute() 는 실행됨
     */
    public void beforeExecute(IBatchContext context) {
        Log log = getLog(context);
		
		processCnt = 0;
		taskNo = "";
		totCnt = 0;
		procFileName = "";
		
		IOnlineContext    onlineCtx  = makeOnlineContext(context);
		IDataSet reqDS = new DataSet();
		IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "fInqTaskNoSeq", reqDS, onlineCtx);
		taskNo = resDS.getField("TASK_NO");
		
		reqDS.putField("TASK_DT", DateUtils.getCurrentDate());
        reqDS.putField("TASK_ID", context.getInParameter("TASK_ID"));
        reqDS.putField("TASK_NO", taskNo);
        reqDS.putField("TASK_NM", context.getInParameter("TASK_NM"));
        reqDS.putField("GRP_ID", "BI");
        reqDS.putField("INST_CD", "DMS");
        reqDS.putField("BAT_TASK_PROC_ST_CD", "B");
        reqDS.putField("PROC_CNT", "0");
        reqDS.putField("FS_REG_USER_ID", "BAT");
        reqDS.putField("LS_CHG_USER_ID", "BAT");
        
        callOnlineBizComponent("sc.SCSBase", "fRegBatTaskOpHst", reqDS, onlineCtx);

        if(log.isDebugEnabled()) {
            log.debug("공유컴포넌트 호출 결과:");
            log.debug(resDS);
        }
		
    }

    /**
     * 배치 메인 메소드
     */
    public void execute(final IBatchContext context) {
        Log log = getLog(context);
        
        // 트랜잭션 시작
        txBegin();  
        dbStartSession();
        dbBeginBatch();
        
        // SAM 파일 헤더부 레이아웃 정의
        SAMFileTool sam1 = new SAMFileTool();
        sam1.addColumnInfo("REC_CL_CD",     1, SAMFileTool.TYPE_STRING);
        sam1.addColumnInfo("FILE_NM",       17, SAMFileTool.TYPE_STRING);
        sam1.addColumnInfo("PROC_DT",       8, SAMFileTool.TYPE_STRING);
        sam1.setEncoding("UTF-8");

        // SAM 파일 본문부 레이아웃 정의
        SAMFileTool sam2 = new SAMFileTool();
        sam2.addColumnInfo("REC_CL_CD",     1, SAMFileTool.TYPE_STRING);
        sam2.addColumnInfo("EQP_MDL_CD",    5, SAMFileTool.TYPE_STRING);
        sam2.addColumnInfo("EQP_MDL_NM",    80, SAMFileTool.TYPE_STRING);
        sam2.addColumnInfo("PET_NM",        100, SAMFileTool.TYPE_STRING);
        sam2.addColumnInfo("MFACT_CD",      10, SAMFileTool.TYPE_STRING);
        sam2.addColumnInfo("DSTRB_EQP_YN",  1, SAMFileTool.TYPE_STRING);
        sam2.addColumnInfo("EQP_COLOR",     40, SAMFileTool.TYPE_STRING);
        sam2.addColumnInfo("IF_PROC_DT",      0, SAMFileTool.TYPE_STRING);
        sam2.addColumnInfo("IF_SNO",        0, SAMFileTool.TYPE_STRING);
        sam2.addColumnInfo("IF_SEQ",        0, SAMFileTool.TYPE_STRING);
        sam2.addColumnInfo("PROC_CL_CD",      0, SAMFileTool.TYPE_STRING);
        sam2.setEncoding("UTF-8");

        // SAM 파일 꼬리부 레이아웃 정의
        SAMFileTool sam3 = new SAMFileTool();
        sam3.addColumnInfo("REC_CL_CD",     1, SAMFileTool.TYPE_STRING);
        sam3.addColumnInfo("FILE_NM",       17, SAMFileTool.TYPE_STRING);
        sam3.addColumnInfo("TOT_REC_CNT",   10, SAMFileTool.TYPE_STRING);
        sam3.setEncoding("UTF-8");

        // 레이아웃 정의로부터 RecordSet 생성. RecordSet 헤더 생성을 위함
        IRecordSet rs1 = sam1.makeRecordSetFromColumnInfoList("HEADER");
        IRecordSet rs2 = sam2.makeRecordSetFromColumnInfoList("BODY");
        IRecordSet rs3 = sam3.makeRecordSetFromColumnInfoList("TRAILER");
        
        //String fileNm = context.getInParameter("FILE_NM");
        //String[] fileNmAry = fileNm.split("_");
        
        String path=context.getInParameter("FILE_LOC");
        File dirFile=new File(path);
        File []fileList=dirFile.listFiles();
        for(File tempFile : fileList) {
          if(tempFile.isFile()) {
            String tempFileName=tempFile.getName();
            if(tempFileName.indexOf(context.getInParameter("TASK_ID")+"_"+context.getInParameter("PROC_DT")) > -1 ) {
                //File file = new File(context.getInParameter("DIR")+context.getInParameter("FILE_NM")); // input file을 파라미터에서 가져온다.
                //File file = new File(path);
                //File file = new File("c:/projects/file.dat");
                Map<String, String> paramMap = new HashMap<String, String>();
                paramMap.put("IF_PROC_DT", context.getInParameter("PROC_DT"));
                String FstNm = context.getInParameter("TASK_ID")+"_"+context.getInParameter("PROC_DT");
                paramMap.put("IF_SNO", Integer.parseInt(tempFileName.substring(FstNm.length()+1, FstNm.length()+3))+"");
                IRecord seqRec = dbSelectSingle("SIfSeq", paramMap, context);
                int ifSeq = Integer.parseInt(seqRec.get("IF_SEQ"));
                
                processCnt = 0;
                totCnt = 0;
                BufferedInputStream in = null;
                try {
                    in = new BufferedInputStream(new FileInputStream(tempFile));
                    byte[] readLineBuffer = new byte[1000];
                    while(true) {
                        // 샘플 파일에서는 매 레코드는 EOL 문자로 구분됨.
                        int readLength = SAMFileTool.readToEol(in, readLineBuffer);
                        if (readLength == -1) break; // 다읽었음.
                        if (readLength < 1) continue; // 의미 없는 공백 라인. skip.
                        /*
                        if (readLength != 55) {
                            throw new BizRuntimeException("메세지코드", new String[]{ "데이타 길이 오류" });
                        }
                        */
                        
                        if (readLineBuffer[0] == 'H') { 
                            // 레코드의 첫번째 바이트가 H이면 헤더부 
                            IRecord rec = sam1.readRecordFromBytes(rs1, readLineBuffer, 0, readLength);
                            log.debug("PROC_DT:["+rec.get("PROC_DT")+"]");
                        }else if (readLineBuffer[0]  == 'D') { 
                            // 레코드의 첫번째 바이트가D이면 본문부 
                            IRecord rec = sam2.readRecordFromBytes(rs2, readLineBuffer, 0, readLength); 
                            log.debug("PET_NM:["+rec.get("PET_NM")+"]");
                            log.debug("MFACT_CD:["+rec.get("MFACT_CD")+"]");
                            log.debug("DSTRB_EQP_YN:["+rec.get("DSTRB_EQP_YN")+"]");
                            log.debug("EQP_COLOR:["+rec.get("EQP_COLOR")+"]");
                            rec.set("MFACT_CD", rec.get("MFACT_CD").trim());
                            rec.set("EQP_COLOR", rec.get("EQP_COLOR").trim());
                            rec.set("IF_PROC_DT", context.getInParameter("PROC_DT"));
                            rec.set("IF_SNO", Integer.parseInt(tempFileName.substring(FstNm.length()+1, FstNm.length()+3))+"");
                            rec.set("PROC_CL_CD","1");
                            rec.set("IF_SEQ", ifSeq);
                            //log.debug("IF_PROC_DT:["+context.getInParameter("PROC_DT")+"]");
                            //log.debug("IF_SNO:["+Integer.parseInt(tempFileName.substring(FstNm.length()+1, FstNm.length()+3))+"]");
                            dbInsert("IEqpInfo", rec, context);
                            processCnt++;
                            ifSeq++;
                        }else if (readLineBuffer[0]  == 'T') { 
                            // 레코드의 첫번째 바이트가 T이면 꼬리부 
                            IRecord rec = sam3.readRecordFromBytes(rs3, readLineBuffer, 0, readLength); 
                            
                            String tot = rec.get("TOT_REC_CNT").trim();
                            totCnt = Integer.parseInt(tot);
                            log.debug("TOT_REC_CNT:["+totCnt+"]");
                        }
                    }
                    
                    if(processCnt != totCnt) throw new BizRuntimeException("DMS00083"); //총건수와 처리건수가 다릅니다.
                    
                } catch(Exception e) {
                    log.debug("Exception:["+e.toString()+"]");
                    throw new BizRuntimeException("M00001", e); //오류가 발생했습니다.
                } finally {
                    try {
                        if (in != null) in.close();
                        procFileName = tempFileName;
                        File fileToMove = new File(path+"old/"+tempFileName);
                        tempFile.renameTo(fileToMove);
                    } catch(Exception e) {
                        throw new BizRuntimeException("M00001", e); //오류가 발생했습니다.
                    }
                }
            }
          }
        }
        // 트랜잭션 커밋
        dbEndBatch();
        dbEndSession();
        txCommit();
    }
    
    /**
     * 배치 후처리 메소드. 
     * beforeExecute(), execute() 의 Exception 발생 여부와 관계없이 이 메소드는 실행됨
     */
    public void afterExecute(IBatchContext context) {
        
        IOnlineContext    onlineCtx  = makeOnlineContext(context);
        IDataSet reqDS = new DataSet();
        
        reqDS.putField("TASK_NO", taskNo);
        reqDS.putField("PROC_CNT", ""+processCnt);
        reqDS.putField("PROC_FILE_NM", procFileName);
        reqDS.putField("LS_CHG_USER_ID", "BAT");
        
        if (super.exceptionInExecute == null) {
            // execute() 정상인 경우
            reqDS.putField("BAT_TASK_PROC_ST_CD", "S");
        }else {
            // execute() 에서 에러 발생할 경우
            reqDS.putField("BAT_TASK_PROC_ST_CD", "F");
        }
        
        IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "dUBatTaskOpHst", reqDS, onlineCtx);

        Log log = getLog(context);
        if(log.isDebugEnabled()) {
            log.debug("공유컴포넌트 호출 결과:");
            log.debug(resDS);
        }
        
    }
    
}

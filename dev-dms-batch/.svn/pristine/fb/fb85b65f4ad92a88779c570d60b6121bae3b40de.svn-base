package dms.pr;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import nexcore.framework.bat.IBatchContext;
import nexcore.framework.bat.base.AbsBatchComponent;
import nexcore.framework.bat.base.AbsRecordHandler;
import nexcore.framework.bat.base.AutoCommitRecordHandler;
import nexcore.framework.bat.base.DummyRecordHandler;
import nexcore.framework.bat.util.SAMFileTool;
import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecord;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.data.RecordHeader;
import nexcore.framework.core.exception.BizRuntimeException;
import nexcore.framework.core.util.DateUtils;
import nexcore.framework.core.util.BaseUtils;
import nexcore.framework.core.util.StringUtils;

import org.apache.commons.logging.Log;

import sun.security.util.Length;
import fwk.utils.HpcUtils;
import fwk.utils.IFFileToDBUtils;

/**
 * <ul>
 * <li>업무 그룹명 : DMS-IF/인터페이스</li>
 * <li>서브 업무명 : BIF110</li>
 * <li>설  명 : <pre>[PR]상담관리M(일반)</pre></li>
 * <li>작성일 : 2015-08-10 11:07:57</li>
 * <li>작성자 : 이영진 (newnofixing)</li>
 * </ul>
 */
public class DBP011 extends AbsBatchComponent {
    private int processCnt = 0;
    private String taskNo = "";
    private String procFileName = "";
    
    private int rv_in_cnt = 0;
    private int rv_duplicate_cnt = 0;
    private int rv_deal_error_cnt = 0;
    private int rv_update_cnt = 0;
    private int rv_insert_cnt = 0;
    private String rv_prcSt = "";
    
    public DBP011() {
        super();
    }

    /**
     * 배치 전처리 메소드. 
     * 여기서 Exception 발생시 execute() 메소드는 실행되지 않고, afterExecute() 는 실행됨
     */
    public void beforeExecute(IBatchContext context) {
        Log log = getLog(context);
		
		processCnt = 0;
		taskNo = "";
		procFileName = "";
		
		IOnlineContext    onlineCtx  = makeOnlineContext(context);
		IDataSet reqDS = new DataSet();
		IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "fInqTaskNoSeq", reqDS, onlineCtx);
		taskNo = resDS.getField("TASK_NO");
		
		reqDS.putField("TASK_DT", DateUtils.getCurrentDate());
        reqDS.putField("TASK_ID", context.getInParameter("TASK_ID"));
        reqDS.putField("TASK_NO", taskNo);
        reqDS.putField("TASK_NM", context.getInParameter("TASK_NM"));
        reqDS.putField("GRP_ID", "PR");
        reqDS.putField("INST_CD", "DMS");
        reqDS.putField("BAT_TASK_PROC_ST_CD", "B");
        reqDS.putField("PROC_CNT", "0");
        reqDS.putField("FS_REG_USER_ID", "BAT");
        reqDS.putField("LS_CHG_USER_ID", "BAT");
        
        callOnlineBizComponent("sc.SCSBase", "fRegBatTaskOpHst", reqDS, onlineCtx);

        log = getLog(context);
        if(log.isDebugEnabled()) {
            log.debug("공유컴포넌트 호출 결과:");
            log.debug(resDS);
        }
		
    }

    /**
     * 배치 메인 메소드
     */
    public void execute(final IBatchContext context) {
//        Log log = getLog(context);
        // 트랜잭션 시작
        txBegin();  
        dbStartSession();
        dbBeginBatch();
        
        /* SQL ParmaMap 설정 */
        HashMap<String, Object> paramMap = new HashMap<String,Object>();
        paramMap.put("SPECI_PROC_DT", context.getInParameter("SPECI_PROC_DT"));             //파라메터 날짜받기
//        String sCurDate = "";
//        sCurDate = context.getInParameter("SPECI_PROC_DT");

        try {
            dbSelect("SIFConsultMgmt", paramMap, makeRecordHandler(context), context); // IF상담관리정보 조회
        } catch (Exception e) {         
            throw new BizRuntimeException("M00001", e);
        }
        
        // 트랜잭션 커밋
        dbEndBatch();
        dbEndSession();
        txCommit();
    }
        
    
    /**
     * 배치 후처리 메소드. 
     * beforeExecute(), execute() 의 Exception 발생 여부와 관계없이 이 메소드는 실행됨
     */
    public void afterExecute(IBatchContext context) {
        IOnlineContext    onlineCtx  = makeOnlineContext(context);
        IDataSet reqDS = new DataSet();
        reqDS.putField("TASK_NO", taskNo);
        reqDS.putField("PROC_CNT", ""+processCnt);
        reqDS.putField("PROC_FILE_NM", procFileName);
        reqDS.putField("LS_CHG_USER_ID", "BAT");
        
        HashMap<String, Object> Map = new HashMap<String,Object>();
        Map.put("SPECI_PROC_DT"             , context.getInParameter("SPECI_PROC_DT"));              // 전문처리일자
        Map.put("OP_CL"                     , "N");                    // 업무 구분
        Map.put("IN_COUNT"                  , rv_in_cnt);              // 입고 COUNT
        Map.put("DUP_COUNT"                 , rv_duplicate_cnt);       // 복제 COUNT
        Map.put("CNSL_DEALCO_ERR_COUNT"     , rv_deal_error_cnt);      // 상담 거래처 오류 COUNT
        Map.put("UPDATE_COUNT"              , rv_update_cnt);          // UPDATE COUNT
        Map.put("INSERT_COUNT"              , rv_insert_cnt);          // INSERT COUNT
        
        context.getLogger().debug("######Map##### : " + Map.toString());
        
        if (super.exceptionInExecute == null) {
            // execute() 정상인 경우
            reqDS.putField("BAT_TASK_PROC_ST_CD", "S");
            dbInsert("IUkeyIfResult", Map, context);  // UkeyIfResult저장
            
        }else {
            // execute() 에서 에러 발생할 경우
            reqDS.putField("BAT_TASK_PROC_ST_CD", "F");
        }
        IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "dUBatTaskOpHst", reqDS, onlineCtx);
        
        Log log = getLog(context);
        if(log.isDebugEnabled()) {
            log.debug("공유컴포넌트 호출 결과:");
            log.debug(resDS);
        }
    }
    
    public AbsRecordHandler makeRecordHandler(IBatchContext context) {
//        context.getLogger().debug("XXXXXX000001 " );
        AbsRecordHandler rh = new AbsRecordHandler(context) {
            
            @Override
            public void handleRecord(IRecord row) {
                
                context.setProgressCurrent(getCurrentRecordCount()); // 진행률 표시
                
                
                             
                HashMap<String, Object> paramMap = new HashMap<String,Object>();                    
                paramMap.put("SPECI_PROC_DT"        , StringUtils.nvlObject(row.get("SPECI_PROC_DT"),""));                    // 전문처리일자
                paramMap.put("SPECI_PROC_TIME"      , StringUtils.nvlObject(row.get("SPECI_PROC_TIME"),""));                  // IF_처리시간
                paramMap.put("SPECI_SER_NO"         , StringUtils.nvlObject(row.get("SPECI_SER_NO"),""));                     // IF_순번
                                                                                                                                 
                paramMap.put("CNSL_MGMT_NO"         , StringUtils.nvlObject(row.get("CNSL_MGMT_NO"),""));                     // 상담관리번호     
                paramMap.put("EQP_MDL_CD"           , StringUtils.nvlObject(row.get("EQP_MDL_CD"),""));                       // 단말기모델코드    
                paramMap.put("EQP_SER_NO"           , StringUtils.nvlObject(row.get("EQP_SER_NO"),""));                       // 일련번호(색상)   
                paramMap.put("CNSL_DT"              , StringUtils.nvlObject(row.get("CNSL_DT"),""));                          // 상담일자       
                paramMap.put("CNSL_DEALCO_CD"       , StringUtils.nvlObject(row.get("CNSL_DEALCO_CD"),""));                   // 상담거래처코드      
                paramMap.put("COLOR"                , StringUtils.nvlObject(row.get("COLOR"),""));                            // 색상           
                paramMap.put("ONING_DT"             , StringUtils.nvlObject(row.get("ONING_DT"),""));                         // 개통일자           
                paramMap.put("EQP_ST"               , StringUtils.nvlObject(row.get("EQP_ST"),""));                           // 단말기상태        
                paramMap.put("USE_PRD_DDCT_AMT"     , StringUtils.nvlObject(row.get("USE_PRD_DDCT_AMT"),""));                 // 사용기간차감금액    
                paramMap.put("INR_CORR_YN"          , StringUtils.nvlObject(row.get("INR_CORR_YN"),""));                      // 내부부식여부        
                paramMap.put("PWR_SYS"              , StringUtils.nvlObject(row.get("PWR_SYS"),""));                          // 전원시스템        
                paramMap.put("CALL_QULT_TEST"       , StringUtils.nvlObject(row.get("CALL_QULT_TEST"),""));                   // 통화품질테스트      
                paramMap.put("DATA_PRFM"            , StringUtils.nvlObject(row.get("DATA_PRFM"),""));                        // DATA성능       
                paramMap.put("SCRN_TEST"            , StringUtils.nvlObject(row.get("SCRN_TEST"),""));                        // 화면테스트         
                paramMap.put("FUNC_TEST"            , StringUtils.nvlObject(row.get("FUNC_TEST"),""));                        // 기능테스트          
                paramMap.put("LOSS_EQP_YN"          , StringUtils.nvlObject(row.get("LOSS_EQP_YN"),""));                      // 분실단말기여부      
                paramMap.put("RWD_RTN_OBJ_YN"       , StringUtils.nvlObject(row.get("RWD_RTN_OBJ_YN"),""));                   // 보상반납대상여부     
                paramMap.put("RENTP_YN"             , StringUtils.nvlObject(row.get("RENTP_YN"),""));                         // 임대폰여부        
                paramMap.put("WET_YN"               , StringUtils.nvlObject(row.get("WET_YN"),""));                           // 침수여부           
                paramMap.put("USIM_EQPCHG_YN"       , StringUtils.nvlObject(row.get("USIM_EQPCHG_YN"),""));                   // 유심기변여부       
                paramMap.put("OTHRCO_FORGN_EQP_YN"  , StringUtils.nvlObject(row.get("OTHRCO_FORGN_EQP_YN"),""));              // 타사해외단말기여부    
                paramMap.put("SUGG"                 , StringUtils.nvlObject(row.get("SUGG"),""));                             // 의견             
                paramMap.put("JDG_YN"               , StringUtils.nvlObject(row.get("JDG_YN"),""));                           // 감정여부           
                paramMap.put("FULLSET_YN"           , StringUtils.nvlObject(row.get("FULLSET_YN"),""));                       // FULLSET 여부
                paramMap.put("CNSL_AMT"             , StringUtils.nvlObject(row.get("CNSL_AMT"),""));                         // 상담금액   
                paramMap.put("PRCH_CL"              , StringUtils.nvlObject(row.get("PRCH_CL"),""));                          // 매입 구분   
                paramMap.put("CTZ_NO"               , StringUtils.nvlObject(row.get("CTZ_NO"),""));                           // 주민번호    
                paramMap.put("DPSTR"                , StringUtils.nvlObject(row.get("DPSTR"),""));                            // 예금주     
                paramMap.put("BANK_CD"              , StringUtils.nvlObject(row.get("BANK_CD"),""));                          // 은행코드    
                paramMap.put("ACCO_NO"              , StringUtils.nvlObject(row.get("ACCO_NO"),""));                          // 계좌번호    
                paramMap.put("TEL_NO"               , StringUtils.nvlObject(row.get("TEL_NO"),""));                           // 전화번호    
                paramMap.put("ZIPCD_1"              , StringUtils.nvlObject(row.get("ZIPCD_1"),""));                          // 우편번호1   
                paramMap.put("ZIPCD_2"              , StringUtils.nvlObject(row.get("ZIPCD_2"),""));                          // 우편번호2   
                paramMap.put("ADDR"                 , StringUtils.nvlObject(row.get("ADDR"),""));                             // 주소      
                paramMap.put("ETC_ADDR"             , StringUtils.nvlObject(row.get("ETC_ADDR"),""));                         // 기타주소    
                paramMap.put("MOV_YN"               , StringUtils.nvlObject(row.get("MOV_YN"),""));                           // 이동여부    
                paramMap.put("UKEY_DEL_YN"          , StringUtils.nvlObject(row.get("UKEY_DEL_YN"),""));                      // 삭제여부    
                paramMap.put("UKEY_UPDATE_COUNT"    , StringUtils.nvlObject(row.get("UKEY_UPDATE_COUNT"),""));                // UPDATE_CO
                paramMap.put("UKEY_INPUT_DTM"       , StringUtils.nvlObject(row.get("UKEY_INPUT_DTM"),""));                   // 입력일시    
                paramMap.put("UKEY_INSR_ID"         , StringUtils.nvlObject(row.get("UKEY_INSR_ID"),""));                     // 입력자ID   
                paramMap.put("UKEY_UPD_DTM"         , StringUtils.nvlObject(row.get("UKEY_UPD_DTM"),""));                     // 수정일시      
                paramMap.put("UKEY_UPDR_ID"         , StringUtils.nvlObject(row.get("UKEY_UPDR_ID"),""));                     // 수정자ID    
                paramMap.put("FEE_DEDC_YN"          , StringUtils.nvlObject(row.get("FEE_DEDC_YN"),""));                      // 요금공제여부     
                paramMap.put("SVC_NO"               , StringUtils.nvlObject(row.get("SVC_NO"),""));                           // 서비스번호   
                paramMap.put("SVC_MGMT_NO"          , StringUtils.nvlObject(row.get("SVC_MGMT_NO"),""));                      // 서비스관리번호 
                paramMap.put("IMEI"                 , StringUtils.nvlObject(row.get("IMEI"),""));                             // IMEI        
                paramMap.put("IN_CONF_YN"           , StringUtils.nvlObject(row.get("IN_CONF_YN"),""));                       // 입고 확정 여부    
                paramMap.put("IN_CONF_DT"           , StringUtils.nvlObject(row.get("IN_CONF_DT"),""));                       // 입고 확정 일자    
                paramMap.put("IN_PROC_RSN"          , StringUtils.nvlObject(row.get("IN_PROC_RSN"),""));                      // 입고 처리 사유    
                paramMap.put("ETC_CMPT"             , StringUtils.nvlObject(row.get("ETC_CMPT"),""));                         // 기타구성품       
                paramMap.put("POLY_OBJ_YN"          , StringUtils.nvlObject(row.get("POLY_OBJ_YN"),""));                      // 정책대상여부      
                paramMap.put("POLY_OBJ_CD"          , StringUtils.nvlObject(row.get("POLY_OBJ_CD"),""));                      // 정책 대상 코드    
                paramMap.put("PROGR_ST"             , StringUtils.nvlObject(row.get("PROGR_ST"),""));                         // 진행상태        
                paramMap.put("UKEY_XCL_DEALCO_ORG_ID", StringUtils.nvlObject(row.get("UKEY_XCL_DEALCO_ORG_ID"),""));          // ukey정산처조직ID 
                paramMap.put("UKEY_XCL_DEALCO_ORG_ID_2", StringUtils.nvlObject(row.get("UKEY_XCL_DEALCO_ORG_ID_2"),""));      // ukey정산처조직ID2 
                paramMap.put("CNSL_DEALCO_CD_1"     , StringUtils.nvlObject(row.get("CNSL_DEALCO_CD_1"),""));                    
                paramMap.put("PRE_DC_CL"            , StringUtils.nvlObject(row.get("PRE_DC_CL"),""));                        // 단말기가격      
                paramMap.put("STRD_INCEN"           , StringUtils.nvlObject(row.get("STRD_INCEN"),""));                       // 기준인센티브    
                paramMap.put("STRD_INCEN_SCOP_AMT"  , StringUtils.nvlObject(row.get("STRD_INCEN_SCOP_AMT"),""));              // 기준인센티브범위금액
                paramMap.put("FST_REG_CHRGR"        , StringUtils.nvlObject(row.get("FST_REG_CHRGR"),""));                    // 선할인구분
                paramMap.put("ASIANA_CARD_NO"       , StringUtils.nvlObject(row.get("ASIANA_CARD_NO"),""));                   // 아시아나 카드 번호
                paramMap.put("SCRB_PATH"            , StringUtils.nvlObject(row.get("SCRB_PATH"),""));                        // 가입 경로
                paramMap.put("PMTH_USE_EQIP_YN"     , StringUtils.nvlObject(row.get("PMTH_USE_EQIP_YN"),""));                 // 전월 사용 단말 여부
                
                
//                HashMap<String, Object> Map = new HashMap<String,Object>();   
//                Map.put("SPECI_PROC_DT"             , StringUtils.nvlObject(row.get("SPECI_PROC_DT"),""));              // 전문처리일자
//                Map.put("OP_CL"                     , "N");                                                             // 업무 구분
//                Map.put("IN_COUNT"                  , "");                   // 입고 COUNT
//                Map.put("DUP_COUNT"                 , "");                  // 복제 COUNT
//                Map.put("CNSL_DEALCO_ERR_COUNT"     , "");      // 상담 거래처 오류 COUNT
//                Map.put("UPDATE_COUNT"              , "");               // UPDATE COUNT
//                Map.put("INSERT_COUNT"              , "");               // INSERT COUNT
                
                
                if(null != row  ){
                    
                    rv_in_cnt = rv_in_cnt + 1;
//                    Map.put("IN_COUNT", rv_in_cnt);
                    
                    IRecord Record1 = dbSelectSingle("SConsultMgmtCnt", paramMap, context);  // 상담관리 카운트
                    context.getLogger().debug("입고카운트 +1 = " + rv_in_cnt );                               
                    if (Record1.getInt("CNT",0) > 0){
                        
                        IRecord Record2 = dbSelectSingle("SPrchsMgmtCnt", paramMap, context);  // 매입관리 카운트
                        
                        if (Record2.getInt("CNT",0) > 0){
                            rv_duplicate_cnt  =  rv_duplicate_cnt + 1;
//                            Map.put("DUP_COUNT", rv_duplicate_cnt);
                            //rv_errcode   = 'E0';
                            //rv_errmsg    = '존재하는 data.\n';
                            context.getLogger().debug("복제 카운트 +1 = " + rv_duplicate_cnt);
                            context.getLogger().debug("존재하는 data");
                        }else{
                        
                            dbUpdate("UConsultMgmt", paramMap, context);  // 상담관리수정
                            context.getLogger().debug("상담관리수정" );
                            rv_update_cnt  = rv_update_cnt + 1;
//                            Map.put("UPDATE_COUNT", rv_update_cnt);
                            
                            if (row.getInt("SPECI_PROC_DT",0) > 0){
                                dbUpdate("UIfConsultMgmt", paramMap, context);  // IF상담관리수정
                                context.getLogger().debug("IF상담관리수정" );
                            }
                        }
                    }else{
                        IRecord Record3 = dbSelectSingle("SDealcoMgmt", paramMap, context);  // 거래처카운트
                        paramMap.put("CNSL_DEALCO_CD", Record3.get("DEALCO_CD"));           // 상담거래처코드
                        
                        if (Record3.getInt("CNT",0) <= 0){
                            rv_deal_error_cnt  =  rv_deal_error_cnt + 1;
//                            Map.put("CNSL_DEALCO_ERR_COUNT", rv_deal_error_cnt);
                            context.getLogger().debug("IF상담상담 거래처 오류 COUNT +" + rv_deal_error_cnt );
                        }
                        if ("01".equals(Record1.get("PROGR_ST"))){
                            rv_prcSt = "02";
                        }else{
                            rv_prcSt = Record1.get("PROGR_ST");
                        }
                        paramMap.put("PROGR_ST", rv_prcSt);
                        context.getLogger().debug("PROGR_ST = " + rv_prcSt );
                        
                        dbInsert("IConsultMgmt", paramMap, context);  // 상담관리저장
                        
                        rv_insert_cnt  =  rv_insert_cnt + 1;
//                        Map.put("INSERT_COUNT", rv_insert_cnt);
                        context.getLogger().debug("INSERT_COUNT = " + rv_insert_cnt );
                        
                        if(row.get("SPECI_PROC_DT").length() > 0){
                            dbUpdate("UIfConsultMgmt", paramMap, context);  // IF상담관리수정
                            context.getLogger().debug("####IF상담관리수정#### ");
                        }
                    }
                }    
                processCnt++;
            }
        };
        return rh;
    }

}




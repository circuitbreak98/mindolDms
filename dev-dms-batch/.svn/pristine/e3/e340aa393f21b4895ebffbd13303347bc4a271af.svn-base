package dms.nr;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import nexcore.framework.bat.IBatchContext;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.logging.Log;

import com.ibm.icu.util.Calendar;

import dms.utils.SAPUtils;
import nexcore.framework.bat.base.AbsBatchComponent;
import nexcore.framework.bat.base.AbsRecordHandler;
import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecord;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.util.DateUtils;

/**
 * <ul>
 * <li>업무 그룹명 : dms/신규R</li>
 * <li>서브 업무명 : XCR012</li>
 * <li>설  명 : <pre>[NR]FPA수수료생성및정산</pre></li>
 * <li>작성일 : 2015-08-05 10:58:10</li>
 * <li>작성자 : 문재웅 (jaiwoong)</li>
 * </ul>
 */
public class XCR012 extends AbsBatchComponent {
    private Log log;
    private int processCnt = 0;
    private String taskNo = "";
    private int totCnt = 0;
    private String procFileName = "";
    
    public XCR012() {
        super();
    }

    /**
     * 배치 전처리 메소드. 
     * 여기서 Exception 발생시 execute() 메소드는 실행되지 않고, afterExecute() 는 실행됨
     */
    public void beforeExecute(IBatchContext context) {
		log = getLog(context);
		
		processCnt = 0;
		taskNo = "";
		totCnt = 0;
		procFileName = "";
		
		IOnlineContext    onlineCtx  = makeOnlineContext(context);
		IDataSet reqDS = new DataSet();
		IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "fInqTaskNoSeq", reqDS, onlineCtx);
		taskNo = resDS.getField("TASK_NO");
		
		reqDS.putField("TASK_DT", DateUtils.getCurrentDate());
        reqDS.putField("TASK_ID", context.getInParameter("TASK_ID"));
        reqDS.putField("TASK_NO", taskNo);
        reqDS.putField("TASK_NM", context.getInParameter("TASK_NM"));
        reqDS.putField("GRP_ID", "NR");
        reqDS.putField("INST_CD", "DMS");
        reqDS.putField("BAT_TASK_OP_ST_CD", "B");
        reqDS.putField("OP_CNT", "0");
        reqDS.putField("FS_REG_USER_ID", "BAT");
        reqDS.putField("LS_CHG_USER_ID", "BAT");
        
        //배치 전처리
        //IDataSet resDS2 = callOnlineBizComponent("sc.SCSBase", "fRegBatTaskOpHst", reqDS, onlineCtx);

        Log log = getLog(context);
        if(log.isDebugEnabled()) {
            log.debug("공유컴포넌트 호출 결과:");
            log.debug(resDS);
        }		
		
		
    }

    /**
     * 배치 메인 메소드
     */
    public void execute(final IBatchContext context) {
     	//입력파라미터를 받음
     	Map<String, String> paramMap = new HashMap<String, String>();
     	paramMap.put("XCL_YM",  context.getInParameter("XCL_YM"));      //정산년월
     	paramMap.put("PROC_DT", context.getInParameter("XCL_YM")+"01"); 
     	
     	paramMap.put("USER_NO",context.getInParameter("USER_NO"));    //USER_NO   
     	
        log.debug("paramMap :"+paramMap);
        
     	//■ 1.NR_FPA수수료 삭제 ■
        txBegin();   
        dbStartSession();   
        dbBeginBatch();    //트랜잭션 시작
        
        log.info("DBatFPACmms :NR_FPA수수료 대상 삭제>>"+paramMap);
     	dbDelete("DBatFPACmms", paramMap, context);     	
        
     	//■ 2.NR_FPA수수료 등록 ■
     	log.debug("makeRecordHandler paramMap :"+paramMap);
     	dbSelect("SFpaCmmsLst", paramMap, makeRecordHandler(context), context); //DB 조회
        dbEndBatch();   
        dbEndSession(); 
        txCommit();         //트랜잭션 커밋       

        
        
        //■ 3.수수료 정산채무삭제  ■
        txBegin();   
        dbStartSession();   
        dbBeginBatch();    //트랜잭션 시작
        IRecordSet existDebtList = SAPUtils.nvl(dbSelectMulti("SExtDebtInfo",paramMap));
        List<Map> doNotDebtDeleteList = new ArrayList();
        Map tmpMap = null;
        for(int i=0; i<existDebtList.getRecordCount();i++)
        {
            tmpMap = existDebtList.getRecordMap(i);
            if("05".equals(SAPUtils.nvl(tmpMap,"SLIP_ST_CD","")))
            {
                dbDelete("DXclDebt", tmpMap);
            }
            else
            {
                doNotDebtDeleteList.add(tmpMap);
            }
        }
        SAPUtils.debug("doNotDebtDeleteList :" +doNotDebtDeleteList);
        
        //■ 4.수수료 정산채무등록  ■
        if(CollectionUtils.isNotEmpty(doNotDebtDeleteList))
        {
            IRecordSet rs = dbSelectMulti("SClsComLst", paramMap);  //FPA수수료집계목록
            boolean flagContinue = false;
            for(int i=0; i<rs.getRecordCount(); i++) //모수
            {
                for(Map one:doNotDebtDeleteList) //비교 기존 집계 자료에서 전표진행중인것들
                {
                    if(this.equalsMap4Key(one, rs.getRecordMap(i), new String[]{"OP_CL_CD","DEBT_XCL_YM","XCL_CL","DEBT_BIZ_REG_NO","XCL_ITM_CL"}))
                    {
                        flagContinue = true;
                        break;
                    }
                }
                
                if(flagContinue) 
                {
                    flagContinue = false;
                    continue;
                }
                else
                {
                    SAPUtils.debug("rs.getRecordMap(i) :" +rs.getRecordMap(i));
                    dbInsert("IDebt", rs.getRecordMap(i));  
                }
            }
            
        }
        else
        {
            this.selectInsert("SClsComLst", paramMap, "IDebt"); //DB 채무
        }
        
        //■ 5.수수료 기타정산 정보삭제  ■
        dbDelete("DXclEtcByYM", paramMap);
        
        //■ 6.수수료 기타정산등록  ■
        this.selectInsert("SSalesCom2Etc", paramMap, "IEtcXcl"); //DB 기타     	
     	
     	dbEndBatch();   
     	dbEndSession(); 
     	txCommit();         //트랜잭션 커밋     	

     }
     
    /**
     * 처리
     * @param context
     * @return
     */
     public AbsRecordHandler makeRecordHandler(IBatchContext context) {
     	AbsRecordHandler rh = new AbsRecordHandler(context) {
 			
 			@Override
 			public void handleRecord(IRecord row) {
 				context.setProgressCurrent(getCurrentRecordCount()); // 진행률 표시
 				context.getLogger().debug("########### : " + row);
 				
 				IDataSet reqDs = new DataSet();
                reqDs.putFieldMap(row);
                reqDs.putField("USER_NO", context.getInParameter("USER_NO"));
                
                dbInsert("IFpaCmms", reqDs.getFieldMap(), context);  //NR_FPA수수료 등록
 				processCnt++;
 				
 			}
 		};
     	return rh;
     }

     /**
      * 해당 key에 해당하는 값이 
      * @param fromMap
      * @param toMap
      * @param keys
      * @return
      */
     private boolean equalsMap4Key(Map fromMap, Map toMap, String[] keys)
     {
        boolean returnFlag = false;
        
        if(ArrayUtils.isEmpty(keys))
        {
            returnFlag = fromMap.equals(toMap);
        }
        else
        {
            returnFlag = true;
            for(String key:keys)
            {
                //SAPUtils.debug(key+ ") fromMap key :" +SAPUtils.nvl(fromMap, key, "") + ", toMap key :" +SAPUtils.nvl(toMap, key, "")+ "=" +(!SAPUtils.nvl(fromMap, key, "").equals(SAPUtils.nvl(toMap, key, ""))));
                if(  !SAPUtils.nvl(fromMap, key, "").equals(SAPUtils.nvl(toMap, key, ""))
                   ) 
                {
                    
                    returnFlag = false;
                    return returnFlag;
                }
            }
        }
        return returnFlag;
     }
     
     /**
      * select Insert
      * @param selectStmtName
      * @param paramMap
      * @param insertStmtName
      * @return
      */
     private int selectInsert(String selectStmtName, Object paramMap, String insertStmtName)
     {
        int returnInt =0;
        IRecordSet list =dbSelectMulti(selectStmtName, paramMap);
        if(list != null)
        {
            for(int i=0; i<list.getRecordCount(); i++)
            {
                dbInsert(insertStmtName, list.getRecordMap(i));
                returnInt ++;
            }
        }
        return returnInt;
     }     
     
     /**
     * 배치 후처리 메소드. 
     * beforeExecute(), execute() 의 Exception 발생 여부와 관계없이 이 메소드는 실행됨
     */
    public void afterExecute(IBatchContext context) {
        
        IOnlineContext    onlineCtx  = makeOnlineContext(context);
        IDataSet reqDS = new DataSet();
        reqDS.putField("TASK_NO", taskNo);
        reqDS.putField("OP_CNT", ""+processCnt);
        reqDS.putField("OP_FILE_NM", procFileName);
        reqDS.putField("LS_CHG_USER_ID", "BAT");
        
       	 if (super.exceptionInExecute == null) {
             // execute() 정상인 경우
             reqDS.putField("BAT_TASK_OP_ST_CD", "S");
         }else {
             // execute() 에서 에러 발생할 경우
             reqDS.putField("BAT_TASK_OP_ST_CD", "F");
         }
         IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "dUBatTaskOpHst", reqDS, onlineCtx);
         
         Log log = getLog(context);
         if(log.isDebugEnabled()) {
            log.debug("XCR012(FPA수수료 정산)_컴포넌트 호출 결과:");
            log.debug(resDS);
         }
   	 
    }

}

package dms.pr;

import java.util.HashMap;

import nexcore.framework.bat.IBatchContext;

import org.apache.commons.logging.Log;

import nexcore.framework.bat.base.AbsBatchComponent;
import nexcore.framework.bat.base.AbsRecordHandler;
import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecord;
import nexcore.framework.core.exception.BizRuntimeException;
import nexcore.framework.core.util.DateUtils;
import nexcore.framework.core.util.StringUtils;

/**
 * <ul>
 * <li>업무 그룹명 : dms/임대R</li>
 * <li>서브 업무명 : BPR007</li>
 * <li>설  명 : </li>
 * <li>작성일 : 2015-08-12 09:32:06</li>
 * <li>작성자 : 김윤환 (kyh0904)</li>
 * </ul>
 */
public class DBP004 extends AbsBatchComponent {
	private int processCnt = 0;
	private String taskNo = "";
	private String procFileName = "";
	
	/**
	 * 배치 생성자. 상위클래스 생성자 호출
	 */
    public DBP004() {
        super();
    }

    /**
     * 배치 전처리 메소드. 
     * 여기서 Exception 발생시 execute() 메소드는 실행되지 않고, afterExecute() 는 실행됨
     */
    public void beforeExecute(IBatchContext context) {
    	Log log = getLog(context);

		processCnt = 0;
		taskNo = "";
		procFileName = "";

		IOnlineContext onlineCtx = makeOnlineContext(context);
		IDataSet reqDS = new DataSet();
		IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "fInqTaskNoSeq",
				reqDS, onlineCtx);
		taskNo = resDS.getField("TASK_NO");

		reqDS.putField("TASK_DT", DateUtils.getCurrentDate());
		reqDS.putField("TASK_ID", context.getInParameter("TASK_ID"));
		reqDS.putField("TASK_NO", taskNo);
		reqDS.putField("TASK_NM", context.getInParameter("TASK_NM"));
		reqDS.putField("GRP_ID", "PR");
		reqDS.putField("INST_CD", "DMS");
		reqDS.putField("BAT_TASK_PROC_ST_CD", "B");
		reqDS.putField("PROC_CNT", "0");
		reqDS.putField("FS_REG_USER_ID", "BAT");
		reqDS.putField("LS_CHG_USER_ID", "BAT");

		callOnlineBizComponent("sc.SCSBase", "fRegBatTaskOpHst", reqDS,
				onlineCtx);

		log = getLog(context);
		if (log.isDebugEnabled()) {
			log.debug("BPR007(단말기구성품반납)_컴포넌트 호출 시작 :");
			log.debug("배치 오늘 일자 :" + context.getInParameter("PROC_DT"));

			log.debug(resDS);
		}
		
    }

    /**
     * 배치 메인 메소드
     */
    public void execute(final IBatchContext context) {
    	// 트랜잭션 시작
    	txBegin();
    	dbStartSession();
    	dbBeginBatch();
    			    	    					
    	try {
    	    dbSelect("STfEqpCmptRtn", null, makeRecordHandler(context), context); // I/F 단말기 구성품 반납 정보 조회 및 단말기 구성품 반납 정보등록        	        
    	} catch (Exception e) {
    	    throw new BizRuntimeException("M00001", e);
    	}
    			
    	// 트랜잭션 커밋
    	dbEndBatch();
    	dbEndSession();
    	txCommit();
    }
    
    /**
     * 배치 후처리 메소드. 
     * beforeExecute(), execute() 의 Exception 발생 여부와 관계없이 이 메소드는 실행됨
     */
    public void afterExecute(IBatchContext context) {
    	IOnlineContext onlineCtx = makeOnlineContext(context);
		IDataSet reqDS = new DataSet();
		reqDS.putField("TASK_NO", taskNo);
		reqDS.putField("PROC_CNT", "" + processCnt);
		reqDS.putField("PROC_FILE_NM", procFileName);
		reqDS.putField("LS_CHG_USER_ID", "BAT");
		if (super.exceptionInExecute == null) {
			// execute() 정상인 경우
			reqDS.putField("BAT_TASK_PROC_ST_CD", "S");
		} else {
			// execute() 에서 에러 발생할 경우
			reqDS.putField("BAT_TASK_PROC_ST_CD", "F");
		}
		IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "dUBatTaskOpHst",
				reqDS, onlineCtx);

		Log log = getLog(context);
		if (log.isDebugEnabled()) {
			log.debug("BPR007(단말기구성품반납)_컴포넌트 호출 결과:");
			log.debug(resDS);
		}
    }
    
    /**
     * I/F 단말기 구성품 반납 정보 조회 후 레코드 단위로 단말기 구성품 반납 정보 테이블에 입력
     * 
     */
    public AbsRecordHandler makeRecordHandler(IBatchContext context) {
    	AbsRecordHandler rh = new AbsRecordHandler(context) {
			int cmptInfoLength = 0;
			
    		@Override
			public void handleRecord(IRecord row) {																							
				context.setProgressCurrent(getCurrentRecordCount()); // 진행률 표시				
															
				if(null != row  ){										
					/* 단말기 구성품 반납정보 데이터 가공 */					
					context.getLogger().debug("##### CMPT_INFO ###### : " + StringUtils.rtrim(row.get("CMPT_INFO")));					
					if(null != StringUtils.rtrim(row.get("CMPT_INFO")) && StringUtils.rtrim(row.get("CMPT_INFO")).length()>0 && (StringUtils.rtrim(row.get("CMPT_INFO")).length()%3) == 0)  {
						// 단말기 반납 구성품 코드가 존재할때						
						cmptInfoLength = StringUtils.rtrim(row.get("CMPT_INFO")).length();	// 구성품정보 Length						
						context.getLogger().debug("##### cmptInfoLength ###### : " + cmptInfoLength);												
						for (int i = 0; i < cmptInfoLength;) {
							String cmptCd = "";		// 구성품코드
							String cmptRtnYn = ""; 	// 구성품반납여부							
							cmptCd = StringUtils.rtrim(row.get("CMPT_INFO")).substring(i, i+2);
							i=i+2;							
							cmptRtnYn = StringUtils.rtrim(row.get("CMPT_INFO")).substring(i, i+1);
							i=i+1;					
							
							IRecord record = dbSelectSingle("SCmptClctObjSeq", row, context);	// 구성품회수대상번호조회
							
							/* 단말기 구성품 반납정보 데이터 가공 */					
							HashMap<String, Object> paramMap = new HashMap<String,Object>();
							paramMap.put("CMPT_CLCT_OBJ_NO", record.get("CMPT_CLCT_OBJ_NO"));		// 구성품회수대상번호
							paramMap.put("IN_SCHD_DT", context.getInParameter("PROC_DT"));			    		// 입고예정일자
							paramMap.put("EQP_MDL_CD", row.get("EQP_MDL_CD"));			    		// 단말기모델코드
							paramMap.put("EQP_SER_NO", row.get("EQP_SER_NO"));			    		// 단말기일련번호
							paramMap.put("CMPT_CD", cmptCd);			    						// 구성품코드
							paramMap.put("CMPT_RTN_YN", cmptRtnYn);			    					// 구성품반납여부
							
							context.getLogger().debug("########### : " + paramMap.toString());
							
							dbInsert("ITbCmptClctObj", paramMap, context);	 	// TB_CMPT_CLCT_OBJ 테이블에 등록							
						}						
						dbUpdate("UTfEqpCmptRtn", row, context);	// I/F 테이블(TF_EQP_CMPT_RTN) 처리완료 상태 변경						
					}					
					
					
				}
				
				processCnt++;
			}
		};
    	return rh;
    }

}

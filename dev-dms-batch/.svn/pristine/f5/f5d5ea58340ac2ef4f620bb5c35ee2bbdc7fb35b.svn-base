package dms.pr;

import java.util.HashMap;

import nexcore.framework.bat.IBatchContext;

import org.apache.commons.logging.Log;

import nexcore.framework.bat.base.AbsBatchComponent;
import nexcore.framework.bat.base.AbsRecordHandler;
import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecord;
import nexcore.framework.core.exception.BizRuntimeException;
import nexcore.framework.core.util.DateUtils;
import nexcore.framework.core.util.StringUtils;

/**
 * <ul>
 * <li>업무 그룹명 : dms/임대R</li>
 * <li>서브 업무명 : DBP018</li>
 * <li>설  명 : <pre>[PR]분실습득 전조정 요청</pre></li>
 * <li>작성일 : 2015-08-27 15:06:36</li>
 * <li>작성자 : 김윤환 (kyh0904)</li>
 * </ul>
 */
public class DBP017 extends AbsBatchComponent {
    private int processCnt = 0;
    private String taskNo = "";
    private String procFileName = "";
    
    public DBP017() {
        super();
    }

    /**
     * 배치 전처리 메소드. 
     * 여기서 Exception 발생시 execute() 메소드는 실행되지 않고, afterExecute() 는 실행됨
     */
    public void beforeExecute(IBatchContext context) {
        

        processCnt = 0;
        taskNo = "";
        procFileName = "";

        IOnlineContext onlineCtx = makeOnlineContext(context);
        IDataSet reqDS = new DataSet();
        IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "fInqTaskNoSeq",
                reqDS, onlineCtx);
        taskNo = resDS.getField("TASK_NO");

        reqDS.putField("TASK_DT", DateUtils.getCurrentDate());
        reqDS.putField("TASK_ID", context.getInParameter("TASK_ID"));
        reqDS.putField("TASK_NO", taskNo);
        reqDS.putField("TASK_NM", context.getInParameter("TASK_NM"));
        reqDS.putField("GRP_ID", "PR");
        reqDS.putField("INST_CD", "DMS");
        reqDS.putField("BAT_TASK_PROC_ST_CD", "B");
        reqDS.putField("PROC_CNT", "0");
        reqDS.putField("FS_REG_USER_ID", "BAT");
        reqDS.putField("LS_CHG_USER_ID", "BAT");

        callOnlineBizComponent("sc.SCSBase", "fRegBatTaskOpHst", reqDS,
                onlineCtx);
        /*
        Log log = getLog(context);
        if (log.isDebugEnabled()) {
            log.debug("DBP017(분실습득전조정요청)_컴포넌트 호출 시작 :");
            log.debug("배치 오늘 일자 :" + context.getInParameter("PROC_DT"));

            log.debug(resDS);
        }
		*/
    }

    /**
     * 배치 메인 메소드
     */
    public void execute(final IBatchContext context) {
        // 트랜잭션 시작
        txBegin();
        dbStartSession();
        dbBeginBatch();
                
        /* SQL ParmaMap 설정 */
        HashMap<String, Object> paramMap = new HashMap<String,Object>();
        paramMap.put("PROC_DT", context.getInParameter("PROC_DT"));
                        
        try {
            dbSelect("SEqpLossAdj", paramMap, makeRecordHandler(context), context); // 분실습득전조정요청 정보 조회 및 I/F 분실습득전조정요청 정보등록                    
        } catch (Exception e) {
            throw new BizRuntimeException("M00001", e);
        }
                
        // 트랜잭션 커밋
        dbEndBatch();
        dbEndSession();
        txCommit();
    }
    
    /**
     * 배치 후처리 메소드. 
     * beforeExecute(), execute() 의 Exception 발생 여부와 관계없이 이 메소드는 실행됨
     */
    public void afterExecute(IBatchContext context) {
        IOnlineContext onlineCtx = makeOnlineContext(context);
        IDataSet reqDS = new DataSet();
        reqDS.putField("TASK_NO", taskNo);
        reqDS.putField("PROC_CNT", "" + processCnt);
        reqDS.putField("PROC_FILE_NM", procFileName);
        reqDS.putField("LS_CHG_USER_ID", "BAT");
        if (super.exceptionInExecute == null) {
            // execute() 정상인 경우
            reqDS.putField("BAT_TASK_PROC_ST_CD", "S");
        } else {
            // execute() 에서 에러 발생할 경우
            reqDS.putField("BAT_TASK_PROC_ST_CD", "F");
        }
        IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "dUBatTaskOpHst",
                reqDS, onlineCtx);
        /*
        Log log = getLog(context);
        if (log.isDebugEnabled()) {
            log.debug("DBP017(분실습득전조정요청)_컴포넌트 호출 결과:");
            log.debug(resDS);
        }
        */
    }
    
    /**
     * 분실습득전조정요청 정보 조회 후 레코드 단위로  I/F 분실습득전조정요청 정보 테이블에 입력
     * 
     */
    public AbsRecordHandler makeRecordHandler(IBatchContext context) {
        AbsRecordHandler rh = new AbsRecordHandler(context) {
            int i = 1;  // I/F 채번순번 
                         
            @Override
            public void handleRecord(IRecord row) {                                                             
                String ifFileNm = "";
                ifFileNm = "P017.SKCC."+context.getInParameter("PROC_DT")+"_"+context.getInParameter("FILE_SEQ");               
                context.setProgressCurrent(getCurrentRecordCount()); // 진행률 표시
                //context.getLogger().debug("분실습득전조정요청_IF_파일명  : " + ifFileNm);
                                                            
                if(null != row  ){                                      
                    
                    /* I/F 분실습득전조정요청정보 데이터 가공 */                    
                    HashMap<String, Object> paramMap = new HashMap<String,Object>();                    
                    paramMap.put("IF_PROC_DT", context.getInParameter("PROC_DT"));  // IF_처리일자
                    paramMap.put("IF_FILE_NM", ifFileNm);                           // IF_파일명
                    paramMap.put("IF_SEQ", i++);                                    // IF_순번                                        
                    paramMap.put("SVC_MGMT_NO", row.get("SVC_MGMT_NO"));             // 서비스관리번호            
                    paramMap.put("SALE_ITM_CD", "CRPBF01");                         // 매출항목코드 CRPBF01(파손 변상금)
                    paramMap.put("ADJ_REQS_AMT", row.get("ADJ_REQS_AMT"));                    // 조정요청금액
                    paramMap.put("ADJ_RSN_CD", "G1");                               // 조정사유코드    G1
                    paramMap.put("ADJ_DTAIL_RSN_CD", "99");                         // 조정세부사유코드  99
                    paramMap.put("FILLER",StringUtils.rpad("",98," "));             // FILLER
                    
                    //context.getLogger().debug("########### : " + paramMap.toString());                  
                    
                    dbInsert("ITfLossFndBajtReqs", paramMap, context);     // TF_LOSS_FND_BAJT_REQS 테이블에 등록                                      
                }
                
                processCnt++;
            }
        };
        return rh;
    }
    

}

package dms.inf;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import nexcore.framework.bat.IBatchContext;
import nexcore.framework.bat.base.AbsBatchComponent;
import nexcore.framework.core.data.DataSet;
import nexcore.framework.core.data.IDataSet;
//import nexcore.framework.core.data.IBatchContext;
import nexcore.framework.core.data.IOnlineContext;
import nexcore.framework.core.data.IRecord;
import nexcore.framework.core.data.IRecordSet;
import nexcore.framework.core.data.Record;
import nexcore.framework.core.data.RecordHeader;
import nexcore.framework.core.data.RecordSet;
import nexcore.framework.core.data.xml.DataSetXmlTransformer;
import nexcore.framework.core.exception.BizRuntimeException;
import nexcore.framework.core.util.DateUtils;
import nexcore.framework.core.util.StringUtils;

import org.apache.commons.logging.Log;

import dms.constants.enums.sapjco.elem.SAP_SLIP_ITEM;
import dms.utils.SAPUtils;
import dms.utils.sapjco.domain.AgencyAmtAPSlip;
import dms.utils.sapjco.domain.AssetAmtAPSlip;
import fwk.constants.SlipConstants;
import fwk.constants.enums.sapjco.SAP_SLIP_ELEM;
import fwk.constants.enums.sapjco.SAP_SLIP_KINDS;
import fwk.constants.enums.sapjco.SAP_SLIP_RETURN;
import fwk.erfif.sapjco.SapCaller;
import fwk.erfif.sapjco.domain.CommonSlipItem;
import fwk.utils.DomainUtils;
import fwk.utils.HpcUtils;

/**
 * <ul>
 * <li>업무 그룹명 : dms/신규R</li>
 * <li>서브 업무명 : EPR010</li>
 * <li>설  명 : </li>
 * <li>작성일 : 2015-09-04 10:52:23</li>
 * <li>작성자 : 진병수 (greatjin)</li>
 * </ul>
 */
public class EPR010 extends AbsBatchComponent {
    private Log log;
    private int processCnt = 0;
    private String taskNo = "";
    private int totCnt = 0;
    private String procFileName = "";
    
    public EPR010() {
        super();
    }

    /**
     * 배치 전처리 메소드. 
     * 여기서 Exception 발생시 execute() 메소드는 실행되지 않고, afterExecute() 는 실행됨
     */
    public void beforeExecute(IBatchContext context) {
    	log = getLog(context);
		
		processCnt = 0;
		taskNo = "";
		totCnt = 0;
		procFileName = "";
		
		IOnlineContext    batchCtx  = makeOnlineContext(context);
		IDataSet reqDS = new DataSet();
		IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "fInqTaskNoSeq", reqDS, batchCtx);
		taskNo = resDS.getField("TASK_NO");
		
		reqDS.putField("TASK_DT", DateUtils.getCurrentDate());
        reqDS.putField("TASK_ID", context.getInParameter("TASK_ID"));
        reqDS.putField("TASK_NO", taskNo);
        reqDS.putField("TASK_NM", context.getInParameter("TASK_NM"));
        reqDS.putField("GRP_ID", "NR");
        reqDS.putField("INST_CD", "DMS");
        reqDS.putField("BAT_TASK_OP_ST_CD", "B");
        reqDS.putField("OP_CNT", "0");
        reqDS.putField("FS_REG_USER_ID", "BAT");
        reqDS.putField("LS_CHG_USER_ID", "BAT");
        
//        IDataSet resDS2 = callOnlineBizComponent("sc.SCSBase", "fRegBatTaskOpHst", reqDS, batchCtx);

        Log log = getLog(context);
        if(log.isDebugEnabled()) {
            log.debug("공유컴포넌트 호출 결과:");
            log.debug(resDS);
        }		
		
    }
    
    /**
     * 배치 후처리 메소드. 
     * beforeExecute(), execute() 의 Exception 발생 여부와 관계없이 이 메소드는 실행됨
     */
    public void afterExecute(IBatchContext context) {
    	if (super.exceptionInExecute == null) {
            // execute() 정상인 경우
    		IOnlineContext    batchCtx  = makeOnlineContext(context);
            IDataSet reqDS = new DataSet();
            reqDS.putField("TASK_NO", taskNo);
            reqDS.putField("BAT_TASK_OP_ST_CD", "S");
            reqDS.putField("OP_CNT", ""+processCnt);
            reqDS.putField("OP_FILE_NM", procFileName);
            reqDS.putField("LS_CHG_USER_ID", "BAT");

            IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "dUBatTaskOpHst", reqDS, batchCtx);

            Log log = getLog(context);
            if(log.isDebugEnabled()) {
            	log.debug("공유컴포넌트 호출 결과:");
            	log.debug(resDS);
            }
            
        }else {
            // execute() 에서 에러 발생할 경우
        	IOnlineContext    batchCtx  = makeOnlineContext(context);
            IDataSet reqDS = new DataSet();
            reqDS.putField("TASK_NO", taskNo);
            reqDS.putField("BAT_TASK_OP_ST_CD", "F");
            reqDS.putField("OP_CNT", ""+processCnt);
            reqDS.putField("OP_FILE_NM", procFileName);
            reqDS.putField("LS_CHG_USER_ID", "BAT");

            IDataSet resDS = callOnlineBizComponent("sc.SCSBase", "dUBatTaskOpHst", reqDS, batchCtx);

            Log log = getLog(context);
            if(log.isDebugEnabled()) {
                log.debug("공유컴포넌트 호출 결과:");
                log.debug(resDS);
            }
            
        }
    }
    
    
    /**
     * 입력파라미터 준비
     * @param context
     * @return
     */
    private Map<String, String> prepareInputParam(IBatchContext context)
    {
    	Map<String, String> paramMap = new HashMap<String, String>();
     	log.debug("prepareInputParam() context :"+context);
     	paramMap.putAll(context.getInParameters());
      	paramMap.put("PROC_DT", context.getInParameter("PROC_DT")); //실행일
     	log.debug("prepareInputParam() paramMap :"+paramMap);
     	return paramMap;
    }
    
    /**
     * 입력파라미터 준비
     * @param context
     * @return
     */
    private IDataSet prepareInputParamm(IBatchContext context)
    {
    	
     	log.debug("prepareInputParam() context :"+context);
    	String   reqDataSetStr = context.getInParameter("POST_SLIP_DATASET");
    	IDataSet requestData    = DataSetXmlTransformer.xmlToDataSet(new java.io.StringReader(reqDataSetStr));
    	
     	log.debug("prepareInputParam() paramMap :"+requestData);
     	return requestData;
    }

    /**
     * 배치 메인 메소드
     */
    public void execute(final IBatchContext context) {
    	IOnlineContext onlineCtx =  getOnlineContextFromOndemand();
    	Map requestMap = prepareInputParam (context);
    	IDataSet requestData = prepareInputParamm (context);
    	this.postingSlip(requestMap,requestData, context);
    	 
    }
    
    
    /**
     * 전표발행
     * @param requestData
     * @param batchCtx
     * @return
     */
    private IDataSet postingSlip(Map requestMap, IDataSet requestData, IBatchContext batchCtx)
    {
    	IDataSet responseData = new DataSet();
		if(     requestData.containsField("SLIP_TYPE")
			     && StringUtils.nvl(requestData.getField("SLIP_TYPE"),"").equals("AGENCY_AMT_AP")) //대리점단말기 정산
			{
				responseData = fRegAgentAmtAPSlip(requestData, batchCtx);
			}
			else
			{
				//자산취득전표
				responseData = fRegAssetAPSlip(requestMap, requestData, batchCtx);
			}
			
			
			
			return responseData;
    }



		/**
		* sliptable기록
		* @param requestData
		* @param batchCtx
		* @return
		*/
		private String fInqSlipSeq(IDataSet requestData, IBatchContext batchCtx)
		{
			String slipNo = "";
			
			slipNo = ""+Calendar.getInstance().getTimeInMillis();
			slipNo = "DMS" + slipNo.substring(slipNo.length() -7 ,slipNo.length());
			
			log.debug("fInqSlipSeq requestData :"+ requestData);

			IRecord rec  = dbSelectSingle("SSlipSeq", new HashMap());
			
			slipNo = rec.get(SlipConstants.SLIP_NO);
			
			return slipNo;
		}


		/**
		* 단말기 대금 전표
		* @param requestData
		* @param batchCtx
		* @return
		*/
		private IDataSet fRegAgentAmtAPSlip(IDataSet requestData, IBatchContext batchCtx) {
			
			IDataSet responseData = new DataSet();
			
			String zserial = "";
			IRecordSet rs = requestData.getRecordSet("RS_AGN_EQP_STL_LIST");
			
			if(rs==null || rs.getRecordCount()==0) return responseData;
			
			long   prchAmt   = 0;
			long   agnCrdAmt = 0;
			long   crdSaleDamt =0;
			String custCd;
			
			List<AgencyAmtAPSlip> slipList = new ArrayList<AgencyAmtAPSlip>(); 
			AgencyAmtAPSlip cash = null;
			AgencyAmtAPSlip lease = null;
			for(int i=0;i<rs.getRecordCount();i++)
			{
				zserial = this.fInqSlipSeq(requestData, batchCtx);
				prchAmt  =  Long.parseLong(rs.get(i, "PRCH_AMT")) ;
				agnCrdAmt  =  Long.parseLong(StringUtils.nvlEmpty(rs.get(i, "AGN_CRD_AMT"), "0")) ;
				crdSaleDamt  =  Long.parseLong(StringUtils.nvlEmpty(rs.get(i, "CRD_SALE_DAMT"), "0"));
				custCd     = rs.get(i, "DEALCO_BLICENS_NO");
				if(crdSaleDamt < 0)
				{
					cash = new AgencyAmtAPSlip(zserial,custCd,Math.abs(crdSaleDamt)+"",false);
					lease  = new AgencyAmtAPSlip(zserial,custCd,agnCrdAmt+"",true);
				}
				else
				{
					cash = new AgencyAmtAPSlip(zserial,custCd,prchAmt+"",true);
				}
				slipList.add(cash);
				if(lease!=null) slipList.add(lease);
				cash  = null;
				lease = null;
			}
	
			for(AgencyAmtAPSlip slip :slipList )
			{
				responseData = this.sendSlip(slip);
			
				
				//slip table update
				responseData.putField("FISCL_SYS_SEQ", zserial);
				this.fRegSlipData(responseData, batchCtx);
				
			}
			
				//afterslipposting
			IRecordSet returnRS = (IRecordSet) rs.clone();
			if(!this.hasHeaderName(returnRS, "SLIP_NO"))
				returnRS.addHeader(new RecordHeader("SLIP_NO"));
			IRecord tmpRec = null;
			for(int i=0;i<rs.getRecordCount();i++)
			{
				custCd     = rs.get(i, "DEALCO_BLICENS_NO");
				tmpRec = rs.getRecord(i);
				
				for(AgencyAmtAPSlip slip :slipList )
				{
					if(custCd.equals(slip.getCustCd()))
					{
						tmpRec = returnRS.getRecord(i);
						tmpRec.set("SLIP_NO", responseData.getField ( "SLIP_NO"));
						returnRS.setRecord(i, tmpRec);
					}
				}
			}
			
			responseData.putRecordSet("ERP_SLIP_LIST", returnRS);
			
			
			return responseData;
		}

		/**
		* 전표처리
		* @param slip
		* @return
		*/
		private IDataSet sendSlip(AgencyAmtAPSlip slip)
		{
			IDataSet responseData = new DataSet();
			IDataSet inDataSet = fMakeObj2Slip(slip);
			
			SapCaller caller = new SapCaller(SAP_SLIP_KINDS.ASSET_AMT_AP.getFuncName());
				responseData = caller.sendData(inDataSet, SAPUtils.makeCallInfo(),false);
				
			responseData.putField(SlipConstants.SLIP_NO, getMessageFromSAP(responseData));
			return responseData;
		}



		/**
		* 자산취득전표
		* @param requestData
		* @param batchCtx
		* @return
		*/
		private IDataSet fRegAssetAPSlip(Map requestMap, IDataSet requestData,IBatchContext batchCtx) {
			
			log = getLog(batchCtx);
			IDataSet responseData = new DataSet();
			
			String zserial = this.fInqSlipSeq(requestData, batchCtx);
			
			
			
			IRecordSet rs = requestData.getRecordSet("RS_SLIP_INVE_HANDLE");
			
			log.debug("_______________________________fRegAssetAPSlip () rs:"+rs); 
			
			log.debug("________________________________________batchCtx:"+batchCtx); 
			
			if(rs==null || rs.getRecordCount()==0) return responseData;
			
			String eqpPrchAmt ="0";
			long   eqpPrchSumAmt = 0;
			
			for(int i=0;i<rs.getRecordCount();i++)
			{
				eqpPrchAmt = rs.get(i, "EQP_PRCH_AMT");
				eqpPrchSumAmt += Long.parseLong(eqpPrchAmt) ;
			}
			
			responseData = this.sendSlip(new AssetAmtAPSlip(zserial, fLoginId(requestMap, batchCtx), null, null, eqpPrchSumAmt+""));
			
			//slip table update
			responseData.putField("FISCL_SYS_SEQ", zserial);
			this.fRegSlipData(responseData, batchCtx);
			
			
			
				//afterslipposting
			IRecordSet returnRS = (IRecordSet) rs.clone();
			if(!this.hasHeaderName(returnRS, "USER_NO"))
				returnRS.addHeader(new RecordHeader("USER_NO"));
			if(!this.hasHeaderName(returnRS, "SLIP_NO"))
				returnRS.addHeader(new RecordHeader("SLIP_NO"));
			
			IRecord tmpRec = null;
			for(int i=0;i<rs.getRecordCount();i++)
			{
				tmpRec = returnRS.getRecord(i);
				tmpRec.set("USER_NO", requestMap.get("USER_NO")); //?????
				tmpRec.set("SLIP_NO", responseData.getField("SLIP_NO")); //?????
				returnRS.setRecord(i, tmpRec);
			}
			log.debug("_______________________________fRegAssetAPSlip () returnRS:"+returnRS); 
			
			log.debug("________________________________________:"); 
			
			
			responseData.putRecordSet("ERP_SLIP_LIST", returnRS);
			
			fRegAssetAPSlipAfter(returnRS,  batchCtx);
			
			return responseData;
		}
		
		/**
		 * 로그인ID가져오기
		 * @param requestData
		 * @param batchCtx
		 * @return
		 */
		private String fLoginId(Map requestMap, IBatchContext batchCtx)
		{
			String lginId = "06218";
			IRecord rec = dbSelectSingle("SUserInfo", requestMap);
			if(rec!=null ) lginId = rec.get("LGIN_ID");
			return lginId;
		}
		
		/**
		 * 단말 자산 전표테이블에 업데이트
		 * @param recordSet
		 * @param batchCtx
		 * @return
		 */
		private int fRegAssetAPSlipAfter(IRecordSet recordSet, IBatchContext batchCtx) 
		{
			int insertCnt = 0;
			if(recordSet==null || recordSet.getRecordCount()==0) return insertCnt;
			
			Map paramMap = null;
			for(int i=0; i<recordSet.getRecordCount(); i++)
			{
				paramMap = recordSet.getRecordMap(i);
				paramMap.put("ASSET_SLIP_CL_CD", "AA"); //자산취득
				dbInsert("IAssetSlipInfo",paramMap);
				insertCnt ++;
			}
			return insertCnt;
		}
		
		
		
	 

		/**
		* sliptable기록
		* @param requestData
		* @param batchCtx
		* @return
		*/
		private IDataSet fRegSlipData(IDataSet requestData, IBatchContext batchCtx)
		{
			IDataSet responseData = new DataSet();
			dbInsert("ISlipData", requestData.getFieldMap());
			return responseData;
		}

		/**
		* 전표처리
		* @param slip
		* @return
		*/
		private IDataSet sendSlip(AssetAmtAPSlip slip)
		{
			IDataSet responseData = new DataSet();
			IDataSet inDataSet = fMakeObj2Slip(slip);
			
			SapCaller caller = new SapCaller(SAP_SLIP_KINDS.ASSET_AMT_AP.getFuncName());
				responseData = caller.sendData(inDataSet, SAPUtils.makeCallInfo(),false);
				
			responseData.putField(SlipConstants.SLIP_NO, getMessageFromSAP(responseData));
			return responseData;
		}

		/**
		* TransMessage
		* @param responseData
		* @return
		*/
		private String getMessageFromSAP(IDataSet responseData)
		{
			String slipNo  = null;
			IRecordSet  rs  = responseData.getRecordSet(SAP_SLIP_ELEM.SLIP_RETURN.getPart());
			String messageType= rs.get(0, SAP_SLIP_RETURN.MSGTYP.getSapCol());
			if(SlipConstants.SAP_SLIP_RETURN_MSG_TYP_SUCCESS.equals(messageType))
			{
				slipNo     = rs.get(0, SAP_SLIP_RETURN.BELNR.getSapCol());
			}
			else
			{
				String message   =  rs.get(0, SAP_SLIP_RETURN.MSG.getSapCol());
				throw new BizRuntimeException("XYZE0000", new String[] {message});
			}
			return slipNo;
		}

		/**
		* MakeObj2SLip
		* @param slip
		* @return
		*/
		private IDataSet fMakeObj2Slip(AgencyAmtAPSlip slip)
		{
			IDataSet ds = new DataSet();
			ds.putRecordSet(SAPUtils.makeHeader(slip.getHeader()));
			ds.putRecordSet(fMakeItems(slip.getItems()));
			return ds;
		}

		/**
		* MakeObj2SLip
		* @param slip
		* @return
		*/
		private IDataSet fMakeObj2Slip(AssetAmtAPSlip slip)
		{
			IDataSet ds = new DataSet();
			ds.putRecordSet(SAPUtils.makeHeader(slip.getHeader()));
			ds.putRecordSet(fMakeItems(slip.getItems()));
			return ds;
		}





		/**
		* 해더 맵핑
		* @param rs
		* @return
		*/
		private IRecordSet fMakeItems(CommonSlipItem[] items)
		{
			IRecordSet itDmsHeader = new RecordSet(SAP_SLIP_ELEM.SLIP_ITEM.getPart());
			
			for(SAP_SLIP_ITEM one: SAP_SLIP_ITEM.values())
			{
				itDmsHeader.addHeader(new RecordHeader(one.getSapCol()));
			}
			
			for(CommonSlipItem item:items)
			{
			    IRecord recordContents = itDmsHeader.newRecord();
			    
			    HashMap map = DomainUtils.invokeDomainToMap(item);
			    
				for(SAP_SLIP_ITEM one: SAP_SLIP_ITEM.values())
				{
					recordContents.put(one.getSapCol(), map.get(one.getVar()));
				}
				
			    itDmsHeader.addRecord(recordContents);
			}
			
			return itDmsHeader;
		}


		/**
		*
		*
		* @author 진병수 (greatjin)
		* @since 2015-08-26 14:43:47
		*
		* @param requestData 요청정보 DataSet 객체
		* @param batchCtx   요청 컨텍스트 정보
		* @return 처리결과 DataSet 객체
		*/
		public IDataSet fRemoveSlip(IDataSet requestData, IBatchContext batchCtx) {
		    IDataSet responseData = new DataSet();
		    
		    IRecordSet rs = requestData.getRecordSet("RS_SLIP_DELETE");
		    
		    
	    	String functionName = "Z_FI_RFC_DMS_DOCUMENT_DELETE";
	    	
			HashMap params = new HashMap();
			log.debug("fRemoveSlip ==================> (requestData):"+requestData);
			log.debug("fRemoveSlip ==================> (requestData end):");
			
			IRecordSet itDmsHeader = new RecordSet("IT_DELETE_DATA");

			itDmsHeader.addHeader(new RecordHeader("BUKRS    ".trim()));
			itDmsHeader.addHeader(new RecordHeader("CCNUM    ".trim()));
			itDmsHeader.addHeader(new RecordHeader("GJAHR    ".trim()));
			itDmsHeader.addHeader(new RecordHeader("BELNR    ".trim()));
			itDmsHeader.addHeader(new RecordHeader("ZFISERIAL".trim()));
		    
			String yyyy  = "";
			String dmsSeq = "";

		    for(int i=0; i<rs.getRecordCount(); i++)
		    {
					IRecord recordContents = itDmsHeader.newRecord();
			        recordContents.put("BUKRS    ".trim(), SlipConstants.CO_CD_SKCC);
			        //recordContents.put("CCNUM    ".trim(), ca.getUserNo());
			        
			        if(this.hasValue(rs, i, "YYYY"))
			        {
			        	yyyy = rs.get(i, "YYYY");
			        }
			        else
			        {
			        	yyyy = HpcUtils.getCurrentDate(Locale.KOREA, "yyyy");
			        }
			        
			        recordContents.put("GJAHR    ".trim(), yyyy); 
			        recordContents.put("BELNR    ".trim(), rs.get(i, "SLIP_NO"));
			        
			        if(this.hasValue(rs,i, "FISCL_SYS_SEQ"))
			        {
			        	dmsSeq = rs.get(i, "FISCL_SYS_SEQ") ;
			        }
			        else
			        {
			        	dmsSeq = this.fInqSlipInfo(SAPUtils.convertRecord2DataSet(rs.getRecord(i)), batchCtx); 
			        }
			        recordContents.put("ZFISERIAL    ".trim(), dmsSeq);
			        
			        itDmsHeader.addRecord(recordContents);
		    }
		    // 처리 결과값을 responseData에 넣어서 리턴하십시요
		    
	        
	        IDataSet erpRequestData = new DataSet();
	        erpRequestData.putRecordSet("IT_DELETE_DATA", itDmsHeader);
	        
	    	HashMap callInfo = new HashMap();
			callInfo.put("params", params);
			callInfo.put("IT_DELETE_DATA", "IT_DELETE_DATA");

			log.debug("callDeleteSlip ==================> (callInfo):"+callInfo); 

			SapCaller caller = new SapCaller(functionName);
	   	 	responseData = caller.sendData(erpRequestData, callInfo ,false);
	   	 	
	   	     log.debug("callDeleteSlip ==================> (responseData):"+responseData); 
			
			//this.updateSlipStatus(responseData.getRecordSet("IT_ERP_RETURN"), batchCtx);
			
	    	
	    	IRecordSet erpRs = responseData.getRecordSet("IT_ERP_RETURN");
	    	
	    	if(!this.hasHeaderName(rs, "SLIP_NO"))
	    		rs.addHeader(new RecordHeader("SLIP_NO"));

	    	if(!this.hasHeaderName(rs, "MSGTYP"))
	    		rs.addHeader(new RecordHeader("MSGTYP"));


	     	//afterslipposting
	    	IRecordSet returnRS = (IRecordSet) rs.clone();

	    	IRecord tmpRec = new Record();
	    	
	    	
	    	Map erpMap = null;
	    	String slipNo = "";
	    	
	    	for(int i=0;i<returnRS.getRecordCount();i++)
	    	{
	    		tmpRec = returnRS.getRecord(i);
	    		slipNo =  tmpRec.get("SLIP_NO").toString();
	    		erpMap = this.findRecord2Map(erpRs, "BELNR", slipNo);
	    		log.debug("callDeleteSlip ==================> (erpMap):"+erpMap);
	    		tmpRec.put("MSGTYP", erpMap.get("MSGTYP"));
	    		returnRS.setRecord(i, tmpRec);
	    	}
	    		
	    	this.updateSlipStatus(returnRS, batchCtx);
	    	
	    	responseData.putRecordSet("RS_SLIP_DELETE", returnRS);
			
		    return responseData;
		}
		
		/**
		 * 키를 가지고 하나의 레코드만 가져온다.
		 * @param rs
		 * @param key
		 * @return
		 */
		private Map findRecord2Map(IRecordSet rs, String keyField, String key)
		{
	    	Map returnMap = new HashMap();
	    	if(rs==null || !this.hasHeaderName(rs, keyField)) return returnMap;
			for(int i=0 ; i<rs.getRecordCount(); i++)
			{
				if(key.equals(rs.get(i,keyField)))
				{
					returnMap = rs.getRecordMap(i);
					break;
				}
			}
			return returnMap;
		}

		
		/**
		* sliptable기록
		* @param requestData
		* @param batchCtx
		* @return
		*/
		private IDataSet updateSlipStatus(IRecordSet rs, IBatchContext batchCtx)
		{
			IDataSet responseData = new DataSet();
			
			
			SAPUtils.debug("fRegSlipData updateSlipStatus :"+ rs);
			Map param = new HashMap();
			IDataSet ds = new DataSet();
			// 	2. 업무 DM호출
			for( int i=0; i<rs.getRecordCount(); i++)
			{
				param =rs.getRecordMap(i);
				param.put("SLIP_ST_CD", "05");
				ds.putFieldMap(param);
				dbUpdate("USlipStatus", ds.getFieldMap());
			}
			return responseData;
		}
		
		/**
		 * dmsSerial을 가자온다.
		 * @param requestData
		 * @param batchCtx
		 * @return
		 */
		private String fInqSlipInfo(IDataSet requestData, IBatchContext batchCtx) 
		{
			String dmsSeq;
			IRecord rs = dbSelectSingle("SSlipInfo", requestData.getFieldMap());
			dmsSeq = rs.get("FISCL_SYS_SEQ");
			return dmsSeq;
		}
    

		/**
		 * 해당이름에 해당하는 해더가 있는지 본다.
		 * @param returnRS
		 * @param headerName
		 * @return
		 */
		private boolean hasHeaderName(IRecordSet returnRS, String headerName)
		{
			boolean returnFlag = false;
			if(   returnRS !=null
			   && returnRS.getHeaderCount() >0
			   && StringUtils.isNotEmpty(headerName)
			   )
			{
				int idx = returnRS.getHeaderIndex(headerName);
				if(idx != -1)
					returnFlag = true;
			}
			
			return returnFlag;
		}
		
		
		/**
		 * 해당이름에 해당하는 해더가 있는지 본다.
		 * @param returnRS
		 * @param headerName
		 * @return
		 */
		private boolean hasValue(IRecordSet returnRS, int idx, String headerName)
		{
			boolean returnFlag = false;
			if(     this.hasHeaderName(returnRS, headerName)
				 && returnRS.get(idx, headerName) != null
			   )
			{
				returnFlag = true;
			}
			return returnFlag;
		}
		

}
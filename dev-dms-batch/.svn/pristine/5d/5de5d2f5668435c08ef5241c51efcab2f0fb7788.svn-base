package nexcore.framework;

import java.util.HashMap;
import java.util.Map;

import nexcore.framework.bat.IBatchContext;
import nexcore.framework.bat.base.AbsBatchComponent;
import nexcore.framework.bat.base.AbsRecordHandler;
import nexcore.framework.bat.base.DBSession;
import nexcore.framework.core.data.IRecord;

/**
 * <ul>
 * <li>업무 그룹명 : NEXBANK/샘플</li>
 * <li>서브 업무명 : BEDU001</li>
 * <li>설  명 : </li>
 * <li>작성일 : 2013-05-16</li>
 * <li>작성자 : admin (admin)</li>
 * </ul>
 */
public class BEDU001 extends AbsBatchComponent {
	
	public BEDU001() {
		super();
	}

	
    /**
     * 배치 전처리 메소드. 
     * 여기서 Exception 발생시 execute() 메소드는 실행되지 않고, afterExecute() 는 실행됨
     */
    public void beforeExecute(IBatchContext context) {
    
    }

    /**
     * 배치 메인 메소드
     */
	public void execute(final IBatchContext context) {
        DBSession readSession = dbNewSession(context, false, null);

        // 트랜잭션 시작
    	txBegin();  
    	dbStartSession();
    	dbBeginBatch();
    	
		Map map = new HashMap();
		map.put("ACC_NO", context.getInParameter("ACC_NO")); // 파라미터 가져오기
		
		IRecord rec = dbSelectSingle("S001", map, context);
		context.setProgressTotal(rec.getLong(0)); // 진행률 표시

        dbSelect("S002", map, makeRecordHandler(context), readSession); //DB 조회
        
        // 트랜잭션 커밋
		dbEndBatch();
		dbEndSession();
		txCommit(); 
	}
	
	/**
	 * 배치 후처리 메소드. 
	 * beforeExecute(), execute() 의 Exception 발생 여부와 관계없이 이 메소드는 실행됨
	 */
    public void afterExecute(IBatchContext context) {
        if (super.exceptionInExecute == null) {
            // execute() 정상인 경우
            
        }else {
            // execute() 에서 에러 발생할 경우
            
        }
    }
    
    public AbsRecordHandler makeRecordHandler(IBatchContext context) {
    	AbsRecordHandler rh = new AbsRecordHandler(context) {
			
			@Override
			public void handleRecord(IRecord row) {
				context.setProgressCurrent(getCurrentRecordCount()); // 진행률 표시
				context.getLogger().debug("########### : " + row);
				
				//DB 처리로직 추가...
			}
		};
    	return rh;
    }

}
